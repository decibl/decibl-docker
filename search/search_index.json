{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"decibl-docker Welcome to the decibl-docker documentation! Installation Install Python 3.10+ Run pip install -r requirements.txt File Structure The Project is Structured as follows: src/ \u251c\u2500\u2500 databases/ | \u2500\u2500 backups/ | \u2500\u2500 core/ | \u2500\u2500 logs/ | \u2500\u2500 soundfiles/ | \u2500\u2500 tests/ Let's go over what each one of them does and why they are important. src Also called source . Where all the actual code is stored. This is the only folder that is actually required to run the project. All the files outside of this folder are for development purposes only. Most large projects use a src folder. analyticsdb Note: This folder is generated automatically when the project is run. This folder contains the physical database file. This is where analyticsdb.py stores all the data/retrieves it, and is the overall \"homebase\" for all the analytics. Look at the analyticsdb.py file for more information. backups Note: This folder is generated automatically when the project is run. This folder contains the backups of the database and logs. It is automatically generated when the project is run, and is used to store backups of the database and logs. Look at the analyticsdb.py and config.py files for more information. core This folder contains the core files of the project. These are the files that are used to run the project. core/ \u251c\u2500\u2500 analyticsdb.py | \u2500\u2500 config.py | \u2500\u2500 songparser.py logs Note: This folder is generated automatically when the project is run. This folder contains the logs of the project. It is automatically generated when the project is run, and is used to store logs of the project. Look at the config.py file for more information. soundfiles This folder contains the physical sound files of the project. This is where the project gets the sound files from. Look at the songparser.py file for more information. tests This folder contains the tests for the project. Run pytest to run the tests. Look at the tests for more information.","title":"Home"},{"location":"#decibl-docker","text":"Welcome to the decibl-docker documentation!","title":"decibl-docker"},{"location":"#installation","text":"Install Python 3.10+ Run pip install -r requirements.txt","title":"Installation"},{"location":"#file-structure","text":"The Project is Structured as follows: src/ \u251c\u2500\u2500 databases/ | \u2500\u2500 backups/ | \u2500\u2500 core/ | \u2500\u2500 logs/ | \u2500\u2500 soundfiles/ | \u2500\u2500 tests/ Let's go over what each one of them does and why they are important.","title":"File Structure"},{"location":"#src","text":"Also called source . Where all the actual code is stored. This is the only folder that is actually required to run the project. All the files outside of this folder are for development purposes only. Most large projects use a src folder.","title":"src"},{"location":"#analyticsdb","text":"Note: This folder is generated automatically when the project is run. This folder contains the physical database file. This is where analyticsdb.py stores all the data/retrieves it, and is the overall \"homebase\" for all the analytics. Look at the analyticsdb.py file for more information.","title":"analyticsdb"},{"location":"#backups","text":"Note: This folder is generated automatically when the project is run. This folder contains the backups of the database and logs. It is automatically generated when the project is run, and is used to store backups of the database and logs. Look at the analyticsdb.py and config.py files for more information.","title":"backups"},{"location":"#core","text":"This folder contains the core files of the project. These are the files that are used to run the project. core/ \u251c\u2500\u2500 analyticsdb.py | \u2500\u2500 config.py | \u2500\u2500 songparser.py","title":"core"},{"location":"#logs","text":"Note: This folder is generated automatically when the project is run. This folder contains the logs of the project. It is automatically generated when the project is run, and is used to store logs of the project. Look at the config.py file for more information.","title":"logs"},{"location":"#soundfiles","text":"This folder contains the physical sound files of the project. This is where the project gets the sound files from. Look at the songparser.py file for more information.","title":"soundfiles"},{"location":"#tests","text":"This folder contains the tests for the project. Run pytest to run the tests. Look at the tests for more information.","title":"tests"},{"location":"analyticsdb/","text":"Overview The main file that interacts with the database. Responsible for creating, adding, and retrieving data from the database. Here's some important infomation about the file: This file interacts with the analytics database using a SQLite3 database. This is the main file that interacts with the database. It is responsible for creating, adding, and retrieving data from the database. Create an AnalyticsDBHandler object and run commands to do stuff. dbhandler = AnalyticsDBHandler () # make the object dbhandler . create_all_tables () # create all the tables dbhandler . populate_database () # looks into soundfiles/ folder and adds all the info to the tables dbhandler . get_song_by_id ( 1 ) # get the song with the id of 1 The file is split up into different sections, you'll see a large comment break between each section. All the funtions run raw sqlite3, so there isn't a rigid structure to the database. Important Functions create_all_tables() You have to create the tables before doing anything with the data! If you don't run this command (if the tables don't already exist), you'll get constant errors. Also once created, the data persists between runs of the program (they're stored in the file analyticsdb.db). If you delete the file or it doesn't exist, run this command to create the tables. populate_database() The bread and butter of the file. This function looks into the soundfiles/ folder and adds all the info to the tables. This includes adding data to multiple databases at once, it handles all the hard work for you. Realistically, this is the only function we'll be needing to add data to the table. It accounts for duplicates, so look for WARNING messages in the logs if you're adding a lot of data. insert_song(**kwargs) Yeah, there's a ton of parameters. This function is used to insert a song into the database. It's a bit of a pain to use, but it's the only way to insert a song into the database. Look at songparser.py for more info. AnalyticsDBHandler Class to handle all the data analytics, especially stuff like creating tables, making backups, etc. Source code in src\\core\\analyticsdb.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 1359 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 1389 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 1464 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 1524 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 1647 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 1684 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 1729 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 1765 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 1791 1792 1793 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 1839 1840 1841 1842 1843 1844 1845 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 class AnalyticsDBHandler : \"\"\"Class to handle all the data analytics, especially stuff like creating tables, making backups, etc.\"\"\" # CONSTRUCTOR def __init__ ( self , debug_path = None ) -> None : \"\"\" __init__ Initialize the database handler. Creates the database at the path specified in config.py Args: debug_path (str, optional): Path to the database for debug. Defaults to None. \"\"\" if debug_path is None : self . conn = sqlite3 . connect ( config . DATABASE_PATH ) else : self . conn = sqlite3 . connect ( debug_path ) # ------------------------------------------------------------------------------------------------------------ # -------------------------------------------------------------------------------------------- # Error Handling # -------------------------------------------------------------------------------------------- # ------------------------------------------------------------------------------------------------------------ def raise_table_not_created ( self , table , details ): err = \"Unable to create \" + table + \" table: \" + details logging . info ( err ) raise HTTPException ( status_code = 400 , detail = err ) # ------------------------------------------------------------------------------------------------------------ # -------------------------------------------------------------------------------------------- # CREATE TABLES # -------------------------------------------------------------------------------------------- # ------------------------------------------------------------------------------------------------------------ def create_songs_table ( self ): \"\"\" create_songs_table Creates the songs table in the database. \"\"\" try : logging . info ( \"Creating songs table\" ) cursor = self . conn . cursor () # This is going to be a LOT of data, make a table with the following: # Create the table cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS songs ( song_id TEXT PRIMARY KEY, filepath TEXT, filesize BIGINT, padding INTEGER, album_artwork_bit_depth INTEGER, album_artwork_colors INTEGER, album_artwork_height INTEGER, album_artwork_width INTEGER, bit_depth INTEGER, bitrate INTEGER, channels INTEGER, duration INTEGER, sample_rate INTEGER, album TEXT, barcode TEXT, date_created TEXT, disc_number INTEGER, disc_total INTEGER, isrc TEXT, itunesadvisory TEXT, length INTEGER, publisher TEXT, rating INTEGER, title TEXT, track_number INTEGER, track_total INTEGER, source TEXT, main_artist TEXT )\"\"\" ) self . conn . commit () logging . info ( \"Created songs table\" ) except : self . raise_table_not_created ( \"song\" , \"unable to create table\" ) def create_plays_table ( self ): \"\"\" create_plays_table Creates the plays table in the database. \"\"\" try : logging . info ( \"Creating plays table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS plays ( play_id INTEGER PRIMARY KEY AUTOINCREMENT, song_title TEXT NOT NULL, song_primary_artist TEXT NOT NULL, filesize BIGINT, start_dt TEXT NOT NULL, end_dt TEXT NOT NULL, song_id TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created plays table\" ) except : self . raise_table_not_created ( \"plays\" , \"unable to create table\" ) def create_playlists_table ( self ) -> bool : \"\"\" create_playlists_table Creates the playlists table in the database. Returns: bool: True if successful, False if not. \"\"\" try : logging . info ( \"Creating playlists table\" ) cursor = self . conn . cursor () # description is a text that is cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS playlists ( playlist_id INTEGER PRIMARY KEY AUTOINCREMENT, playlist_name TEXT NOT NULL, playlist_desc TEXT, created_dt TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created playlists table\" ) except : self . raise_table_not_created ( \"playlists\" , \"unable to create table\" ) def create_playlists_songs_table ( self ) -> bool : \"\"\" create_playlists_songs_table Creates the playlists_songs table in the database. Returns: bool: True if successful, False if not. \"\"\" try : # Song_id is a foreign key to the songs table logging . info ( \"Creating playlists_songs table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS playlists_songs ( playlist_id INTEGER NOT NULL, song_id TEXT NOT NULL, added_dt TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created playlists_songs table\" ) except : self . raise_table_not_created ( \"playlists_songs\" , \"unable to create table\" ) def create_song_artists_table ( self ): \"\"\" create_song_artists_table Creates the song_artists table in the database. \"\"\" try : # Song_id is a foreign key to the songs table logging . info ( \"Creating song_artists table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS song_artists ( artist_name TEXT NOT NULL, song_id TEXT NOT NULL, dt_added TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created song_artists table\" ) except : self . raise_table_not_created ( \"song_artists\" , \"unable to create table\" ) def create_album_artists_table ( self ): \"\"\"Create the album_artists table, returns True if successful, False if not.\"\"\" try : # Album_id is a foreign key to the songs table logging . info ( \"Creating album_artists table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS album_artists ( artist_name TEXT NOT NULL, song_id TEXT NOT NULL, dt_added TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created album_artists table\" ) except : self . raise_table_not_created ( \"album_artists\" , \"unable to create table\" ) def create_composers_table ( self ) -> bool : \"\"\" create_composers_table Creates the composers table in the database. Returns: bool: True if successful, False if not. \"\"\" try : # Song_id is a foreign key to the songs table logging . info ( \"Creating composers table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS composers ( composer_name TEXT NOT NULL, song_id TEXT NOT NULL, dt_added TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created composers table\" ) except : self . raise_table_not_created ( \"composers\" , \"unable to create table\" ) def create_genres_table ( self ): \"\"\" create_genres_table Creates the genres table in the database. \"\"\" try : # Song_id is a foreign key to the songs table logging . info ( \"Creating genres table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS genres ( genre_name TEXT NOT NULL, song_id TEXT NOT NULL, dt_added TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created genres table\" ) except : self . raise_table_not_created ( \"genres\" , \"unable to create table\" ) def create_all_tables ( self ): \"\"\"Create all the tables, returns True if successful, False if not.\"\"\" logging . info ( \"Creating all tables\" ) self . create_songs_table () self . create_plays_table () self . create_playlists_table () self . create_playlists_songs_table () self . create_song_artists_table () self . create_album_artists_table () self . create_composers_table () self . create_genres_table () logging . info ( \"Created all tables\" ) # ------------------------------------------------------------------------------------------------------------ # ------------------------------------------------------------------------------------------------------------ # DELETE TABLES & INFO # ------------------------------------------------------------------------------------------------------------ # ------------------------------------------------------------------------------------------------------------ def clear_songs_table ( self ): \"\"\" clear_songs_table Clears the songs table in the database. \"\"\" logging . info ( \"Clearing songs table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM songs;\" ) self . conn . commit () logging . info ( \"Cleared songs table\" ) def clear_plays_table ( self ): \"\"\" clear_plays_table Clears the plays table in the database. \"\"\" logging . info ( \"Clearing plays table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM plays;\" ) self . conn . commit () logging . info ( \"Cleared plays table\" ) def clear_playlists_table ( self ): \"\"\" clear_playlists_table Clears the playlists table in the database. \"\"\" logging . info ( \"Clearing playlists table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM playlists;\" ) self . conn . commit () logging . info ( \"Cleared playlists table\" ) def clear_playlists_songs_table ( self ): \"\"\" clear_playlists_songs_table Clears the playlists_songs table in the database. \"\"\" logging . info ( \"Clearing playlists_songs table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM playlists_songs;\" ) self . conn . commit () logging . info ( \"Cleared playlists_songs table\" ) def clear_song_artists_table ( self ): \"\"\" clear_song_artists_table Clears the song_artists table in the database. \"\"\" logging . info ( \"Clearing song_artists table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM song_artists;\" ) self . conn . commit () logging . info ( \"Cleared song_artists table\" ) def clear_album_artists_table ( self ): \"\"\" clear_album_artists_table Clears the album_artists table in the database. \"\"\" logging . info ( \"Clearing album_artists table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM album_artists;\" ) self . conn . commit () logging . info ( \"Cleared album_artists table\" ) def clear_composers_table ( self ): \"\"\" clear_composers_table Clears the composers table in the database. \"\"\" logging . info ( \"Clearing composers table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM composers;\" ) self . conn . commit () logging . info ( \"Cleared composers table\" ) def clear_genres_table ( self ): \"\"\" clear_genres_table Clears the genres table in the database. \"\"\" logging . info ( \"Clearing genres table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM genres;\" ) self . conn . commit () logging . info ( \"Cleared genres table\" ) def clear_all_tables ( self ) -> bool : \"\"\"Clear all the tables, returns True if successful, False if not.\"\"\" logging . info ( \"Clearing all tables\" ) self . clear_songs_table () self . clear_plays_table () self . clear_playlists_table () self . clear_playlists_songs_table () self . clear_song_artists_table () self . clear_album_artists_table () self . clear_composers_table () self . clear_genres_table () logging . info ( \"Cleared all tables\" ) return True def delete_database ( self ) -> bool : \"\"\"Delete the database, returns True if successful, False if not. Returns: bool: True if successful, False if not. \"\"\" logging . info ( \"Deleting database\" ) os . remove ( config . DATABASE_PATH ) logging . info ( \"Deleted database\" ) return True def delete_song_by_id ( self , song_id : str ) -> bool : \"\"\"Delete a song from the database by its ID. Args: song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting song by ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM songs WHERE song_id = ?;\"\"\" , ( song_id ,) ) self . conn . commit () logging . info ( f \"Deleted song by ID: { song_id } \" ) return True def delete_playlist_by_id ( self , playlist_id : int ) -> bool : \"\"\"Delete a playlist from the database by its ID. Args: playlist_id (int): ID of the playlist to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting playlist by ID: { playlist_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM playlists WHERE playlist_id = ?;\"\"\" , ( playlist_id ,) ) self . conn . commit () logging . info ( f \"Deleted playlist by ID: { playlist_id } \" ) return True def delete_playlist_by_name ( self , playlist_name : str ) -> bool : \"\"\"Delete a playlist from the database by its name. Args: playlist_name (str): Name of the playlist to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting playlist by name: { playlist_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM playlists WHERE playlist_name = ?;\"\"\" , ( playlist_name ,) ) self . conn . commit () logging . info ( f \"Deleted playlist by name: { playlist_name } \" ) return True def delete_playlist_song_by_id ( self , playlist_id : int , song_id : str ) -> bool : \"\"\"Delete a song from a playlist by its ID. Args: playlist_id (int): ID of the playlist to delete the song from. song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting song from playlist by ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM playlists_songs WHERE playlist_id = ? AND song_id = ?;\"\"\" , ( playlist_id , song_id ) ) self . conn . commit () logging . info ( f \"Deleted song from playlist by ID: { song_id } \" ) return True def delete_playlist_song_by_name ( self , playlist_name : str , song_name : str ) -> bool : \"\"\"Delete a song from a playlist by its name. Args: playlist_name (str): Name of the playlist to delete the song from. song_name (str): Name of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting song from playlist by name: { song_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM playlists_songs WHERE playlist_id = (SELECT playlist_id FROM playlists WHERE playlist_name = ?) AND song_id = (SELECT song_id FROM songs WHERE song_name = ?);\"\"\" , ( playlist_name , song_name ) ) self . conn . commit () logging . info ( f \"Deleted song from playlist by name: { song_name } \" ) return True def delete_playlist_song_by_playlist_id_song_id ( self , playlist_id : int , song_id : str ) -> bool : \"\"\"Delete a song from a playlist by its ID. Args: playlist_id (int): ID of the playlist to delete the song from. song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting song from playlist by ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM playlists_songs WHERE playlist_id = ? AND song_id = ?;\"\"\" , ( playlist_id , song_id ) ) self . conn . commit () logging . info ( f \"Deleted song from playlist by ID: { song_id } \" ) return True def delete_song_artist_by_artist_song_id ( self , artist_id : int , song_id : str ) -> bool : \"\"\"Delete a song from a playlist by its ID. Args: artist_id (int): ID of the artist to delete the song from. song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting song from artist by ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM songs_artists WHERE artist_id = ? AND song_id = ?;\"\"\" , ( artist_id , song_id ) ) self . conn . commit () logging . info ( f \"Deleted song from artist by ID: { song_id } \" ) return True def delete_album_artist_by_artist_album_id ( self , artist_id : int , album_id : int ) -> bool : \"\"\"Delete an album from an artist by its ID. Args: artist_id (int): ID of the artist to delete the album from. album_id (int): ID of the album to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting album from artist by ID: { album_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM albums_artists WHERE artist_id = ? AND album_id = ?;\"\"\" , ( artist_id , album_id ) ) self . conn . commit () logging . info ( f \"Deleted album from artist by ID: { album_id } \" ) return True def delete_composer_by_name_song_id ( self , composer_name : str , song_id : str ) -> bool : \"\"\"Delete a composer from a song by its name. Args: composer_name (str): Name of the composer to delete the song from. song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting composer from song by name: { composer_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM songs_composers WHERE composer_id = (SELECT composer_id FROM composers WHERE composer_name = ?) AND song_id = ?;\"\"\" , ( composer_name , song_id ) ) self . conn . commit () logging . info ( f \"Deleted composer from song by name: { composer_name } \" ) return True def delete_genre_by_name_song_id ( self , genre_name : str , song_id : str ) -> bool : \"\"\"Delete a genre from a song by its name. Args: genre_name (str): Name of the genre to delete the song from. song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting genre from song by name: { genre_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM songs_genres WHERE genre_id = (SELECT genre_id FROM genres WHERE genre_name = ?) AND song_id = ?;\"\"\" , ( genre_name , song_id ) ) self . conn . commit () logging . info ( f \"Deleted genre from song by name: { genre_name } \" ) return True # ------------------------------------------------------------------------------------------------------------ # ------------------------------------------------------------------------------------------------------------ # RETRIEVE DATA INDIVIDUAL # ------------------------------------------------------------------------------------------------------------ # ------------------------------------------------------------------------------------------------------------ def get_song_by_id ( self , song_id : str ) -> List [ dict ]: \"\"\" get_song_by_id Searches the song table for a song with the given ID. Args: song_id (str): ID of the song to search for. Returns: List[dict]: List of dictionaries containing the song data. \"\"\" logging . info ( f \"Getting song by ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM songs WHERE song_id = ?;\"\"\" , ( song_id ,) ) song = cursor . fetchone () # copy the dict variable config.song_table_data song_table_data = config . song_table_data . copy () if song is None : return None song_table_data [ 'song_id' ] = song [ 0 ] song_table_data [ \"filepath\" ] = song [ 1 ] song_table_data [ \"filesize\" ] = song [ 2 ] song_table_data [ \"padding\" ] = song [ 3 ] song_table_data [ \"album_artwork_bit_depth\" ] = song [ 4 ] song_table_data [ \"album_artwork_colors\" ] = song [ 5 ] song_table_data [ \"album_artwork_height\" ] = song [ 6 ] song_table_data [ \"album_artwork_width\" ] = song [ 7 ] song_table_data [ \"bit_depth\" ] = song [ 8 ] song_table_data [ \"bitrate\" ] = song [ 9 ] song_table_data [ \"channels\" ] = song [ 10 ] song_table_data [ \"duration\" ] = song [ 11 ] song_table_data [ \"sample_rate\" ] = song [ 12 ] song_table_data [ \"album\" ] = song [ 13 ] song_table_data [ \"barcode\" ] = song [ 14 ] song_table_data [ \"date_created\" ] = song [ 15 ] song_table_data [ \"disc_number\" ] = song [ 16 ] song_table_data [ \"disc_total\" ] = song [ 17 ] song_table_data [ \"isrc\" ] = song [ 18 ] song_table_data [ \"itunesadvisory\" ] = song [ 19 ] song_table_data [ \"length\" ] = song [ 20 ] song_table_data [ \"publisher\" ] = song [ 21 ] song_table_data [ \"rating\" ] = song [ 22 ] song_table_data [ \"title\" ] = song [ 23 ] song_table_data [ \"track_number\" ] = song [ 24 ] song_table_data [ \"track_total\" ] = song [ 25 ] song_table_data [ \"source\" ] = song [ 26 ] song_table_data [ \"main_artist\" ] = song [ 27 ] return song_table_data def get_song_id_by_title_filesize ( self , title : str , filesize : int ) -> int : \"\"\" get_song_id_by_title_filesize Searches the database to find the song ID by title and filesize. You want to use filesize because they're basically gurenteed to be unique. Args: title (str): Title of Song filesize (int): Filesize of song (get these from the song object) Returns: int: song_id of the song \"\"\" logging . info ( f \"Getting song by title and filesize: { title } , { filesize } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM songs WHERE title = ? AND filesize = ?;\"\"\" , ( title , filesize ) ) # return the id of the song song = cursor . fetchone () if song is None : return None logging . info ( f \"Got song by title and filesize: { title } , { filesize } \" ) return song [ 0 ] def get_songs_in_playlist ( self , playlist_name : str ) -> List [ dict ]: \"\"\" get_songs_in_playlist Returns a list of all the songs in a given playlist Args: playlist_name (str): Name of the playlist to get songs from Returns: List[dict]: List of dictionaries containing the song data. \"\"\" logging . info ( f \"Getting songs in playlist: { playlist_name } \" ) playlist_id = self . get_playlist_id_by_name ( playlist_name ) # GET SONG IDS from playlists_songs table then look up songs in songs table cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM playlists_songs WHERE playlist_id = ?;\"\"\" , ( playlist_id ,) ) playlist_songs = cursor . fetchall () songs = [] for playlist_song in playlist_songs : song_id = playlist_song [ 1 ] song = self . get_song_by_id ( song_id ) songs . append ( song ) logging . info ( f \"Got songs in playlist: { playlist_name } \" ) return songs def get_playlist_id_by_name ( self , playlist_name : str ) -> int : \"\"\" get_playlist_id_by_name Get ID of playlist by name. Args: playlist_name (str): Name of playlist Returns: int: ID of playlist \"\"\" logging . info ( f \"Getting playlist by name: { playlist_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM playlists WHERE playlist_name = ?;\"\"\" , ( playlist_name ,) ) playlist = cursor . fetchone () if playlist is None : return None logging . info ( f \"Got playlist by name: { playlist_name } \" ) return playlist [ 0 ] def get_playlist_by_id ( self , playlist_id : int ) -> dict : \"\"\" get_playlist_by_id Get playlist by ID. Args: playlist_id (int): ID of playlist Returns: dict: Dictionary containing playlist data. {playlist_id, playlist_name, playlist_desc, created_dt} \"\"\" logging . info ( f \"Getting playlist by ID: { playlist_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM playlists WHERE playlist_id = ?;\"\"\" , ( playlist_id ,) ) playlist = cursor . fetchone () logging . info ( f \"Got playlist by ID: { playlist_id } \" ) playlist_data = {} playlist_data [ \"playlist_id\" ] = playlist [ 0 ] playlist_data [ \"playlist_name\" ] = playlist [ 1 ] playlist_data [ \"playlist_desc\" ] = playlist [ 2 ] playlist_data [ \"created_dt\" ] = playlist [ 3 ] return playlist_data def get_song_album_artists ( self , song_id : str ) -> List [ str ]: \"\"\" get_song_album_artists Get all the album artists of a song, returns a list of names. Args: song_id (str): ID of song Returns: List[str]: list of names of album artists \"\"\" logging . info ( f \"Getting song album artists by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM album_artists WHERE song_id = ?;\"\"\" , ( song_id ,) ) album_artists = cursor . fetchall () logging . info ( f \"Got song album artists by song ID: { song_id } \" ) return album_artists def get_song_composers ( self , song_id : str ) -> List [ str ]: \"\"\" get_song_composers Get all the composers of a song, returns a list of names. Args: song_id (str): ID of song Returns: List[str]: list of names of composers \"\"\" logging . info ( f \"Getting song composers by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM composers WHERE song_id = ?;\"\"\" , ( song_id ,) ) composers = cursor . fetchall () logging . info ( f \"Got song composers by song ID: { song_id } \" ) return composers def get_song_artists ( self , song_id : str ) -> List [ str ]: \"\"\" get_song_artists Get all the artists of a song, returns a list of names of Artists. Args: song_id (str): ID of song Returns: List[str]: list of names of artists \"\"\" logging . info ( f \"Getting song artists by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM artists WHERE song_id = ?;\"\"\" , ( song_id ,) ) artists = cursor . fetchall () logging . info ( f \"Got song artists by song ID: { song_id } \" ) return artists def get_song_genres ( self , song_id : str ) -> List [ str ]: \"\"\" get_song_genres Get all the genres of a song, returns a list of names of genres. Args: song_id (str): ID of song Returns: List[str]: list of names of genres \"\"\" logging . info ( f \"Getting song genres by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM genres WHERE song_id = ?;\"\"\" , ( song_id ,) ) genres = cursor . fetchall () logging . info ( f \"Got song genres by song ID: { song_id } \" ) return genres def get_play_information_from_song_id ( self , song_id : str ) -> Dict [ str , str ]: \"\"\" get_play_information_from_song_id Get play information from song ID. This is the song_title, song_primary_artist, and filesize Args: song_id (str): ID of song Returns: Dict[str, str]: Dictionary of song_title, song_primary_artist, filesize, and song_id \"\"\" logging . info ( f \"Getting play information for song ID: { song_id } \" ) song_raw = self . get_song_by_id ( song_id ) song_values = { \"song_title\" : song_raw [ \"title\" ], \"song_primary_artist\" : song_raw [ \"main_artist\" ], \"filesize\" : song_raw [ \"filesize\" ], \"song_id\" : song_raw [ 'song_id' ] } logging . info ( f \"Got play information for song ID: { song_id } \" ) return song_values def get_play_by_id ( self , play_id : int ) -> dict : \"\"\" get_play_by_id Get play by ID. Args: play_id (int): ID of play Returns: dict: play object \"\"\" logging . info ( f \"Getting play by ID: { play_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM plays WHERE play_id = ?;\"\"\" , ( play_id ,) ) play = cursor . fetchone () logging . info ( f \"Got play by ID: { play_id } \" ) play_data = { \"play_id\" : play [ 0 ], \"song_title\" : play [ 1 ], \"song_primary_artist\" : play [ 2 ], \"filesize\" : play [ 3 ], \"start_dt\" : play [ 4 ], \"end_dt\" : play [ 5 ], \"song_id\" : play [ 6 ] } return play_data def get_song_artists_of_song ( self , song_id : str ) -> List [ str ]: \"\"\" get_song_artists_of_song Get all the artists of a song, returns a list of names of Artists. Args: song_id (str): ID of song Returns: List[str]: list of names of artists \"\"\" logging . info ( f \"Getting song artists by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM song_artists WHERE song_id = ?;\"\"\" , ( song_id ,) ) artists = cursor . fetchall () song_artists = [] for artist in artists : song_artists . append ( artist [ 0 ]) logging . info ( f \"Got song artists by song ID: { song_id } \" ) return song_artists def get_album_artists_of_song ( self , song_id : str ) -> List [ str ]: \"\"\" get_album_artists_of_song Get all the artists of a song, returns a list of names of Artists. Args: song_id (str): ID of song Returns: List[str]: list of names of artists \"\"\" logging . info ( f \"Getting album artists by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM album_artists WHERE song_id = ?;\"\"\" , ( song_id ,) ) artists = cursor . fetchall () album_artists = [] for artist in artists : album_artists . append ( artist [ 0 ]) logging . info ( f \"Got album artists by song ID: { song_id } \" ) return album_artists def get_composers_of_song ( self , song_id : str ) -> List [ str ]: \"\"\" get_composers_of_song Get all the composers of a song, returns a list of names of composers. Args: song_id (str): ID of song Returns: List[str]: list of names of composers \"\"\" logging . info ( f \"Getting composers by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM composers WHERE song_id = ?;\"\"\" , ( song_id ,) ) composers = cursor . fetchall () song_composers = [] for composer in composers : song_composers . append ( composer [ 0 ]) logging . info ( f \"Got composers by song ID: { song_id } \" ) return song_composers def get_genres_of_song ( self , song_id : str ) -> List [ str ]: \"\"\" get_genres_of_song Get all the genres of a song, returns a list of names of genres. Args: song_id (str): ID of song Returns: List[str]: list of names of genres \"\"\" logging . info ( f \"Getting song genres by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM genres WHERE song_id = ?;\"\"\" , ( song_id ,) ) genres = cursor . fetchall () song_genres = [] for genre in genres : song_genres . append ( genre [ 0 ]) logging . info ( f \"Got song genres by song ID: { song_id } \" ) return song_genres def get_songs_in_album ( self , album_name : str ) -> List [ dict ]: \"\"\" get_songs_in_album Get all the songs in an album, returns a list of Song objects. Args: album_name (str): name of album Returns: List[dict]: list of Song objects \"\"\" logging . info ( f \"Getting songs in album: { album_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM songs WHERE album = ?;\"\"\" , ( album_name ,) ) songs = cursor . fetchall () song_list = [] for song in songs : song_list . append ({ \"song_title\" : song [ - 5 ], \"song_primary_artist\" : song [ - 1 ], \"filesize\" : song [ 2 ], \"song_id\" : song [ 0 ] }) logging . info ( f \"Got songs in album: { album_name } \" ) return song_list def get_songs_in_album_artist ( self , album_artist : str ) -> List [ dict ]: \"\"\" get_songs_in_album_artist Get all the songs in an album artist, returns a list of Song objects. Args: album_artist (str): name of album artist Returns: List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) \"\"\" logging . info ( f \"Getting songs in album artist: { album_artist } \" ) cursor = self . conn . cursor () # use table album_artists to get all songs by album artist cursor . execute ( \"\"\"SELECT * FROM album_artists WHERE artist_name = ?;\"\"\" , ( album_artist ,) ) songs = cursor . fetchall () song_list = [] for song in songs : song_data = self . get_song_by_id ( song [ 1 ]) song_list . append ({ \"song_title\" : song_data [ 'title' ], \"song_primary_artist\" : song_data [ 'main_artist' ], \"filesize\" : song_data [ 'filesize' ], \"song_id\" : song_data [ 'song_id' ] }) logging . info ( f \"Got songs in album artist: { album_artist } \" ) return song_list def get_songs_in_song_artist ( self , song_artist : str ) -> List [ dict ]: \"\"\" get_songs_in_song_artist Get all the songs in a song artist, returns a list of Song objects. Args: song_artist (str): name of song artist Returns: List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) \"\"\" logging . info ( f \"Getting songs in song artist: { song_artist } \" ) cursor = self . conn . cursor () # use table song_artists to get all songs by song artist cursor . execute ( \"\"\"SELECT * FROM song_artists WHERE artist_name = ?;\"\"\" , ( song_artist ,) ) songs = cursor . fetchall () song_list = [] for song in songs : song_data = self . get_song_by_id ( song [ 1 ]) song_list . append ({ \"song_title\" : song_data [ 'title' ], \"song_primary_artist\" : song_data [ 'main_artist' ], \"filesize\" : song_data [ 'filesize' ], \"song_id\" : song_data [ 'song_id' ] }) logging . info ( f \"Got songs in song artist: { song_artist } \" ) return song_list def get_songs_in_composer ( self , composer : str ) -> List [ dict ]: \"\"\" get_songs_in_composer Get all the songs in a composer, returns a list of Song objects. Args: composer (str): name of composer Returns: List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) \"\"\" logging . info ( f \"Getting songs in composer: { composer } \" ) cursor = self . conn . cursor () # use table composers to get all songs by composer cursor . execute ( \"\"\"SELECT * FROM composers WHERE composer_name = ?;\"\"\" , ( composer ,) ) songs = cursor . fetchall () song_list = [] for song in songs : song_data = self . get_song_by_id ( song [ 1 ]) song_list . append ({ \"song_title\" : song_data [ 'title' ], \"song_primary_artist\" : song_data [ 'main_artist' ], \"filesize\" : song_data [ 'filesize' ], \"song_id\" : song_data [ 'song_id' ] }) logging . info ( f \"Got songs in composer: { composer } \" ) return song_list def get_songs_in_genre ( self , genre : str ) -> List [ dict ]: \"\"\" get_songs_in_genre Get all the songs in a genre, returns a list of Song objects. Args: genre (str): name of genre Returns: List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) \"\"\" logging . info ( f \"Getting songs in genre: { genre } \" ) cursor = self . conn . cursor () # use table genres to get all songs by genre cursor . execute ( \"\"\"SELECT * FROM genres WHERE genre_name = ?;\"\"\" , ( genre ,) ) songs = cursor . fetchall () song_list = [] for song in songs : song_data = self . get_song_by_id ( song [ 1 ]) song_list . append ({ \"song_title\" : song_data [ 'title' ], \"song_primary_artist\" : song_data [ 'main_artist' ], \"filesize\" : song_data [ 'filesize' ], \"song_id\" : song_data [ 'song_id' ] }) logging . info ( f \"Got songs in genre: { genre } \" ) return song_list # ------------------------------------------------------------------------------------------------------------ # ------------------------------------------------------------------------------------------------------------ # RETRIEVE DATA MULTIPLE # ------------------------------------------------------------------------------------------------------------ # ------------------------------------------------------------------------------------------------------------ def get_all_tables ( self ) -> List [ str ]: \"\"\" get_all_tables Get all the tables in the database, returns a list of table names. Returns: List[str]: list of table names \"\"\" logging . info ( \"Getting all tables\" ) cursor = self . conn . cursor () cursor . execute ( \"SELECT name FROM sqlite_master WHERE type='table';\" ) tables = cursor . fetchall () logging . info ( \"Got all tables\" ) return tables def get_all_songs ( self ) -> List [ dict ]: \"\"\" get_all_songs Get all the songs in the database, returns a list of Song objects Returns: List[dict]: list of dictionaries \"\"\" logging . info ( \"Getting all songs\" ) cursor = self . conn . cursor () cursor . execute ( \"SELECT * FROM songs;\" ) songs = cursor . fetchall () songs_return = [] for song in songs : song_table_data = { \"song_id\" : song [ 0 ], \"filepath\" : song [ 1 ], \"filesize\" : song [ 2 ], \"padding\" : song [ 3 ], \"album_artwork_bit_depth\" : song [ 4 ], \"album_artwork_colors\" : song [ 5 ], \"album_artwork_height\" : song [ 6 ], \"album_artwork_width\" : song [ 7 ], \"bit_depth\" : song [ 8 ], \"bitrate\" : song [ 9 ], \"channels\" : song [ 10 ], \"duration\" : song [ 11 ], \"sample_rate\" : song [ 12 ], \"album\" : song [ 13 ], \"barcode\" : song [ 14 ], \"date_created\" : song [ 15 ], \"disc_number\" : song [ 16 ], \"disc_total\" : song [ 17 ], \"isrc\" : song [ 18 ], \"itunesadvisory\" : song [ 19 ], \"length\" : song [ 20 ], \"publisher\" : song [ 21 ], \"rating\" : song [ 22 ], \"title\" : song [ 23 ], \"track_number\" : song [ 24 ], \"track_total\" : song [ 25 ], \"source\" : song [ 26 ], \"main_artist\" : song [ 27 ], } songs_return . append ( song_table_data ) return songs_return def get_all_plays ( self ) -> List [ dict ]: \"\"\" get_all_plays Get all the plays in the database, returns a list of the plays Returns: List[dict]: list of dictionaries \"\"\" logging . info ( \"Getting all plays\" ) cursor = self . conn . cursor () cursor . execute ( \"SELECT * FROM plays;\" ) plays = cursor . fetchall () logging . info ( \"Got all plays\" ) return plays def get_all_song_artists ( self , no_duplicates = True ) -> List [ str ]: \"\"\" get_all_song_artists Get all the song artists in the database, returns a list of strings Returns: List[str]: list of strings \"\"\" # artists can be duplicated, so we need to remove duplicates from song_artists logging . info ( \"Getting all song artists\" ) cursor = self . conn . cursor () if no_duplicates : cursor . execute ( \"SELECT DISTINCT artist_name FROM song_artists;\" ) else : cursor . execute ( \"SELECT artist_name FROM song_artists;\" ) song_artists = cursor . fetchall () logging . info ( \"Got all song artists\" ) song_artists = [ artist [ 0 ] for artist in song_artists ] return song_artists def get_all_album_artists ( self , no_duplicates = True ) -> List [ str ]: \"\"\" get_all_album_artists Get all the album artists in the database, returns a list of strings Args: no_duplicates (bool, optional): remove duplicates. Defaults to True. Returns: List[str]: list of strings \"\"\" # artists can be duplicated, so we need to remove duplicates from album_artists logging . info ( \"Getting all album artists\" ) cursor = self . conn . cursor () album_artists = [] if no_duplicates : cursor . execute ( \"SELECT DISTINCT artist_name FROM album_artists;\" ) else : cursor . execute ( \"SELECT artist_name FROM album_artists;\" ) album_artists = cursor . fetchall () logging . info ( \"Got all album artists\" ) album_artists = [ artist [ 0 ] for artist in album_artists ] return album_artists def get_all_composers ( self , no_duplicates = True ) -> List [ str ]: \"\"\" get_all_composers Get all the composers in the database, returns a list of strings Args: no_duplicates (bool, optional): remove duplicates. Defaults to True. Returns: List[str]: list of strings \"\"\" # composers can be duplicated, so we need to remove duplicates from composers logging . info ( \"Getting all composers\" ) cursor = self . conn . cursor () if no_duplicates : cursor . execute ( \"SELECT DISTINCT composer_name FROM composers;\" ) else : cursor . execute ( \"SELECT composer_name FROM composers;\" ) composers = cursor . fetchall () logging . info ( \"Got all composers\" ) composers = [ composer [ 0 ] for composer in composers ] return composers def get_all_genres ( self , no_duplicates = True ) -> List [ str ]: \"\"\" get_all_genres Get all the genres in the database, returns a list of strings Args: no_duplicates (bool, optional): remove duplicates. Defaults to True. Returns: List[str]: list of strings \"\"\" # genres can be duplicated, so we need to remove duplicates from genres logging . info ( \"Getting all genres\" ) cursor = self . conn . cursor () if no_duplicates : cursor . execute ( \"SELECT DISTINCT genre_name FROM genres;\" ) else : cursor . execute ( \"SELECT genre_name FROM genres;\" ) genres = cursor . fetchall () logging . info ( \"Got all genres\" ) genres = [ genre [ 0 ] for genre in genres ] return genres def get_all_playlist_names ( self ) -> List [ str ]: \"\"\" get_all_playlist_names Get all the playlist names in the database, returns a list of strings Returns: List[str]: list of strings \"\"\" logging . info ( \"Getting all playlist names\" ) cursor = self . conn . cursor () cursor . execute ( \"SELECT playlist_name FROM playlists;\" ) playlist_names = cursor . fetchall () # remove the tuple from each playlist name playlist_names = [ playlist_name [ 0 ] for playlist_name in playlist_names ] logging . info ( \"Got all playlist names\" ) return playlist_names def get_all_playlist_songs ( self ) -> List [ dict ]: \"\"\" get_all_playlist_songs Get all the playlist songs in the database, returns a list of dictionaries Returns: List[dict]: list of dictionaries [song_name, file_size, id] \"\"\" playlist_names = self . get_all_playlist_names () playlist_songs = {} for playlist_name in playlist_names : # we only want the song_name, file_size, and id songs = self . get_songs_in_playlist ( playlist_name ) playlist_values = [] for song_data in songs : song_values = { \"song_name\" : song_data [ \"title\" ], \"file_size\" : song_data [ \"filesize\" ], } song_id = self . get_song_id_by_title_filesize ( song_values [ \"song_name\" ], song_values [ \"file_size\" ]) song_values [ \"id\" ] = song_id playlist_values . append ( song_values ) playlist_songs [ playlist_name ] = playlist_values return playlist_songs def get_all_songs_in_genre ( self , genre_name : str ) -> List [ dict ]: \"\"\" get_all_songs_in_genre Get all the songs in a genre, returns a list of dictionaries Args: genre_name (str): Name of the genre Returns: List[dict]: list of dictionaries \"\"\" logging . info ( \"Getting all songs in genre {} \" . format ( genre_name )) cursor = self . conn . cursor () # get all song_id that matches the given genre_name in the genres table cursor . execute ( \"SELECT song_id FROM genres WHERE genre_name = ?;\" , ( genre_name ,)) song_ids = cursor . fetchall () song_ids = [ song_id [ 0 ] for song_id in song_ids ] # get all the songs that match the song_ids songs = [] for song_id in song_ids : song_data = self . get_song_by_id ( song_id ) songs . append ( song_data ) logging . info ( \"Got all songs in genre {} \" . format ( genre_name )) return songs def get_all_columns_from_table ( self , table_name : str ) -> List [ str ]: \"\"\" get_all_columns_from_table Get all the columns from a table, returns a list of strings Args: table_name (str): Name of the table Returns: List[str]: list of strings \"\"\" logging . info ( \"Getting all columns from table {} \" . format ( table_name )) cursor = self . conn . cursor () cursor . execute ( \"PRAGMA table_info( {} );\" . format ( table_name )) columns = cursor . fetchall () columns = [ column [ 1 ] for column in columns ] logging . info ( \"Got all columns from table {} \" . format ( table_name )) return columns def get_all_album_names ( self ) -> List [ str ]: \"\"\" get_all_album_names Get all the album names in the database, returns a list of strings Returns: List[str]: list of strings \"\"\" logging . info ( \"Getting all album names\" ) cursor = self . conn . cursor () # all the albums are a column in the songs table cursor . execute ( \"SELECT album FROM songs;\" ) albums = cursor . fetchall () albums = [ album [ 0 ] for album in albums ] # remove duplicates albums = list ( set ( albums )) logging . info ( \"Got all album names\" ) return albums # ------------------------------------------------------------------------------------------------------------ # ------------------------------------------------------------------------------------------------------------ # INSERT DATA # ------------------------------------------------------------------------------------------------------------ # ------------------------------------------------------------------------------------------------------------ # play table: song_title, song_primary_artist, filesize, start_dt, end_dt def insert_play ( self , song_title : str , song_primary_artist : str , filesize : int , start_dt : str , end_dt : str , song_id : str ) -> int : \"\"\" insert_play Insert a play into the plays table Args: song_title (str): Title of the song song_primary_artist (str): Primary artist of the song filesize (int): Filesize of the song start_dt (str): Date the song started playing end_dt (str): Date the song ended playing Returns: int: id of the inserted play \"\"\" # plays table has auto incrementing id, so we don't need to insert the id logging . info ( \"Inserting play into plays table\" ) cursor = self . conn . cursor () cursor . execute ( \"INSERT INTO plays (song_title, song_primary_artist, filesize, start_dt, end_dt, song_id) VALUES (?, ?, ?, ?, ?, ?);\" , ( song_title , song_primary_artist , filesize , start_dt , end_dt , song_id ) ) self . conn . commit () # get the id of the inserted play play_id = cursor . lastrowid logging . info ( \"Inserted play into plays table\" ) return play_id def insert_playlist ( self , playlist_name : str , playlist_desc : str , created_dt : str ) -> int : \"\"\" insert_playlist Insert a playlist into the playlists table. Only inserts if the playlist does not already exist Args: playlist_name (str): Name of the playlist playlist_desc (str): Description of the playlist created_dt (str): Date the playlist was created Returns: int: id of the inserted playlist \"\"\" # check if the playlist already exists if self . get_playlist_id_by_name ( playlist_name ) is not None : logging . info ( \"Playlist {} already exists\" . format ( playlist_name )) return False logging . info ( \"Inserting playlist {} into playlists table\" . format ( playlist_name )) cursor = self . conn . cursor () cursor . execute ( \"INSERT INTO playlists (playlist_name, playlist_desc, created_dt) VALUES (?, ?, ?);\" , ( playlist_name , playlist_desc , created_dt )) self . conn . commit () # get the id of the inserted playlist playlist_id = cursor . lastrowid logging . info ( \"Inserted playlist {} into playlists table\" . format ( playlist_name )) return playlist_id def insert_playlist_song ( self , playlist_name : str , song_id : str ) -> bool : \"\"\" insert_playlist_song Inserts a song into a playlist. Adds a record to the playlists_songs table Args: playlist_name (str): Name of the playlist song_id (str): ID of the song Returns: bool: True if successful, False if not \"\"\" logging . info ( \"Inserting playlist_song {} into playlists_songs table\" . format ( playlist_name )) playlist_id = self . get_playlist_id_by_name ( playlist_name ) added_dt = datetime . datetime . now () . strftime ( \"%Y-%m- %d %H:%M:%S\" ) cursor = self . conn . cursor () # duplicates are ok cursor . execute ( \"\"\"INSERT INTO playlists_songs (playlist_id, song_id, added_dt) VALUES (?, ?, ?);\"\"\" , ( playlist_id , song_id , added_dt ) ) self . conn . commit () logging . info ( \"Inserted playlist_song {} into playlists_songs table\" . format ( playlist_name )) return True def insert_song ( self , ** kwargs ) -> str : \"\"\" insert_song Insert a song into the songs table, returns song_id of inserted song. Only insert if the song does not already exist. Use the title and filesize. Args: **kwargs: song_table_data (dict) Returns: str: song_id of inserted song \"\"\" logging . info ( \"Inserting song {} into songs table\" . format ( kwargs [ \"title\" ])) cursor = self . conn . cursor () # self.song_table_data = { # \"song_id\": \"N/A\", # string # \"filepath\": \"N/A\", # string # \"main_artist\": \"N/A\", # string # \"filesize\": -1, # in bytes # \"padding\": -1, # in bytes # \"album_artwork_bit_depth\": -1, # in bits # \"album_artwork_colors\": -1, # int # \"album_artwork_height\": -1, # in pixels # \"album_artwork_width\": -1, # in pixels # \"bit_depth\": -1, # in bits # \"bitrate\": -1, # in bits, divide by 1000 to get Kbps # \"channels\": -1, # int # \"duration\": -1, # in seconds # \"sample_rate\": -1, # in KHz # \"album\": \"N/A\", # string # \"barcode\": \"N/A\", # string # \"date_created\": \"N/A\", # in YYYY-MM-DD # \"disc_number\": -1, # int # \"disc_total\": -1, # int # \"isrc\": \"N/A\", # string # \"itunesadvisory\": \"N/A\", # string # \"length\": -1, # int # \"publisher\": \"N/A\", # string # \"rating\": -1, # int # \"title\": \"N/A\", # string # \"track_number\": -1, # int # \"track_total\": -1, # int # \"source\": \"N/A\", # string # } # check if song already exists song_id = self . get_song_by_id ( kwargs [ 'song_id' ]) if song_id : logging . warning ( \"Song {} already exists in songs table\" . format ( kwargs [ \"title\" ])) return song_id cursor . execute ( \"\"\"INSERT INTO songs ( song_id, filepath, main_artist, filesize, padding, album_artwork_bit_depth, album_artwork_colors, album_artwork_height, album_artwork_width, bit_depth, bitrate, channels, duration, sample_rate, album, barcode, date_created, disc_number, disc_total, isrc, itunesadvisory, length, publisher, rating, title, track_number, track_total, source ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? );\"\"\" , ( kwargs [ 'song_id' ], kwargs [ \"filepath\" ], kwargs [ \"main_artist\" ], kwargs [ \"filesize\" ], kwargs [ \"padding\" ], kwargs [ \"album_artwork_bit_depth\" ], kwargs [ \"album_artwork_colors\" ], kwargs [ \"album_artwork_height\" ], kwargs [ \"album_artwork_width\" ], kwargs [ \"bit_depth\" ], kwargs [ \"bitrate\" ], kwargs [ \"channels\" ], kwargs [ \"duration\" ], kwargs [ \"sample_rate\" ], kwargs [ \"album\" ], kwargs [ \"barcode\" ], kwargs [ \"date_created\" ], kwargs [ \"disc_number\" ], kwargs [ \"disc_total\" ], kwargs [ \"isrc\" ], kwargs [ \"itunesadvisory\" ], kwargs [ \"length\" ], kwargs [ \"publisher\" ], kwargs [ \"rating\" ], kwargs [ \"title\" ], kwargs [ \"track_number\" ], kwargs [ \"track_total\" ], kwargs [ \"source\" ], ) ) self . conn . commit () # get the song_id of the inserted song song_name = kwargs [ \"title\" ] logging . info ( f \"Inserted { song_name } with song_id: { song_id } \" ) return kwargs [ 'song_id' ] def insert_album_artist ( self , artist_name , song_id ) -> bool : \"\"\" insert_album_artist Insert an album_artist into the database, returns True if successful, False if not. Only insert if the album_artist does not already exist Args: artist_name (_type_): name of the album artist song_id (_type_): song_id of the song Returns: bool: True if successful, False if not \"\"\" logging . info ( \"Attempting to insert album artist {} iwith song_id {} into album_artists table\" . format ( artist_name , song_id )) cursor = self . conn . cursor () # check if album_artist already exists cursor . execute ( \"\"\"SELECT 1 FROM album_artists WHERE artist_name = ? AND song_id = ?;\"\"\" , ( artist_name , song_id ) ) if cursor . fetchone (): logging . warning ( \"Album artist {} with song_id {} already exists in album_artists table\" . format ( artist_name , song_id )) return False cursor . execute ( \"\"\"INSERT INTO album_artists (artist_name, song_id, dt_added) VALUES (?, ?, ?);\"\"\" , ( artist_name , song_id , datetime . datetime . now ()) ) self . conn . commit () logging . info ( \"Inserted album artist {} with song_id {} into album_artists table\" . format ( artist_name , song_id )) return True def insert_song_artist ( self , artist_name , song_id ) -> bool : \"\"\" insert_song_artist Insert a song_artist into the database, returns True if successful, False if not. Only insert if the song_artist does not already exist Args: artist_name (_type_): name of the song artist song_id (_type_): song_id of the song Returns: bool: True if successful, False if not \"\"\" logging . info ( \"Attempting to insert song artist {} with song_id {} into song_artists table\" . format ( artist_name , song_id )) cursor = self . conn . cursor () # cursor.execute( # \"\"\"INSERT INTO song_artists (artist_name, song_id, dt_added) # SELECT ?, ?, ? WHERE NOT EXISTS ( # SELECT 1 FROM song_artists WHERE artist_name = ? AND song_id = ? # );\"\"\", # (artist_name, song_id, datetime.datetime.now(), artist_name, song_id) # ) # check if song_artist already exists cursor . execute ( \"\"\"SELECT 1 FROM song_artists WHERE artist_name = ? AND song_id = ?;\"\"\" , ( artist_name , song_id ) ) if cursor . fetchone (): logging . warning ( \"Song artist {} with song_id {} already exists in song_artists table\" . format ( artist_name , song_id )) return False cursor . execute ( \"\"\"INSERT INTO song_artists (artist_name, song_id, dt_added) VALUES (?, ?, ?);\"\"\" , ( artist_name , song_id , datetime . datetime . now ()) ) self . conn . commit () logging . info ( \"Inserted song artist {} with song_id {} into song_artists table\" . format ( artist_name , song_id )) return True def insert_composer ( self , composer_name , song_id ) -> bool : \"\"\" insert_composer Insert a composer into the database, returns True if successful, False if not. Only insert if the composer does not already exist Args: composer_name (_type_): name of the composer song_id (_type_): song_id of the song Returns: bool: True if successful, False if not \"\"\" logging . info ( \"Attempting to insert composer {} with song_id {} into composers table\" . format ( composer_name , song_id )) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT 1 FROM composers WHERE composer_name = ? AND song_id = ?;\"\"\" , ( composer_name , song_id ) ) if cursor . fetchone (): logging . warning ( \"Composer {} with song_id {} already exists in composers table\" . format ( composer_name , song_id )) return False cursor . execute ( \"\"\"INSERT INTO composers (composer_name, song_id, dt_added) VALUES (?, ?, ?);\"\"\" , ( composer_name , song_id , datetime . datetime . now ()) ) self . conn . commit () logging . info ( \"Inserted composer {} with song_id {} into composers table\" . format ( composer_name , song_id )) return True def insert_genre ( self , genre_name , song_id ) -> bool : \"\"\"Insert a genre into the database, returns True if successful, False if not. Only insert if the genre does not already exist.\"\"\" logging . warning ( \"Inserting genre {} with song_id {} into genres table\" . format ( genre_name , song_id )) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT 1 FROM genres WHERE genre_name = ? AND song_id = ?;\"\"\" , ( genre_name , song_id ) ) if cursor . fetchone (): logging . info ( \"Genre {} with song_id {} already exists in genres table\" . format ( genre_name , song_id )) return False cursor . execute ( \"\"\"INSERT INTO genres (genre_name, song_id, dt_added) VALUES (?, ?, ?);\"\"\" , ( genre_name , song_id , datetime . datetime . now ()) ) self . conn . commit () logging . info ( \"Inserted genre {} with song_id {} into genres table\" . format ( genre_name , song_id )) return True # IMPORTANT: FUNCTION BELOW! def populate_database ( self , soundfiles_path = config . SOUNDFILES_PATH ): \"\"\" populate_database Populate the database using the data from the soundfiles in the SOUNDFILES_PATH directory \"\"\" # fetch all the files from config.SOUNDFILES_PATH soundfiles = os . listdir ( soundfiles_path ) for file in soundfiles : # get path of file file_path = os . path . join ( soundfiles_path , file ) # get metadata from file parser = songparser . SongMetadata ( filepath = file_path ) # get the song data and insert it into the database song_data = parser . get_song_table_data () song_id = None if song_data is not None : self . insert_song ( ** song_data ) song_id = song_data [ \"song_id\" ] else : logging . error ( f \"Could not get song data for file: { file_path } \" ) continue # get the artist data and insert it into the database album_artist_data = parser . get_album_artist_data () if album_artist_data is not None : for artist in album_artist_data : self . insert_album_artist ( artist , song_id ) song_artist_data = parser . get_song_artist_data () if song_artist_data is not None : for artist in song_artist_data : self . insert_song_artist ( artist , song_id ) composer_data = parser . get_composer_data () if composer_data is not None : for composer in composer_data : self . insert_composer ( composer , song_id ) genre_data = parser . get_genre_data () if genre_data is not None : for genre in genre_data : self . insert_genre ( genre , song_id ) # ------------------------------------------------------------------------------------------------------------ # ------------------------------------------------------------------------------------------------------------ # Backup and Restore # ------------------------------------------------------------------------------------------------------------ # ------------------------------------------------------------------------------------------------------------ def backup_database ( self ) -> bool : \"\"\" backup_database Backup the database to the path specified in config.DATABASE_BACKUP_PATH Returns: bool: True if successful, False if not \"\"\" logging . info ( \"Backing up database\" ) # Zip the database file and name it with the current date # then move it to config.DATABASE_BACKUP_PATH # database is at config.DATABASE_PATH with zipfile . ZipFile ( f \" { config . DATABASE_BACKUP_PATH } / { datetime . datetime . now () . strftime ( '%Y-%m- %d %H-%M-%S' ) } .zip\" , 'w' ) as zip : zip . write ( config . DATABASE_PATH , arcname = \"analytics.db\" ) logging . info ( \"Backed up database\" ) return True __init__ ( debug_path = None ) init Initialize the database handler. Creates the database at the path specified in config.py Parameters: Name Type Description Default debug_path str Path to the database for debug. Defaults to None. None Source code in src\\core\\analyticsdb.py 28 29 30 31 32 33 34 35 36 37 38 def __init__ ( self , debug_path = None ) -> None : \"\"\" __init__ Initialize the database handler. Creates the database at the path specified in config.py Args: debug_path (str, optional): Path to the database for debug. Defaults to None. \"\"\" if debug_path is None : self . conn = sqlite3 . connect ( config . DATABASE_PATH ) else : self . conn = sqlite3 . connect ( debug_path ) backup_database () backup_database Backup the database to the path specified in config.DATABASE_BACKUP_PATH Returns: Name Type Description bool bool True if successful, False if not Source code in src\\core\\analyticsdb.py 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 def backup_database ( self ) -> bool : \"\"\" backup_database Backup the database to the path specified in config.DATABASE_BACKUP_PATH Returns: bool: True if successful, False if not \"\"\" logging . info ( \"Backing up database\" ) # Zip the database file and name it with the current date # then move it to config.DATABASE_BACKUP_PATH # database is at config.DATABASE_PATH with zipfile . ZipFile ( f \" { config . DATABASE_BACKUP_PATH } / { datetime . datetime . now () . strftime ( '%Y-%m- %d %H-%M-%S' ) } .zip\" , 'w' ) as zip : zip . write ( config . DATABASE_PATH , arcname = \"analytics.db\" ) logging . info ( \"Backed up database\" ) return True clear_album_artists_table () clear_album_artists_table Clears the album_artists table in the database. Source code in src\\core\\analyticsdb.py 326 327 328 329 330 331 332 333 334 def clear_album_artists_table ( self ): \"\"\" clear_album_artists_table Clears the album_artists table in the database. \"\"\" logging . info ( \"Clearing album_artists table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM album_artists;\" ) self . conn . commit () logging . info ( \"Cleared album_artists table\" ) clear_all_tables () Clear all the tables, returns True if successful, False if not. Source code in src\\core\\analyticsdb.py 357 358 359 360 361 362 363 364 365 366 367 368 369 def clear_all_tables ( self ) -> bool : \"\"\"Clear all the tables, returns True if successful, False if not.\"\"\" logging . info ( \"Clearing all tables\" ) self . clear_songs_table () self . clear_plays_table () self . clear_playlists_table () self . clear_playlists_songs_table () self . clear_song_artists_table () self . clear_album_artists_table () self . clear_composers_table () self . clear_genres_table () logging . info ( \"Cleared all tables\" ) return True clear_composers_table () clear_composers_table Clears the composers table in the database. Source code in src\\core\\analyticsdb.py 336 337 338 339 340 341 342 343 344 def clear_composers_table ( self ): \"\"\" clear_composers_table Clears the composers table in the database. \"\"\" logging . info ( \"Clearing composers table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM composers;\" ) self . conn . commit () logging . info ( \"Cleared composers table\" ) clear_genres_table () clear_genres_table Clears the genres table in the database. Source code in src\\core\\analyticsdb.py 346 347 348 349 350 351 352 353 354 def clear_genres_table ( self ): \"\"\" clear_genres_table Clears the genres table in the database. \"\"\" logging . info ( \"Clearing genres table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM genres;\" ) self . conn . commit () logging . info ( \"Cleared genres table\" ) clear_playlists_songs_table () clear_playlists_songs_table Clears the playlists_songs table in the database. Source code in src\\core\\analyticsdb.py 306 307 308 309 310 311 312 313 314 def clear_playlists_songs_table ( self ): \"\"\" clear_playlists_songs_table Clears the playlists_songs table in the database. \"\"\" logging . info ( \"Clearing playlists_songs table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM playlists_songs;\" ) self . conn . commit () logging . info ( \"Cleared playlists_songs table\" ) clear_playlists_table () clear_playlists_table Clears the playlists table in the database. Source code in src\\core\\analyticsdb.py 296 297 298 299 300 301 302 303 304 def clear_playlists_table ( self ): \"\"\" clear_playlists_table Clears the playlists table in the database. \"\"\" logging . info ( \"Clearing playlists table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM playlists;\" ) self . conn . commit () logging . info ( \"Cleared playlists table\" ) clear_plays_table () clear_plays_table Clears the plays table in the database. Source code in src\\core\\analyticsdb.py 286 287 288 289 290 291 292 293 294 def clear_plays_table ( self ): \"\"\" clear_plays_table Clears the plays table in the database. \"\"\" logging . info ( \"Clearing plays table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM plays;\" ) self . conn . commit () logging . info ( \"Cleared plays table\" ) clear_song_artists_table () clear_song_artists_table Clears the song_artists table in the database. Source code in src\\core\\analyticsdb.py 316 317 318 319 320 321 322 323 324 def clear_song_artists_table ( self ): \"\"\" clear_song_artists_table Clears the song_artists table in the database. \"\"\" logging . info ( \"Clearing song_artists table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM song_artists;\" ) self . conn . commit () logging . info ( \"Cleared song_artists table\" ) clear_songs_table () clear_songs_table Clears the songs table in the database. Source code in src\\core\\analyticsdb.py 276 277 278 279 280 281 282 283 284 def clear_songs_table ( self ): \"\"\" clear_songs_table Clears the songs table in the database. \"\"\" logging . info ( \"Clearing songs table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM songs;\" ) self . conn . commit () logging . info ( \"Cleared songs table\" ) create_album_artists_table () Create the album_artists table, returns True if successful, False if not. Source code in src\\core\\analyticsdb.py 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 def create_album_artists_table ( self ): \"\"\"Create the album_artists table, returns True if successful, False if not.\"\"\" try : # Album_id is a foreign key to the songs table logging . info ( \"Creating album_artists table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS album_artists ( artist_name TEXT NOT NULL, song_id TEXT NOT NULL, dt_added TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created album_artists table\" ) except : self . raise_table_not_created ( \"album_artists\" , \"unable to create table\" ) create_all_tables () Create all the tables, returns True if successful, False if not. Source code in src\\core\\analyticsdb.py 256 257 258 259 260 261 262 263 264 265 266 267 def create_all_tables ( self ): \"\"\"Create all the tables, returns True if successful, False if not.\"\"\" logging . info ( \"Creating all tables\" ) self . create_songs_table () self . create_plays_table () self . create_playlists_table () self . create_playlists_songs_table () self . create_song_artists_table () self . create_album_artists_table () self . create_composers_table () self . create_genres_table () logging . info ( \"Created all tables\" ) create_composers_table () create_composers_table Creates the composers table in the database. Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 def create_composers_table ( self ) -> bool : \"\"\" create_composers_table Creates the composers table in the database. Returns: bool: True if successful, False if not. \"\"\" try : # Song_id is a foreign key to the songs table logging . info ( \"Creating composers table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS composers ( composer_name TEXT NOT NULL, song_id TEXT NOT NULL, dt_added TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created composers table\" ) except : self . raise_table_not_created ( \"composers\" , \"unable to create table\" ) create_genres_table () create_genres_table Creates the genres table in the database. Source code in src\\core\\analyticsdb.py 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 def create_genres_table ( self ): \"\"\" create_genres_table Creates the genres table in the database. \"\"\" try : # Song_id is a foreign key to the songs table logging . info ( \"Creating genres table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS genres ( genre_name TEXT NOT NULL, song_id TEXT NOT NULL, dt_added TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created genres table\" ) except : self . raise_table_not_created ( \"genres\" , \"unable to create table\" ) create_playlists_songs_table () create_playlists_songs_table Creates the playlists_songs table in the database. Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 def create_playlists_songs_table ( self ) -> bool : \"\"\" create_playlists_songs_table Creates the playlists_songs table in the database. Returns: bool: True if successful, False if not. \"\"\" try : # Song_id is a foreign key to the songs table logging . info ( \"Creating playlists_songs table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS playlists_songs ( playlist_id INTEGER NOT NULL, song_id TEXT NOT NULL, added_dt TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created playlists_songs table\" ) except : self . raise_table_not_created ( \"playlists_songs\" , \"unable to create table\" ) create_playlists_table () create_playlists_table Creates the playlists table in the database. Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 def create_playlists_table ( self ) -> bool : \"\"\" create_playlists_table Creates the playlists table in the database. Returns: bool: True if successful, False if not. \"\"\" try : logging . info ( \"Creating playlists table\" ) cursor = self . conn . cursor () # description is a text that is cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS playlists ( playlist_id INTEGER PRIMARY KEY AUTOINCREMENT, playlist_name TEXT NOT NULL, playlist_desc TEXT, created_dt TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created playlists table\" ) except : self . raise_table_not_created ( \"playlists\" , \"unable to create table\" ) create_plays_table () create_plays_table Creates the plays table in the database. Source code in src\\core\\analyticsdb.py 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 def create_plays_table ( self ): \"\"\" create_plays_table Creates the plays table in the database. \"\"\" try : logging . info ( \"Creating plays table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS plays ( play_id INTEGER PRIMARY KEY AUTOINCREMENT, song_title TEXT NOT NULL, song_primary_artist TEXT NOT NULL, filesize BIGINT, start_dt TEXT NOT NULL, end_dt TEXT NOT NULL, song_id TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created plays table\" ) except : self . raise_table_not_created ( \"plays\" , \"unable to create table\" ) create_song_artists_table () create_song_artists_table Creates the song_artists table in the database. Source code in src\\core\\analyticsdb.py 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 def create_song_artists_table ( self ): \"\"\" create_song_artists_table Creates the song_artists table in the database. \"\"\" try : # Song_id is a foreign key to the songs table logging . info ( \"Creating song_artists table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS song_artists ( artist_name TEXT NOT NULL, song_id TEXT NOT NULL, dt_added TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created song_artists table\" ) except : self . raise_table_not_created ( \"song_artists\" , \"unable to create table\" ) create_songs_table () create_songs_table Creates the songs table in the database. Source code in src\\core\\analyticsdb.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 def create_songs_table ( self ): \"\"\" create_songs_table Creates the songs table in the database. \"\"\" try : logging . info ( \"Creating songs table\" ) cursor = self . conn . cursor () # This is going to be a LOT of data, make a table with the following: # Create the table cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS songs ( song_id TEXT PRIMARY KEY, filepath TEXT, filesize BIGINT, padding INTEGER, album_artwork_bit_depth INTEGER, album_artwork_colors INTEGER, album_artwork_height INTEGER, album_artwork_width INTEGER, bit_depth INTEGER, bitrate INTEGER, channels INTEGER, duration INTEGER, sample_rate INTEGER, album TEXT, barcode TEXT, date_created TEXT, disc_number INTEGER, disc_total INTEGER, isrc TEXT, itunesadvisory TEXT, length INTEGER, publisher TEXT, rating INTEGER, title TEXT, track_number INTEGER, track_total INTEGER, source TEXT, main_artist TEXT )\"\"\" ) self . conn . commit () logging . info ( \"Created songs table\" ) except : self . raise_table_not_created ( \"song\" , \"unable to create table\" ) delete_album_artist_by_artist_album_id ( artist_id , album_id ) Delete an album from an artist by its ID. Parameters: Name Type Description Default artist_id int ID of the artist to delete the album from. required album_id int ID of the album to delete. required Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 def delete_album_artist_by_artist_album_id ( self , artist_id : int , album_id : int ) -> bool : \"\"\"Delete an album from an artist by its ID. Args: artist_id (int): ID of the artist to delete the album from. album_id (int): ID of the album to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting album from artist by ID: { album_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM albums_artists WHERE artist_id = ? AND album_id = ?;\"\"\" , ( artist_id , album_id ) ) self . conn . commit () logging . info ( f \"Deleted album from artist by ID: { album_id } \" ) return True delete_composer_by_name_song_id ( composer_name , song_id ) Delete a composer from a song by its name. Parameters: Name Type Description Default composer_name str Name of the composer to delete the song from. required song_id str ID of the song to delete. required Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 def delete_composer_by_name_song_id ( self , composer_name : str , song_id : str ) -> bool : \"\"\"Delete a composer from a song by its name. Args: composer_name (str): Name of the composer to delete the song from. song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting composer from song by name: { composer_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM songs_composers WHERE composer_id = (SELECT composer_id FROM composers WHERE composer_name = ?) AND song_id = ?;\"\"\" , ( composer_name , song_id ) ) self . conn . commit () logging . info ( f \"Deleted composer from song by name: { composer_name } \" ) return True delete_database () Delete the database, returns True if successful, False if not. Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 371 372 373 374 375 376 377 378 379 380 def delete_database ( self ) -> bool : \"\"\"Delete the database, returns True if successful, False if not. Returns: bool: True if successful, False if not. \"\"\" logging . info ( \"Deleting database\" ) os . remove ( config . DATABASE_PATH ) logging . info ( \"Deleted database\" ) return True delete_genre_by_name_song_id ( genre_name , song_id ) Delete a genre from a song by its name. Parameters: Name Type Description Default genre_name str Name of the genre to delete the song from. required song_id str ID of the song to delete. required Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 def delete_genre_by_name_song_id ( self , genre_name : str , song_id : str ) -> bool : \"\"\"Delete a genre from a song by its name. Args: genre_name (str): Name of the genre to delete the song from. song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting genre from song by name: { genre_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM songs_genres WHERE genre_id = (SELECT genre_id FROM genres WHERE genre_name = ?) AND song_id = ?;\"\"\" , ( genre_name , song_id ) ) self . conn . commit () logging . info ( f \"Deleted genre from song by name: { genre_name } \" ) return True delete_playlist_by_id ( playlist_id ) Delete a playlist from the database by its ID. Parameters: Name Type Description Default playlist_id int ID of the playlist to delete. required Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 def delete_playlist_by_id ( self , playlist_id : int ) -> bool : \"\"\"Delete a playlist from the database by its ID. Args: playlist_id (int): ID of the playlist to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting playlist by ID: { playlist_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM playlists WHERE playlist_id = ?;\"\"\" , ( playlist_id ,) ) self . conn . commit () logging . info ( f \"Deleted playlist by ID: { playlist_id } \" ) return True delete_playlist_by_name ( playlist_name ) Delete a playlist from the database by its name. Parameters: Name Type Description Default playlist_name str Name of the playlist to delete. required Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 def delete_playlist_by_name ( self , playlist_name : str ) -> bool : \"\"\"Delete a playlist from the database by its name. Args: playlist_name (str): Name of the playlist to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting playlist by name: { playlist_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM playlists WHERE playlist_name = ?;\"\"\" , ( playlist_name ,) ) self . conn . commit () logging . info ( f \"Deleted playlist by name: { playlist_name } \" ) return True delete_playlist_song_by_id ( playlist_id , song_id ) Delete a song from a playlist by its ID. Parameters: Name Type Description Default playlist_id int ID of the playlist to delete the song from. required song_id str ID of the song to delete. required Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 def delete_playlist_song_by_id ( self , playlist_id : int , song_id : str ) -> bool : \"\"\"Delete a song from a playlist by its ID. Args: playlist_id (int): ID of the playlist to delete the song from. song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting song from playlist by ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM playlists_songs WHERE playlist_id = ? AND song_id = ?;\"\"\" , ( playlist_id , song_id ) ) self . conn . commit () logging . info ( f \"Deleted song from playlist by ID: { song_id } \" ) return True delete_playlist_song_by_name ( playlist_name , song_name ) Delete a song from a playlist by its name. Parameters: Name Type Description Default playlist_name str Name of the playlist to delete the song from. required song_name str Name of the song to delete. required Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 def delete_playlist_song_by_name ( self , playlist_name : str , song_name : str ) -> bool : \"\"\"Delete a song from a playlist by its name. Args: playlist_name (str): Name of the playlist to delete the song from. song_name (str): Name of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting song from playlist by name: { song_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM playlists_songs WHERE playlist_id = (SELECT playlist_id FROM playlists WHERE playlist_name = ?) AND song_id = (SELECT song_id FROM songs WHERE song_name = ?);\"\"\" , ( playlist_name , song_name ) ) self . conn . commit () logging . info ( f \"Deleted song from playlist by name: { song_name } \" ) return True delete_playlist_song_by_playlist_id_song_id ( playlist_id , song_id ) Delete a song from a playlist by its ID. Parameters: Name Type Description Default playlist_id int ID of the playlist to delete the song from. required song_id str ID of the song to delete. required Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 def delete_playlist_song_by_playlist_id_song_id ( self , playlist_id : int , song_id : str ) -> bool : \"\"\"Delete a song from a playlist by its ID. Args: playlist_id (int): ID of the playlist to delete the song from. song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting song from playlist by ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM playlists_songs WHERE playlist_id = ? AND song_id = ?;\"\"\" , ( playlist_id , song_id ) ) self . conn . commit () logging . info ( f \"Deleted song from playlist by ID: { song_id } \" ) return True delete_song_artist_by_artist_song_id ( artist_id , song_id ) Delete a song from a playlist by its ID. Parameters: Name Type Description Default artist_id int ID of the artist to delete the song from. required song_id str ID of the song to delete. required Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 def delete_song_artist_by_artist_song_id ( self , artist_id : int , song_id : str ) -> bool : \"\"\"Delete a song from a playlist by its ID. Args: artist_id (int): ID of the artist to delete the song from. song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting song from artist by ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM songs_artists WHERE artist_id = ? AND song_id = ?;\"\"\" , ( artist_id , song_id ) ) self . conn . commit () logging . info ( f \"Deleted song from artist by ID: { song_id } \" ) return True delete_song_by_id ( song_id ) Delete a song from the database by its ID. Parameters: Name Type Description Default song_id str ID of the song to delete. required Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 def delete_song_by_id ( self , song_id : str ) -> bool : \"\"\"Delete a song from the database by its ID. Args: song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting song by ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM songs WHERE song_id = ?;\"\"\" , ( song_id ,) ) self . conn . commit () logging . info ( f \"Deleted song by ID: { song_id } \" ) return True get_album_artists_of_song ( song_id ) get_album_artists_of_song Get all the artists of a song, returns a list of names of Artists. Parameters: Name Type Description Default song_id str ID of song required Returns: Type Description List [ str ] List[str]: list of names of artists Source code in src\\core\\analyticsdb.py 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 def get_album_artists_of_song ( self , song_id : str ) -> List [ str ]: \"\"\" get_album_artists_of_song Get all the artists of a song, returns a list of names of Artists. Args: song_id (str): ID of song Returns: List[str]: list of names of artists \"\"\" logging . info ( f \"Getting album artists by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM album_artists WHERE song_id = ?;\"\"\" , ( song_id ,) ) artists = cursor . fetchall () album_artists = [] for artist in artists : album_artists . append ( artist [ 0 ]) logging . info ( f \"Got album artists by song ID: { song_id } \" ) return album_artists get_all_album_artists ( no_duplicates = True ) get_all_album_artists Get all the album artists in the database, returns a list of strings Parameters: Name Type Description Default no_duplicates bool remove duplicates. Defaults to True. True Returns: Type Description List [ str ] List[str]: list of strings Source code in src\\core\\analyticsdb.py 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 def get_all_album_artists ( self , no_duplicates = True ) -> List [ str ]: \"\"\" get_all_album_artists Get all the album artists in the database, returns a list of strings Args: no_duplicates (bool, optional): remove duplicates. Defaults to True. Returns: List[str]: list of strings \"\"\" # artists can be duplicated, so we need to remove duplicates from album_artists logging . info ( \"Getting all album artists\" ) cursor = self . conn . cursor () album_artists = [] if no_duplicates : cursor . execute ( \"SELECT DISTINCT artist_name FROM album_artists;\" ) else : cursor . execute ( \"SELECT artist_name FROM album_artists;\" ) album_artists = cursor . fetchall () logging . info ( \"Got all album artists\" ) album_artists = [ artist [ 0 ] for artist in album_artists ] return album_artists get_all_album_names () get_all_album_names Get all the album names in the database, returns a list of strings Returns: Type Description List [ str ] List[str]: list of strings Source code in src\\core\\analyticsdb.py 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 def get_all_album_names ( self ) -> List [ str ]: \"\"\" get_all_album_names Get all the album names in the database, returns a list of strings Returns: List[str]: list of strings \"\"\" logging . info ( \"Getting all album names\" ) cursor = self . conn . cursor () # all the albums are a column in the songs table cursor . execute ( \"SELECT album FROM songs;\" ) albums = cursor . fetchall () albums = [ album [ 0 ] for album in albums ] # remove duplicates albums = list ( set ( albums )) logging . info ( \"Got all album names\" ) return albums get_all_columns_from_table ( table_name ) get_all_columns_from_table Get all the columns from a table, returns a list of strings Parameters: Name Type Description Default table_name str Name of the table required Returns: Type Description List [ str ] List[str]: list of strings Source code in src\\core\\analyticsdb.py 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 def get_all_columns_from_table ( self , table_name : str ) -> List [ str ]: \"\"\" get_all_columns_from_table Get all the columns from a table, returns a list of strings Args: table_name (str): Name of the table Returns: List[str]: list of strings \"\"\" logging . info ( \"Getting all columns from table {} \" . format ( table_name )) cursor = self . conn . cursor () cursor . execute ( \"PRAGMA table_info( {} );\" . format ( table_name )) columns = cursor . fetchall () columns = [ column [ 1 ] for column in columns ] logging . info ( \"Got all columns from table {} \" . format ( table_name )) return columns get_all_composers ( no_duplicates = True ) get_all_composers Get all the composers in the database, returns a list of strings Parameters: Name Type Description Default no_duplicates bool remove duplicates. Defaults to True. True Returns: Type Description List [ str ] List[str]: list of strings Source code in src\\core\\analyticsdb.py 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 def get_all_composers ( self , no_duplicates = True ) -> List [ str ]: \"\"\" get_all_composers Get all the composers in the database, returns a list of strings Args: no_duplicates (bool, optional): remove duplicates. Defaults to True. Returns: List[str]: list of strings \"\"\" # composers can be duplicated, so we need to remove duplicates from composers logging . info ( \"Getting all composers\" ) cursor = self . conn . cursor () if no_duplicates : cursor . execute ( \"SELECT DISTINCT composer_name FROM composers;\" ) else : cursor . execute ( \"SELECT composer_name FROM composers;\" ) composers = cursor . fetchall () logging . info ( \"Got all composers\" ) composers = [ composer [ 0 ] for composer in composers ] return composers get_all_genres ( no_duplicates = True ) get_all_genres Get all the genres in the database, returns a list of strings Parameters: Name Type Description Default no_duplicates bool remove duplicates. Defaults to True. True Returns: Type Description List [ str ] List[str]: list of strings Source code in src\\core\\analyticsdb.py 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 def get_all_genres ( self , no_duplicates = True ) -> List [ str ]: \"\"\" get_all_genres Get all the genres in the database, returns a list of strings Args: no_duplicates (bool, optional): remove duplicates. Defaults to True. Returns: List[str]: list of strings \"\"\" # genres can be duplicated, so we need to remove duplicates from genres logging . info ( \"Getting all genres\" ) cursor = self . conn . cursor () if no_duplicates : cursor . execute ( \"SELECT DISTINCT genre_name FROM genres;\" ) else : cursor . execute ( \"SELECT genre_name FROM genres;\" ) genres = cursor . fetchall () logging . info ( \"Got all genres\" ) genres = [ genre [ 0 ] for genre in genres ] return genres get_all_playlist_names () get_all_playlist_names Get all the playlist names in the database, returns a list of strings Returns: Type Description List [ str ] List[str]: list of strings Source code in src\\core\\analyticsdb.py 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 def get_all_playlist_names ( self ) -> List [ str ]: \"\"\" get_all_playlist_names Get all the playlist names in the database, returns a list of strings Returns: List[str]: list of strings \"\"\" logging . info ( \"Getting all playlist names\" ) cursor = self . conn . cursor () cursor . execute ( \"SELECT playlist_name FROM playlists;\" ) playlist_names = cursor . fetchall () # remove the tuple from each playlist name playlist_names = [ playlist_name [ 0 ] for playlist_name in playlist_names ] logging . info ( \"Got all playlist names\" ) return playlist_names get_all_playlist_songs () get_all_playlist_songs Get all the playlist songs in the database, returns a list of dictionaries Returns: Type Description List [ dict ] List[dict]: list of dictionaries [song_name, file_size, id] Source code in src\\core\\analyticsdb.py 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 def get_all_playlist_songs ( self ) -> List [ dict ]: \"\"\" get_all_playlist_songs Get all the playlist songs in the database, returns a list of dictionaries Returns: List[dict]: list of dictionaries [song_name, file_size, id] \"\"\" playlist_names = self . get_all_playlist_names () playlist_songs = {} for playlist_name in playlist_names : # we only want the song_name, file_size, and id songs = self . get_songs_in_playlist ( playlist_name ) playlist_values = [] for song_data in songs : song_values = { \"song_name\" : song_data [ \"title\" ], \"file_size\" : song_data [ \"filesize\" ], } song_id = self . get_song_id_by_title_filesize ( song_values [ \"song_name\" ], song_values [ \"file_size\" ]) song_values [ \"id\" ] = song_id playlist_values . append ( song_values ) playlist_songs [ playlist_name ] = playlist_values return playlist_songs get_all_plays () get_all_plays Get all the plays in the database, returns a list of the plays Returns: Type Description List [ dict ] List[dict]: list of dictionaries Source code in src\\core\\analyticsdb.py 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 def get_all_plays ( self ) -> List [ dict ]: \"\"\" get_all_plays Get all the plays in the database, returns a list of the plays Returns: List[dict]: list of dictionaries \"\"\" logging . info ( \"Getting all plays\" ) cursor = self . conn . cursor () cursor . execute ( \"SELECT * FROM plays;\" ) plays = cursor . fetchall () logging . info ( \"Got all plays\" ) return plays get_all_song_artists ( no_duplicates = True ) get_all_song_artists Get all the song artists in the database, returns a list of strings Returns: Type Description List [ str ] List[str]: list of strings Source code in src\\core\\analyticsdb.py 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 def get_all_song_artists ( self , no_duplicates = True ) -> List [ str ]: \"\"\" get_all_song_artists Get all the song artists in the database, returns a list of strings Returns: List[str]: list of strings \"\"\" # artists can be duplicated, so we need to remove duplicates from song_artists logging . info ( \"Getting all song artists\" ) cursor = self . conn . cursor () if no_duplicates : cursor . execute ( \"SELECT DISTINCT artist_name FROM song_artists;\" ) else : cursor . execute ( \"SELECT artist_name FROM song_artists;\" ) song_artists = cursor . fetchall () logging . info ( \"Got all song artists\" ) song_artists = [ artist [ 0 ] for artist in song_artists ] return song_artists get_all_songs () get_all_songs Get all the songs in the database, returns a list of Song objects Returns: Type Description List [ dict ] List[dict]: list of dictionaries Source code in src\\core\\analyticsdb.py 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 def get_all_songs ( self ) -> List [ dict ]: \"\"\" get_all_songs Get all the songs in the database, returns a list of Song objects Returns: List[dict]: list of dictionaries \"\"\" logging . info ( \"Getting all songs\" ) cursor = self . conn . cursor () cursor . execute ( \"SELECT * FROM songs;\" ) songs = cursor . fetchall () songs_return = [] for song in songs : song_table_data = { \"song_id\" : song [ 0 ], \"filepath\" : song [ 1 ], \"filesize\" : song [ 2 ], \"padding\" : song [ 3 ], \"album_artwork_bit_depth\" : song [ 4 ], \"album_artwork_colors\" : song [ 5 ], \"album_artwork_height\" : song [ 6 ], \"album_artwork_width\" : song [ 7 ], \"bit_depth\" : song [ 8 ], \"bitrate\" : song [ 9 ], \"channels\" : song [ 10 ], \"duration\" : song [ 11 ], \"sample_rate\" : song [ 12 ], \"album\" : song [ 13 ], \"barcode\" : song [ 14 ], \"date_created\" : song [ 15 ], \"disc_number\" : song [ 16 ], \"disc_total\" : song [ 17 ], \"isrc\" : song [ 18 ], \"itunesadvisory\" : song [ 19 ], \"length\" : song [ 20 ], \"publisher\" : song [ 21 ], \"rating\" : song [ 22 ], \"title\" : song [ 23 ], \"track_number\" : song [ 24 ], \"track_total\" : song [ 25 ], \"source\" : song [ 26 ], \"main_artist\" : song [ 27 ], } songs_return . append ( song_table_data ) return songs_return get_all_songs_in_genre ( genre_name ) get_all_songs_in_genre Get all the songs in a genre, returns a list of dictionaries Parameters: Name Type Description Default genre_name str Name of the genre required Returns: Type Description List [ dict ] List[dict]: list of dictionaries Source code in src\\core\\analyticsdb.py 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 def get_all_songs_in_genre ( self , genre_name : str ) -> List [ dict ]: \"\"\" get_all_songs_in_genre Get all the songs in a genre, returns a list of dictionaries Args: genre_name (str): Name of the genre Returns: List[dict]: list of dictionaries \"\"\" logging . info ( \"Getting all songs in genre {} \" . format ( genre_name )) cursor = self . conn . cursor () # get all song_id that matches the given genre_name in the genres table cursor . execute ( \"SELECT song_id FROM genres WHERE genre_name = ?;\" , ( genre_name ,)) song_ids = cursor . fetchall () song_ids = [ song_id [ 0 ] for song_id in song_ids ] # get all the songs that match the song_ids songs = [] for song_id in song_ids : song_data = self . get_song_by_id ( song_id ) songs . append ( song_data ) logging . info ( \"Got all songs in genre {} \" . format ( genre_name )) return songs get_all_tables () get_all_tables Get all the tables in the database, returns a list of table names. Returns: Type Description List [ str ] List[str]: list of table names Source code in src\\core\\analyticsdb.py 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 def get_all_tables ( self ) -> List [ str ]: \"\"\" get_all_tables Get all the tables in the database, returns a list of table names. Returns: List[str]: list of table names \"\"\" logging . info ( \"Getting all tables\" ) cursor = self . conn . cursor () cursor . execute ( \"SELECT name FROM sqlite_master WHERE type='table';\" ) tables = cursor . fetchall () logging . info ( \"Got all tables\" ) return tables get_composers_of_song ( song_id ) get_composers_of_song Get all the composers of a song, returns a list of names of composers. Parameters: Name Type Description Default song_id str ID of song required Returns: Type Description List [ str ] List[str]: list of names of composers Source code in src\\core\\analyticsdb.py 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 def get_composers_of_song ( self , song_id : str ) -> List [ str ]: \"\"\" get_composers_of_song Get all the composers of a song, returns a list of names of composers. Args: song_id (str): ID of song Returns: List[str]: list of names of composers \"\"\" logging . info ( f \"Getting composers by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM composers WHERE song_id = ?;\"\"\" , ( song_id ,) ) composers = cursor . fetchall () song_composers = [] for composer in composers : song_composers . append ( composer [ 0 ]) logging . info ( f \"Got composers by song ID: { song_id } \" ) return song_composers get_genres_of_song ( song_id ) get_genres_of_song Get all the genres of a song, returns a list of names of genres. Parameters: Name Type Description Default song_id str ID of song required Returns: Type Description List [ str ] List[str]: list of names of genres Source code in src\\core\\analyticsdb.py 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 def get_genres_of_song ( self , song_id : str ) -> List [ str ]: \"\"\" get_genres_of_song Get all the genres of a song, returns a list of names of genres. Args: song_id (str): ID of song Returns: List[str]: list of names of genres \"\"\" logging . info ( f \"Getting song genres by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM genres WHERE song_id = ?;\"\"\" , ( song_id ,) ) genres = cursor . fetchall () song_genres = [] for genre in genres : song_genres . append ( genre [ 0 ]) logging . info ( f \"Got song genres by song ID: { song_id } \" ) return song_genres get_play_by_id ( play_id ) get_play_by_id Get play by ID. Parameters: Name Type Description Default play_id int ID of play required Returns: Name Type Description dict dict play object Source code in src\\core\\analyticsdb.py 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 def get_play_by_id ( self , play_id : int ) -> dict : \"\"\" get_play_by_id Get play by ID. Args: play_id (int): ID of play Returns: dict: play object \"\"\" logging . info ( f \"Getting play by ID: { play_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM plays WHERE play_id = ?;\"\"\" , ( play_id ,) ) play = cursor . fetchone () logging . info ( f \"Got play by ID: { play_id } \" ) play_data = { \"play_id\" : play [ 0 ], \"song_title\" : play [ 1 ], \"song_primary_artist\" : play [ 2 ], \"filesize\" : play [ 3 ], \"start_dt\" : play [ 4 ], \"end_dt\" : play [ 5 ], \"song_id\" : play [ 6 ] } return play_data get_play_information_from_song_id ( song_id ) get_play_information_from_song_id Get play information from song ID. This is the song_title, song_primary_artist, and filesize Parameters: Name Type Description Default song_id str ID of song required Returns: Type Description Dict [ str , str ] Dict[str, str]: Dictionary of song_title, song_primary_artist, filesize, and song_id Source code in src\\core\\analyticsdb.py 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 def get_play_information_from_song_id ( self , song_id : str ) -> Dict [ str , str ]: \"\"\" get_play_information_from_song_id Get play information from song ID. This is the song_title, song_primary_artist, and filesize Args: song_id (str): ID of song Returns: Dict[str, str]: Dictionary of song_title, song_primary_artist, filesize, and song_id \"\"\" logging . info ( f \"Getting play information for song ID: { song_id } \" ) song_raw = self . get_song_by_id ( song_id ) song_values = { \"song_title\" : song_raw [ \"title\" ], \"song_primary_artist\" : song_raw [ \"main_artist\" ], \"filesize\" : song_raw [ \"filesize\" ], \"song_id\" : song_raw [ 'song_id' ] } logging . info ( f \"Got play information for song ID: { song_id } \" ) return song_values get_playlist_by_id ( playlist_id ) get_playlist_by_id Get playlist by ID. Parameters: Name Type Description Default playlist_id int ID of playlist required Returns: Name Type Description dict dict Dictionary containing playlist data. {playlist_id, playlist_name, playlist_desc, created_dt} Source code in src\\core\\analyticsdb.py 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 def get_playlist_by_id ( self , playlist_id : int ) -> dict : \"\"\" get_playlist_by_id Get playlist by ID. Args: playlist_id (int): ID of playlist Returns: dict: Dictionary containing playlist data. {playlist_id, playlist_name, playlist_desc, created_dt} \"\"\" logging . info ( f \"Getting playlist by ID: { playlist_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM playlists WHERE playlist_id = ?;\"\"\" , ( playlist_id ,) ) playlist = cursor . fetchone () logging . info ( f \"Got playlist by ID: { playlist_id } \" ) playlist_data = {} playlist_data [ \"playlist_id\" ] = playlist [ 0 ] playlist_data [ \"playlist_name\" ] = playlist [ 1 ] playlist_data [ \"playlist_desc\" ] = playlist [ 2 ] playlist_data [ \"created_dt\" ] = playlist [ 3 ] return playlist_data get_playlist_id_by_name ( playlist_name ) get_playlist_id_by_name Get ID of playlist by name. Parameters: Name Type Description Default playlist_name str Name of playlist required Returns: Name Type Description int int ID of playlist Source code in src\\core\\analyticsdb.py 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 def get_playlist_id_by_name ( self , playlist_name : str ) -> int : \"\"\" get_playlist_id_by_name Get ID of playlist by name. Args: playlist_name (str): Name of playlist Returns: int: ID of playlist \"\"\" logging . info ( f \"Getting playlist by name: { playlist_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM playlists WHERE playlist_name = ?;\"\"\" , ( playlist_name ,) ) playlist = cursor . fetchone () if playlist is None : return None logging . info ( f \"Got playlist by name: { playlist_name } \" ) return playlist [ 0 ] get_song_album_artists ( song_id ) get_song_album_artists Get all the album artists of a song, returns a list of names. Parameters: Name Type Description Default song_id str ID of song required Returns: Type Description List [ str ] List[str]: list of names of album artists Source code in src\\core\\analyticsdb.py 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 def get_song_album_artists ( self , song_id : str ) -> List [ str ]: \"\"\" get_song_album_artists Get all the album artists of a song, returns a list of names. Args: song_id (str): ID of song Returns: List[str]: list of names of album artists \"\"\" logging . info ( f \"Getting song album artists by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM album_artists WHERE song_id = ?;\"\"\" , ( song_id ,) ) album_artists = cursor . fetchall () logging . info ( f \"Got song album artists by song ID: { song_id } \" ) return album_artists get_song_artists ( song_id ) get_song_artists Get all the artists of a song, returns a list of names of Artists. Parameters: Name Type Description Default song_id str ID of song required Returns: Type Description List [ str ] List[str]: list of names of artists Source code in src\\core\\analyticsdb.py 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 def get_song_artists ( self , song_id : str ) -> List [ str ]: \"\"\" get_song_artists Get all the artists of a song, returns a list of names of Artists. Args: song_id (str): ID of song Returns: List[str]: list of names of artists \"\"\" logging . info ( f \"Getting song artists by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM artists WHERE song_id = ?;\"\"\" , ( song_id ,) ) artists = cursor . fetchall () logging . info ( f \"Got song artists by song ID: { song_id } \" ) return artists get_song_artists_of_song ( song_id ) get_song_artists_of_song Get all the artists of a song, returns a list of names of Artists. Parameters: Name Type Description Default song_id str ID of song required Returns: Type Description List [ str ] List[str]: list of names of artists Source code in src\\core\\analyticsdb.py 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 def get_song_artists_of_song ( self , song_id : str ) -> List [ str ]: \"\"\" get_song_artists_of_song Get all the artists of a song, returns a list of names of Artists. Args: song_id (str): ID of song Returns: List[str]: list of names of artists \"\"\" logging . info ( f \"Getting song artists by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM song_artists WHERE song_id = ?;\"\"\" , ( song_id ,) ) artists = cursor . fetchall () song_artists = [] for artist in artists : song_artists . append ( artist [ 0 ]) logging . info ( f \"Got song artists by song ID: { song_id } \" ) return song_artists get_song_by_id ( song_id ) get_song_by_id Searches the song table for a song with the given ID. Parameters: Name Type Description Default song_id str ID of the song to search for. required Returns: Type Description List [ dict ] List[dict]: List of dictionaries containing the song data. Source code in src\\core\\analyticsdb.py 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 def get_song_by_id ( self , song_id : str ) -> List [ dict ]: \"\"\" get_song_by_id Searches the song table for a song with the given ID. Args: song_id (str): ID of the song to search for. Returns: List[dict]: List of dictionaries containing the song data. \"\"\" logging . info ( f \"Getting song by ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM songs WHERE song_id = ?;\"\"\" , ( song_id ,) ) song = cursor . fetchone () # copy the dict variable config.song_table_data song_table_data = config . song_table_data . copy () if song is None : return None song_table_data [ 'song_id' ] = song [ 0 ] song_table_data [ \"filepath\" ] = song [ 1 ] song_table_data [ \"filesize\" ] = song [ 2 ] song_table_data [ \"padding\" ] = song [ 3 ] song_table_data [ \"album_artwork_bit_depth\" ] = song [ 4 ] song_table_data [ \"album_artwork_colors\" ] = song [ 5 ] song_table_data [ \"album_artwork_height\" ] = song [ 6 ] song_table_data [ \"album_artwork_width\" ] = song [ 7 ] song_table_data [ \"bit_depth\" ] = song [ 8 ] song_table_data [ \"bitrate\" ] = song [ 9 ] song_table_data [ \"channels\" ] = song [ 10 ] song_table_data [ \"duration\" ] = song [ 11 ] song_table_data [ \"sample_rate\" ] = song [ 12 ] song_table_data [ \"album\" ] = song [ 13 ] song_table_data [ \"barcode\" ] = song [ 14 ] song_table_data [ \"date_created\" ] = song [ 15 ] song_table_data [ \"disc_number\" ] = song [ 16 ] song_table_data [ \"disc_total\" ] = song [ 17 ] song_table_data [ \"isrc\" ] = song [ 18 ] song_table_data [ \"itunesadvisory\" ] = song [ 19 ] song_table_data [ \"length\" ] = song [ 20 ] song_table_data [ \"publisher\" ] = song [ 21 ] song_table_data [ \"rating\" ] = song [ 22 ] song_table_data [ \"title\" ] = song [ 23 ] song_table_data [ \"track_number\" ] = song [ 24 ] song_table_data [ \"track_total\" ] = song [ 25 ] song_table_data [ \"source\" ] = song [ 26 ] song_table_data [ \"main_artist\" ] = song [ 27 ] return song_table_data get_song_composers ( song_id ) get_song_composers Get all the composers of a song, returns a list of names. Parameters: Name Type Description Default song_id str ID of song required Returns: Type Description List [ str ] List[str]: list of names of composers Source code in src\\core\\analyticsdb.py 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 def get_song_composers ( self , song_id : str ) -> List [ str ]: \"\"\" get_song_composers Get all the composers of a song, returns a list of names. Args: song_id (str): ID of song Returns: List[str]: list of names of composers \"\"\" logging . info ( f \"Getting song composers by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM composers WHERE song_id = ?;\"\"\" , ( song_id ,) ) composers = cursor . fetchall () logging . info ( f \"Got song composers by song ID: { song_id } \" ) return composers get_song_genres ( song_id ) get_song_genres Get all the genres of a song, returns a list of names of genres. Parameters: Name Type Description Default song_id str ID of song required Returns: Type Description List [ str ] List[str]: list of names of genres Source code in src\\core\\analyticsdb.py 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 def get_song_genres ( self , song_id : str ) -> List [ str ]: \"\"\" get_song_genres Get all the genres of a song, returns a list of names of genres. Args: song_id (str): ID of song Returns: List[str]: list of names of genres \"\"\" logging . info ( f \"Getting song genres by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM genres WHERE song_id = ?;\"\"\" , ( song_id ,) ) genres = cursor . fetchall () logging . info ( f \"Got song genres by song ID: { song_id } \" ) return genres get_song_id_by_title_filesize ( title , filesize ) get_song_id_by_title_filesize Searches the database to find the song ID by title and filesize. You want to use filesize because they're basically gurenteed to be unique. Parameters: Name Type Description Default title str Title of Song required filesize int Filesize of song (get these from the song object) required Returns: Name Type Description int int song_id of the song Source code in src\\core\\analyticsdb.py 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 def get_song_id_by_title_filesize ( self , title : str , filesize : int ) -> int : \"\"\" get_song_id_by_title_filesize Searches the database to find the song ID by title and filesize. You want to use filesize because they're basically gurenteed to be unique. Args: title (str): Title of Song filesize (int): Filesize of song (get these from the song object) Returns: int: song_id of the song \"\"\" logging . info ( f \"Getting song by title and filesize: { title } , { filesize } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM songs WHERE title = ? AND filesize = ?;\"\"\" , ( title , filesize ) ) # return the id of the song song = cursor . fetchone () if song is None : return None logging . info ( f \"Got song by title and filesize: { title } , { filesize } \" ) return song [ 0 ] get_songs_in_album ( album_name ) get_songs_in_album Get all the songs in an album, returns a list of Song objects. Parameters: Name Type Description Default album_name str name of album required Returns: Type Description List [ dict ] List[dict]: list of Song objects Source code in src\\core\\analyticsdb.py 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 def get_songs_in_album ( self , album_name : str ) -> List [ dict ]: \"\"\" get_songs_in_album Get all the songs in an album, returns a list of Song objects. Args: album_name (str): name of album Returns: List[dict]: list of Song objects \"\"\" logging . info ( f \"Getting songs in album: { album_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM songs WHERE album = ?;\"\"\" , ( album_name ,) ) songs = cursor . fetchall () song_list = [] for song in songs : song_list . append ({ \"song_title\" : song [ - 5 ], \"song_primary_artist\" : song [ - 1 ], \"filesize\" : song [ 2 ], \"song_id\" : song [ 0 ] }) logging . info ( f \"Got songs in album: { album_name } \" ) return song_list get_songs_in_album_artist ( album_artist ) get_songs_in_album_artist Get all the songs in an album artist, returns a list of Song objects. Parameters: Name Type Description Default album_artist str name of album artist required Returns: Type Description List [ dict ] List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) Source code in src\\core\\analyticsdb.py 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 def get_songs_in_album_artist ( self , album_artist : str ) -> List [ dict ]: \"\"\" get_songs_in_album_artist Get all the songs in an album artist, returns a list of Song objects. Args: album_artist (str): name of album artist Returns: List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) \"\"\" logging . info ( f \"Getting songs in album artist: { album_artist } \" ) cursor = self . conn . cursor () # use table album_artists to get all songs by album artist cursor . execute ( \"\"\"SELECT * FROM album_artists WHERE artist_name = ?;\"\"\" , ( album_artist ,) ) songs = cursor . fetchall () song_list = [] for song in songs : song_data = self . get_song_by_id ( song [ 1 ]) song_list . append ({ \"song_title\" : song_data [ 'title' ], \"song_primary_artist\" : song_data [ 'main_artist' ], \"filesize\" : song_data [ 'filesize' ], \"song_id\" : song_data [ 'song_id' ] }) logging . info ( f \"Got songs in album artist: { album_artist } \" ) return song_list get_songs_in_composer ( composer ) get_songs_in_composer Get all the songs in a composer, returns a list of Song objects. Parameters: Name Type Description Default composer str name of composer required Returns: Type Description List [ dict ] List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) Source code in src\\core\\analyticsdb.py 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 def get_songs_in_composer ( self , composer : str ) -> List [ dict ]: \"\"\" get_songs_in_composer Get all the songs in a composer, returns a list of Song objects. Args: composer (str): name of composer Returns: List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) \"\"\" logging . info ( f \"Getting songs in composer: { composer } \" ) cursor = self . conn . cursor () # use table composers to get all songs by composer cursor . execute ( \"\"\"SELECT * FROM composers WHERE composer_name = ?;\"\"\" , ( composer ,) ) songs = cursor . fetchall () song_list = [] for song in songs : song_data = self . get_song_by_id ( song [ 1 ]) song_list . append ({ \"song_title\" : song_data [ 'title' ], \"song_primary_artist\" : song_data [ 'main_artist' ], \"filesize\" : song_data [ 'filesize' ], \"song_id\" : song_data [ 'song_id' ] }) logging . info ( f \"Got songs in composer: { composer } \" ) return song_list get_songs_in_genre ( genre ) get_songs_in_genre Get all the songs in a genre, returns a list of Song objects. Parameters: Name Type Description Default genre str name of genre required Returns: Type Description List [ dict ] List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) Source code in src\\core\\analyticsdb.py 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 def get_songs_in_genre ( self , genre : str ) -> List [ dict ]: \"\"\" get_songs_in_genre Get all the songs in a genre, returns a list of Song objects. Args: genre (str): name of genre Returns: List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) \"\"\" logging . info ( f \"Getting songs in genre: { genre } \" ) cursor = self . conn . cursor () # use table genres to get all songs by genre cursor . execute ( \"\"\"SELECT * FROM genres WHERE genre_name = ?;\"\"\" , ( genre ,) ) songs = cursor . fetchall () song_list = [] for song in songs : song_data = self . get_song_by_id ( song [ 1 ]) song_list . append ({ \"song_title\" : song_data [ 'title' ], \"song_primary_artist\" : song_data [ 'main_artist' ], \"filesize\" : song_data [ 'filesize' ], \"song_id\" : song_data [ 'song_id' ] }) logging . info ( f \"Got songs in genre: { genre } \" ) return song_list get_songs_in_playlist ( playlist_name ) get_songs_in_playlist Returns a list of all the songs in a given playlist Parameters: Name Type Description Default playlist_name str Name of the playlist to get songs from required Returns: Type Description List [ dict ] List[dict]: List of dictionaries containing the song data. Source code in src\\core\\analyticsdb.py 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 def get_songs_in_playlist ( self , playlist_name : str ) -> List [ dict ]: \"\"\" get_songs_in_playlist Returns a list of all the songs in a given playlist Args: playlist_name (str): Name of the playlist to get songs from Returns: List[dict]: List of dictionaries containing the song data. \"\"\" logging . info ( f \"Getting songs in playlist: { playlist_name } \" ) playlist_id = self . get_playlist_id_by_name ( playlist_name ) # GET SONG IDS from playlists_songs table then look up songs in songs table cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM playlists_songs WHERE playlist_id = ?;\"\"\" , ( playlist_id ,) ) playlist_songs = cursor . fetchall () songs = [] for playlist_song in playlist_songs : song_id = playlist_song [ 1 ] song = self . get_song_by_id ( song_id ) songs . append ( song ) logging . info ( f \"Got songs in playlist: { playlist_name } \" ) return songs get_songs_in_song_artist ( song_artist ) get_songs_in_song_artist Get all the songs in a song artist, returns a list of Song objects. Parameters: Name Type Description Default song_artist str name of song artist required Returns: Type Description List [ dict ] List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) Source code in src\\core\\analyticsdb.py 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 def get_songs_in_song_artist ( self , song_artist : str ) -> List [ dict ]: \"\"\" get_songs_in_song_artist Get all the songs in a song artist, returns a list of Song objects. Args: song_artist (str): name of song artist Returns: List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) \"\"\" logging . info ( f \"Getting songs in song artist: { song_artist } \" ) cursor = self . conn . cursor () # use table song_artists to get all songs by song artist cursor . execute ( \"\"\"SELECT * FROM song_artists WHERE artist_name = ?;\"\"\" , ( song_artist ,) ) songs = cursor . fetchall () song_list = [] for song in songs : song_data = self . get_song_by_id ( song [ 1 ]) song_list . append ({ \"song_title\" : song_data [ 'title' ], \"song_primary_artist\" : song_data [ 'main_artist' ], \"filesize\" : song_data [ 'filesize' ], \"song_id\" : song_data [ 'song_id' ] }) logging . info ( f \"Got songs in song artist: { song_artist } \" ) return song_list insert_album_artist ( artist_name , song_id ) insert_album_artist Insert an album_artist into the database, returns True if successful, False if not. Only insert if the album_artist does not already exist Parameters: Name Type Description Default artist_name _type_ name of the album artist required song_id _type_ song_id of the song required Returns: Name Type Description bool bool True if successful, False if not Source code in src\\core\\analyticsdb.py 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 def insert_album_artist ( self , artist_name , song_id ) -> bool : \"\"\" insert_album_artist Insert an album_artist into the database, returns True if successful, False if not. Only insert if the album_artist does not already exist Args: artist_name (_type_): name of the album artist song_id (_type_): song_id of the song Returns: bool: True if successful, False if not \"\"\" logging . info ( \"Attempting to insert album artist {} iwith song_id {} into album_artists table\" . format ( artist_name , song_id )) cursor = self . conn . cursor () # check if album_artist already exists cursor . execute ( \"\"\"SELECT 1 FROM album_artists WHERE artist_name = ? AND song_id = ?;\"\"\" , ( artist_name , song_id ) ) if cursor . fetchone (): logging . warning ( \"Album artist {} with song_id {} already exists in album_artists table\" . format ( artist_name , song_id )) return False cursor . execute ( \"\"\"INSERT INTO album_artists (artist_name, song_id, dt_added) VALUES (?, ?, ?);\"\"\" , ( artist_name , song_id , datetime . datetime . now ()) ) self . conn . commit () logging . info ( \"Inserted album artist {} with song_id {} into album_artists table\" . format ( artist_name , song_id )) return True insert_composer ( composer_name , song_id ) insert_composer Insert a composer into the database, returns True if successful, False if not. Only insert if the composer does not already exist Parameters: Name Type Description Default composer_name _type_ name of the composer required song_id _type_ song_id of the song required Returns: Name Type Description bool bool True if successful, False if not Source code in src\\core\\analyticsdb.py 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 def insert_composer ( self , composer_name , song_id ) -> bool : \"\"\" insert_composer Insert a composer into the database, returns True if successful, False if not. Only insert if the composer does not already exist Args: composer_name (_type_): name of the composer song_id (_type_): song_id of the song Returns: bool: True if successful, False if not \"\"\" logging . info ( \"Attempting to insert composer {} with song_id {} into composers table\" . format ( composer_name , song_id )) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT 1 FROM composers WHERE composer_name = ? AND song_id = ?;\"\"\" , ( composer_name , song_id ) ) if cursor . fetchone (): logging . warning ( \"Composer {} with song_id {} already exists in composers table\" . format ( composer_name , song_id )) return False cursor . execute ( \"\"\"INSERT INTO composers (composer_name, song_id, dt_added) VALUES (?, ?, ?);\"\"\" , ( composer_name , song_id , datetime . datetime . now ()) ) self . conn . commit () logging . info ( \"Inserted composer {} with song_id {} into composers table\" . format ( composer_name , song_id )) return True insert_genre ( genre_name , song_id ) Insert a genre into the database, returns True if successful, False if not. Only insert if the genre does not already exist. Source code in src\\core\\analyticsdb.py 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 def insert_genre ( self , genre_name , song_id ) -> bool : \"\"\"Insert a genre into the database, returns True if successful, False if not. Only insert if the genre does not already exist.\"\"\" logging . warning ( \"Inserting genre {} with song_id {} into genres table\" . format ( genre_name , song_id )) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT 1 FROM genres WHERE genre_name = ? AND song_id = ?;\"\"\" , ( genre_name , song_id ) ) if cursor . fetchone (): logging . info ( \"Genre {} with song_id {} already exists in genres table\" . format ( genre_name , song_id )) return False cursor . execute ( \"\"\"INSERT INTO genres (genre_name, song_id, dt_added) VALUES (?, ?, ?);\"\"\" , ( genre_name , song_id , datetime . datetime . now ()) ) self . conn . commit () logging . info ( \"Inserted genre {} with song_id {} into genres table\" . format ( genre_name , song_id )) return True insert_play ( song_title , song_primary_artist , filesize , start_dt , end_dt , song_id ) insert_play Insert a play into the plays table Parameters: Name Type Description Default song_title str Title of the song required song_primary_artist str Primary artist of the song required filesize int Filesize of the song required start_dt str Date the song started playing required end_dt str Date the song ended playing required Returns: Name Type Description int int id of the inserted play Source code in src\\core\\analyticsdb.py 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 def insert_play ( self , song_title : str , song_primary_artist : str , filesize : int , start_dt : str , end_dt : str , song_id : str ) -> int : \"\"\" insert_play Insert a play into the plays table Args: song_title (str): Title of the song song_primary_artist (str): Primary artist of the song filesize (int): Filesize of the song start_dt (str): Date the song started playing end_dt (str): Date the song ended playing Returns: int: id of the inserted play \"\"\" # plays table has auto incrementing id, so we don't need to insert the id logging . info ( \"Inserting play into plays table\" ) cursor = self . conn . cursor () cursor . execute ( \"INSERT INTO plays (song_title, song_primary_artist, filesize, start_dt, end_dt, song_id) VALUES (?, ?, ?, ?, ?, ?);\" , ( song_title , song_primary_artist , filesize , start_dt , end_dt , song_id ) ) self . conn . commit () # get the id of the inserted play play_id = cursor . lastrowid logging . info ( \"Inserted play into plays table\" ) return play_id insert_playlist ( playlist_name , playlist_desc , created_dt ) insert_playlist Insert a playlist into the playlists table. Only inserts if the playlist does not already exist Parameters: Name Type Description Default playlist_name str Name of the playlist required playlist_desc str Description of the playlist required created_dt str Date the playlist was created required Returns: Name Type Description int int id of the inserted playlist Source code in src\\core\\analyticsdb.py 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 def insert_playlist ( self , playlist_name : str , playlist_desc : str , created_dt : str ) -> int : \"\"\" insert_playlist Insert a playlist into the playlists table. Only inserts if the playlist does not already exist Args: playlist_name (str): Name of the playlist playlist_desc (str): Description of the playlist created_dt (str): Date the playlist was created Returns: int: id of the inserted playlist \"\"\" # check if the playlist already exists if self . get_playlist_id_by_name ( playlist_name ) is not None : logging . info ( \"Playlist {} already exists\" . format ( playlist_name )) return False logging . info ( \"Inserting playlist {} into playlists table\" . format ( playlist_name )) cursor = self . conn . cursor () cursor . execute ( \"INSERT INTO playlists (playlist_name, playlist_desc, created_dt) VALUES (?, ?, ?);\" , ( playlist_name , playlist_desc , created_dt )) self . conn . commit () # get the id of the inserted playlist playlist_id = cursor . lastrowid logging . info ( \"Inserted playlist {} into playlists table\" . format ( playlist_name )) return playlist_id insert_playlist_song ( playlist_name , song_id ) insert_playlist_song Inserts a song into a playlist. Adds a record to the playlists_songs table Parameters: Name Type Description Default playlist_name str Name of the playlist required song_id str ID of the song required Returns: Name Type Description bool bool True if successful, False if not Source code in src\\core\\analyticsdb.py 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 def insert_playlist_song ( self , playlist_name : str , song_id : str ) -> bool : \"\"\" insert_playlist_song Inserts a song into a playlist. Adds a record to the playlists_songs table Args: playlist_name (str): Name of the playlist song_id (str): ID of the song Returns: bool: True if successful, False if not \"\"\" logging . info ( \"Inserting playlist_song {} into playlists_songs table\" . format ( playlist_name )) playlist_id = self . get_playlist_id_by_name ( playlist_name ) added_dt = datetime . datetime . now () . strftime ( \"%Y-%m- %d %H:%M:%S\" ) cursor = self . conn . cursor () # duplicates are ok cursor . execute ( \"\"\"INSERT INTO playlists_songs (playlist_id, song_id, added_dt) VALUES (?, ?, ?);\"\"\" , ( playlist_id , song_id , added_dt ) ) self . conn . commit () logging . info ( \"Inserted playlist_song {} into playlists_songs table\" . format ( playlist_name )) return True insert_song ( ** kwargs ) insert_song Insert a song into the songs table, returns song_id of inserted song. Only insert if the song does not already exist. Use the title and filesize. Parameters: Name Type Description Default **kwargs song_table_data (dict) {} Returns: Name Type Description str str song_id of inserted song Source code in src\\core\\analyticsdb.py 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 def insert_song ( self , ** kwargs ) -> str : \"\"\" insert_song Insert a song into the songs table, returns song_id of inserted song. Only insert if the song does not already exist. Use the title and filesize. Args: **kwargs: song_table_data (dict) Returns: str: song_id of inserted song \"\"\" logging . info ( \"Inserting song {} into songs table\" . format ( kwargs [ \"title\" ])) cursor = self . conn . cursor () # self.song_table_data = { # \"song_id\": \"N/A\", # string # \"filepath\": \"N/A\", # string # \"main_artist\": \"N/A\", # string # \"filesize\": -1, # in bytes # \"padding\": -1, # in bytes # \"album_artwork_bit_depth\": -1, # in bits # \"album_artwork_colors\": -1, # int # \"album_artwork_height\": -1, # in pixels # \"album_artwork_width\": -1, # in pixels # \"bit_depth\": -1, # in bits # \"bitrate\": -1, # in bits, divide by 1000 to get Kbps # \"channels\": -1, # int # \"duration\": -1, # in seconds # \"sample_rate\": -1, # in KHz # \"album\": \"N/A\", # string # \"barcode\": \"N/A\", # string # \"date_created\": \"N/A\", # in YYYY-MM-DD # \"disc_number\": -1, # int # \"disc_total\": -1, # int # \"isrc\": \"N/A\", # string # \"itunesadvisory\": \"N/A\", # string # \"length\": -1, # int # \"publisher\": \"N/A\", # string # \"rating\": -1, # int # \"title\": \"N/A\", # string # \"track_number\": -1, # int # \"track_total\": -1, # int # \"source\": \"N/A\", # string # } # check if song already exists song_id = self . get_song_by_id ( kwargs [ 'song_id' ]) if song_id : logging . warning ( \"Song {} already exists in songs table\" . format ( kwargs [ \"title\" ])) return song_id cursor . execute ( \"\"\"INSERT INTO songs ( song_id, filepath, main_artist, filesize, padding, album_artwork_bit_depth, album_artwork_colors, album_artwork_height, album_artwork_width, bit_depth, bitrate, channels, duration, sample_rate, album, barcode, date_created, disc_number, disc_total, isrc, itunesadvisory, length, publisher, rating, title, track_number, track_total, source ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? );\"\"\" , ( kwargs [ 'song_id' ], kwargs [ \"filepath\" ], kwargs [ \"main_artist\" ], kwargs [ \"filesize\" ], kwargs [ \"padding\" ], kwargs [ \"album_artwork_bit_depth\" ], kwargs [ \"album_artwork_colors\" ], kwargs [ \"album_artwork_height\" ], kwargs [ \"album_artwork_width\" ], kwargs [ \"bit_depth\" ], kwargs [ \"bitrate\" ], kwargs [ \"channels\" ], kwargs [ \"duration\" ], kwargs [ \"sample_rate\" ], kwargs [ \"album\" ], kwargs [ \"barcode\" ], kwargs [ \"date_created\" ], kwargs [ \"disc_number\" ], kwargs [ \"disc_total\" ], kwargs [ \"isrc\" ], kwargs [ \"itunesadvisory\" ], kwargs [ \"length\" ], kwargs [ \"publisher\" ], kwargs [ \"rating\" ], kwargs [ \"title\" ], kwargs [ \"track_number\" ], kwargs [ \"track_total\" ], kwargs [ \"source\" ], ) ) self . conn . commit () # get the song_id of the inserted song song_name = kwargs [ \"title\" ] logging . info ( f \"Inserted { song_name } with song_id: { song_id } \" ) return kwargs [ 'song_id' ] insert_song_artist ( artist_name , song_id ) insert_song_artist Insert a song_artist into the database, returns True if successful, False if not. Only insert if the song_artist does not already exist Parameters: Name Type Description Default artist_name _type_ name of the song artist required song_id _type_ song_id of the song required Returns: Name Type Description bool bool True if successful, False if not Source code in src\\core\\analyticsdb.py 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 def insert_song_artist ( self , artist_name , song_id ) -> bool : \"\"\" insert_song_artist Insert a song_artist into the database, returns True if successful, False if not. Only insert if the song_artist does not already exist Args: artist_name (_type_): name of the song artist song_id (_type_): song_id of the song Returns: bool: True if successful, False if not \"\"\" logging . info ( \"Attempting to insert song artist {} with song_id {} into song_artists table\" . format ( artist_name , song_id )) cursor = self . conn . cursor () # cursor.execute( # \"\"\"INSERT INTO song_artists (artist_name, song_id, dt_added) # SELECT ?, ?, ? WHERE NOT EXISTS ( # SELECT 1 FROM song_artists WHERE artist_name = ? AND song_id = ? # );\"\"\", # (artist_name, song_id, datetime.datetime.now(), artist_name, song_id) # ) # check if song_artist already exists cursor . execute ( \"\"\"SELECT 1 FROM song_artists WHERE artist_name = ? AND song_id = ?;\"\"\" , ( artist_name , song_id ) ) if cursor . fetchone (): logging . warning ( \"Song artist {} with song_id {} already exists in song_artists table\" . format ( artist_name , song_id )) return False cursor . execute ( \"\"\"INSERT INTO song_artists (artist_name, song_id, dt_added) VALUES (?, ?, ?);\"\"\" , ( artist_name , song_id , datetime . datetime . now ()) ) self . conn . commit () logging . info ( \"Inserted song artist {} with song_id {} into song_artists table\" . format ( artist_name , song_id )) return True populate_database ( soundfiles_path = config . SOUNDFILES_PATH ) populate_database Populate the database using the data from the soundfiles in the SOUNDFILES_PATH directory Source code in src\\core\\analyticsdb.py 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 def populate_database ( self , soundfiles_path = config . SOUNDFILES_PATH ): \"\"\" populate_database Populate the database using the data from the soundfiles in the SOUNDFILES_PATH directory \"\"\" # fetch all the files from config.SOUNDFILES_PATH soundfiles = os . listdir ( soundfiles_path ) for file in soundfiles : # get path of file file_path = os . path . join ( soundfiles_path , file ) # get metadata from file parser = songparser . SongMetadata ( filepath = file_path ) # get the song data and insert it into the database song_data = parser . get_song_table_data () song_id = None if song_data is not None : self . insert_song ( ** song_data ) song_id = song_data [ \"song_id\" ] else : logging . error ( f \"Could not get song data for file: { file_path } \" ) continue # get the artist data and insert it into the database album_artist_data = parser . get_album_artist_data () if album_artist_data is not None : for artist in album_artist_data : self . insert_album_artist ( artist , song_id ) song_artist_data = parser . get_song_artist_data () if song_artist_data is not None : for artist in song_artist_data : self . insert_song_artist ( artist , song_id ) composer_data = parser . get_composer_data () if composer_data is not None : for composer in composer_data : self . insert_composer ( composer , song_id ) genre_data = parser . get_genre_data () if genre_data is not None : for genre in genre_data : self . insert_genre ( genre , song_id )","title":"analyticsdb.py"},{"location":"analyticsdb/#overview","text":"The main file that interacts with the database. Responsible for creating, adding, and retrieving data from the database. Here's some important infomation about the file: This file interacts with the analytics database using a SQLite3 database. This is the main file that interacts with the database. It is responsible for creating, adding, and retrieving data from the database. Create an AnalyticsDBHandler object and run commands to do stuff. dbhandler = AnalyticsDBHandler () # make the object dbhandler . create_all_tables () # create all the tables dbhandler . populate_database () # looks into soundfiles/ folder and adds all the info to the tables dbhandler . get_song_by_id ( 1 ) # get the song with the id of 1 The file is split up into different sections, you'll see a large comment break between each section. All the funtions run raw sqlite3, so there isn't a rigid structure to the database.","title":"Overview"},{"location":"analyticsdb/#important-functions","text":"","title":"Important Functions"},{"location":"analyticsdb/#create_all_tables","text":"You have to create the tables before doing anything with the data! If you don't run this command (if the tables don't already exist), you'll get constant errors. Also once created, the data persists between runs of the program (they're stored in the file analyticsdb.db). If you delete the file or it doesn't exist, run this command to create the tables.","title":"create_all_tables()"},{"location":"analyticsdb/#populate_database","text":"The bread and butter of the file. This function looks into the soundfiles/ folder and adds all the info to the tables. This includes adding data to multiple databases at once, it handles all the hard work for you. Realistically, this is the only function we'll be needing to add data to the table. It accounts for duplicates, so look for WARNING messages in the logs if you're adding a lot of data.","title":"populate_database()"},{"location":"analyticsdb/#insert_songkwargs","text":"Yeah, there's a ton of parameters. This function is used to insert a song into the database. It's a bit of a pain to use, but it's the only way to insert a song into the database. Look at songparser.py for more info.","title":"insert_song(**kwargs)"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler","text":"Class to handle all the data analytics, especially stuff like creating tables, making backups, etc. Source code in src\\core\\analyticsdb.pyclass AnalyticsDBHandler : \"\"\"Class to handle all the data analytics, especially stuff like creating tables, making backups, etc.\"\"\" # CONSTRUCTOR def __init__ ( self , debug_path = None ) -> None : \"\"\" __init__ Initialize the database handler. Creates the database at the path specified in config.py Args: debug_path (str, optional): Path to the database for debug. Defaults to None. \"\"\" if debug_path is None : self . conn = sqlite3 . connect ( config . DATABASE_PATH ) else : self . conn = sqlite3 . connect ( debug_path ) # ------------------------------------------------------------------------------------------------------------ # -------------------------------------------------------------------------------------------- # Error Handling # -------------------------------------------------------------------------------------------- # ------------------------------------------------------------------------------------------------------------ def raise_table_not_created ( self , table , details ): err = \"Unable to create \" + table + \" table: \" + details logging . info ( err ) raise HTTPException ( status_code = 400 , detail = err ) # ------------------------------------------------------------------------------------------------------------ # -------------------------------------------------------------------------------------------- # CREATE TABLES # -------------------------------------------------------------------------------------------- # ------------------------------------------------------------------------------------------------------------ def create_songs_table ( self ): \"\"\" create_songs_table Creates the songs table in the database. \"\"\" try : logging . info ( \"Creating songs table\" ) cursor = self . conn . cursor () # This is going to be a LOT of data, make a table with the following: # Create the table cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS songs ( song_id TEXT PRIMARY KEY, filepath TEXT, filesize BIGINT, padding INTEGER, album_artwork_bit_depth INTEGER, album_artwork_colors INTEGER, album_artwork_height INTEGER, album_artwork_width INTEGER, bit_depth INTEGER, bitrate INTEGER, channels INTEGER, duration INTEGER, sample_rate INTEGER, album TEXT, barcode TEXT, date_created TEXT, disc_number INTEGER, disc_total INTEGER, isrc TEXT, itunesadvisory TEXT, length INTEGER, publisher TEXT, rating INTEGER, title TEXT, track_number INTEGER, track_total INTEGER, source TEXT, main_artist TEXT )\"\"\" ) self . conn . commit () logging . info ( \"Created songs table\" ) except : self . raise_table_not_created ( \"song\" , \"unable to create table\" ) def create_plays_table ( self ): \"\"\" create_plays_table Creates the plays table in the database. \"\"\" try : logging . info ( \"Creating plays table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS plays ( play_id INTEGER PRIMARY KEY AUTOINCREMENT, song_title TEXT NOT NULL, song_primary_artist TEXT NOT NULL, filesize BIGINT, start_dt TEXT NOT NULL, end_dt TEXT NOT NULL, song_id TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created plays table\" ) except : self . raise_table_not_created ( \"plays\" , \"unable to create table\" ) def create_playlists_table ( self ) -> bool : \"\"\" create_playlists_table Creates the playlists table in the database. Returns: bool: True if successful, False if not. \"\"\" try : logging . info ( \"Creating playlists table\" ) cursor = self . conn . cursor () # description is a text that is cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS playlists ( playlist_id INTEGER PRIMARY KEY AUTOINCREMENT, playlist_name TEXT NOT NULL, playlist_desc TEXT, created_dt TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created playlists table\" ) except : self . raise_table_not_created ( \"playlists\" , \"unable to create table\" ) def create_playlists_songs_table ( self ) -> bool : \"\"\" create_playlists_songs_table Creates the playlists_songs table in the database. Returns: bool: True if successful, False if not. \"\"\" try : # Song_id is a foreign key to the songs table logging . info ( \"Creating playlists_songs table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS playlists_songs ( playlist_id INTEGER NOT NULL, song_id TEXT NOT NULL, added_dt TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created playlists_songs table\" ) except : self . raise_table_not_created ( \"playlists_songs\" , \"unable to create table\" ) def create_song_artists_table ( self ): \"\"\" create_song_artists_table Creates the song_artists table in the database. \"\"\" try : # Song_id is a foreign key to the songs table logging . info ( \"Creating song_artists table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS song_artists ( artist_name TEXT NOT NULL, song_id TEXT NOT NULL, dt_added TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created song_artists table\" ) except : self . raise_table_not_created ( \"song_artists\" , \"unable to create table\" ) def create_album_artists_table ( self ): \"\"\"Create the album_artists table, returns True if successful, False if not.\"\"\" try : # Album_id is a foreign key to the songs table logging . info ( \"Creating album_artists table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS album_artists ( artist_name TEXT NOT NULL, song_id TEXT NOT NULL, dt_added TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created album_artists table\" ) except : self . raise_table_not_created ( \"album_artists\" , \"unable to create table\" ) def create_composers_table ( self ) -> bool : \"\"\" create_composers_table Creates the composers table in the database. Returns: bool: True if successful, False if not. \"\"\" try : # Song_id is a foreign key to the songs table logging . info ( \"Creating composers table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS composers ( composer_name TEXT NOT NULL, song_id TEXT NOT NULL, dt_added TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created composers table\" ) except : self . raise_table_not_created ( \"composers\" , \"unable to create table\" ) def create_genres_table ( self ): \"\"\" create_genres_table Creates the genres table in the database. \"\"\" try : # Song_id is a foreign key to the songs table logging . info ( \"Creating genres table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS genres ( genre_name TEXT NOT NULL, song_id TEXT NOT NULL, dt_added TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created genres table\" ) except : self . raise_table_not_created ( \"genres\" , \"unable to create table\" ) def create_all_tables ( self ): \"\"\"Create all the tables, returns True if successful, False if not.\"\"\" logging . info ( \"Creating all tables\" ) self . create_songs_table () self . create_plays_table () self . create_playlists_table () self . create_playlists_songs_table () self . create_song_artists_table () self . create_album_artists_table () self . create_composers_table () self . create_genres_table () logging . info ( \"Created all tables\" ) # ------------------------------------------------------------------------------------------------------------ # ------------------------------------------------------------------------------------------------------------ # DELETE TABLES & INFO # ------------------------------------------------------------------------------------------------------------ # ------------------------------------------------------------------------------------------------------------ def clear_songs_table ( self ): \"\"\" clear_songs_table Clears the songs table in the database. \"\"\" logging . info ( \"Clearing songs table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM songs;\" ) self . conn . commit () logging . info ( \"Cleared songs table\" ) def clear_plays_table ( self ): \"\"\" clear_plays_table Clears the plays table in the database. \"\"\" logging . info ( \"Clearing plays table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM plays;\" ) self . conn . commit () logging . info ( \"Cleared plays table\" ) def clear_playlists_table ( self ): \"\"\" clear_playlists_table Clears the playlists table in the database. \"\"\" logging . info ( \"Clearing playlists table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM playlists;\" ) self . conn . commit () logging . info ( \"Cleared playlists table\" ) def clear_playlists_songs_table ( self ): \"\"\" clear_playlists_songs_table Clears the playlists_songs table in the database. \"\"\" logging . info ( \"Clearing playlists_songs table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM playlists_songs;\" ) self . conn . commit () logging . info ( \"Cleared playlists_songs table\" ) def clear_song_artists_table ( self ): \"\"\" clear_song_artists_table Clears the song_artists table in the database. \"\"\" logging . info ( \"Clearing song_artists table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM song_artists;\" ) self . conn . commit () logging . info ( \"Cleared song_artists table\" ) def clear_album_artists_table ( self ): \"\"\" clear_album_artists_table Clears the album_artists table in the database. \"\"\" logging . info ( \"Clearing album_artists table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM album_artists;\" ) self . conn . commit () logging . info ( \"Cleared album_artists table\" ) def clear_composers_table ( self ): \"\"\" clear_composers_table Clears the composers table in the database. \"\"\" logging . info ( \"Clearing composers table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM composers;\" ) self . conn . commit () logging . info ( \"Cleared composers table\" ) def clear_genres_table ( self ): \"\"\" clear_genres_table Clears the genres table in the database. \"\"\" logging . info ( \"Clearing genres table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM genres;\" ) self . conn . commit () logging . info ( \"Cleared genres table\" ) def clear_all_tables ( self ) -> bool : \"\"\"Clear all the tables, returns True if successful, False if not.\"\"\" logging . info ( \"Clearing all tables\" ) self . clear_songs_table () self . clear_plays_table () self . clear_playlists_table () self . clear_playlists_songs_table () self . clear_song_artists_table () self . clear_album_artists_table () self . clear_composers_table () self . clear_genres_table () logging . info ( \"Cleared all tables\" ) return True def delete_database ( self ) -> bool : \"\"\"Delete the database, returns True if successful, False if not. Returns: bool: True if successful, False if not. \"\"\" logging . info ( \"Deleting database\" ) os . remove ( config . DATABASE_PATH ) logging . info ( \"Deleted database\" ) return True def delete_song_by_id ( self , song_id : str ) -> bool : \"\"\"Delete a song from the database by its ID. Args: song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting song by ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM songs WHERE song_id = ?;\"\"\" , ( song_id ,) ) self . conn . commit () logging . info ( f \"Deleted song by ID: { song_id } \" ) return True def delete_playlist_by_id ( self , playlist_id : int ) -> bool : \"\"\"Delete a playlist from the database by its ID. Args: playlist_id (int): ID of the playlist to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting playlist by ID: { playlist_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM playlists WHERE playlist_id = ?;\"\"\" , ( playlist_id ,) ) self . conn . commit () logging . info ( f \"Deleted playlist by ID: { playlist_id } \" ) return True def delete_playlist_by_name ( self , playlist_name : str ) -> bool : \"\"\"Delete a playlist from the database by its name. Args: playlist_name (str): Name of the playlist to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting playlist by name: { playlist_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM playlists WHERE playlist_name = ?;\"\"\" , ( playlist_name ,) ) self . conn . commit () logging . info ( f \"Deleted playlist by name: { playlist_name } \" ) return True def delete_playlist_song_by_id ( self , playlist_id : int , song_id : str ) -> bool : \"\"\"Delete a song from a playlist by its ID. Args: playlist_id (int): ID of the playlist to delete the song from. song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting song from playlist by ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM playlists_songs WHERE playlist_id = ? AND song_id = ?;\"\"\" , ( playlist_id , song_id ) ) self . conn . commit () logging . info ( f \"Deleted song from playlist by ID: { song_id } \" ) return True def delete_playlist_song_by_name ( self , playlist_name : str , song_name : str ) -> bool : \"\"\"Delete a song from a playlist by its name. Args: playlist_name (str): Name of the playlist to delete the song from. song_name (str): Name of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting song from playlist by name: { song_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM playlists_songs WHERE playlist_id = (SELECT playlist_id FROM playlists WHERE playlist_name = ?) AND song_id = (SELECT song_id FROM songs WHERE song_name = ?);\"\"\" , ( playlist_name , song_name ) ) self . conn . commit () logging . info ( f \"Deleted song from playlist by name: { song_name } \" ) return True def delete_playlist_song_by_playlist_id_song_id ( self , playlist_id : int , song_id : str ) -> bool : \"\"\"Delete a song from a playlist by its ID. Args: playlist_id (int): ID of the playlist to delete the song from. song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting song from playlist by ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM playlists_songs WHERE playlist_id = ? AND song_id = ?;\"\"\" , ( playlist_id , song_id ) ) self . conn . commit () logging . info ( f \"Deleted song from playlist by ID: { song_id } \" ) return True def delete_song_artist_by_artist_song_id ( self , artist_id : int , song_id : str ) -> bool : \"\"\"Delete a song from a playlist by its ID. Args: artist_id (int): ID of the artist to delete the song from. song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting song from artist by ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM songs_artists WHERE artist_id = ? AND song_id = ?;\"\"\" , ( artist_id , song_id ) ) self . conn . commit () logging . info ( f \"Deleted song from artist by ID: { song_id } \" ) return True def delete_album_artist_by_artist_album_id ( self , artist_id : int , album_id : int ) -> bool : \"\"\"Delete an album from an artist by its ID. Args: artist_id (int): ID of the artist to delete the album from. album_id (int): ID of the album to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting album from artist by ID: { album_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM albums_artists WHERE artist_id = ? AND album_id = ?;\"\"\" , ( artist_id , album_id ) ) self . conn . commit () logging . info ( f \"Deleted album from artist by ID: { album_id } \" ) return True def delete_composer_by_name_song_id ( self , composer_name : str , song_id : str ) -> bool : \"\"\"Delete a composer from a song by its name. Args: composer_name (str): Name of the composer to delete the song from. song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting composer from song by name: { composer_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM songs_composers WHERE composer_id = (SELECT composer_id FROM composers WHERE composer_name = ?) AND song_id = ?;\"\"\" , ( composer_name , song_id ) ) self . conn . commit () logging . info ( f \"Deleted composer from song by name: { composer_name } \" ) return True def delete_genre_by_name_song_id ( self , genre_name : str , song_id : str ) -> bool : \"\"\"Delete a genre from a song by its name. Args: genre_name (str): Name of the genre to delete the song from. song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting genre from song by name: { genre_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM songs_genres WHERE genre_id = (SELECT genre_id FROM genres WHERE genre_name = ?) AND song_id = ?;\"\"\" , ( genre_name , song_id ) ) self . conn . commit () logging . info ( f \"Deleted genre from song by name: { genre_name } \" ) return True # ------------------------------------------------------------------------------------------------------------ # ------------------------------------------------------------------------------------------------------------ # RETRIEVE DATA INDIVIDUAL # ------------------------------------------------------------------------------------------------------------ # ------------------------------------------------------------------------------------------------------------ def get_song_by_id ( self , song_id : str ) -> List [ dict ]: \"\"\" get_song_by_id Searches the song table for a song with the given ID. Args: song_id (str): ID of the song to search for. Returns: List[dict]: List of dictionaries containing the song data. \"\"\" logging . info ( f \"Getting song by ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM songs WHERE song_id = ?;\"\"\" , ( song_id ,) ) song = cursor . fetchone () # copy the dict variable config.song_table_data song_table_data = config . song_table_data . copy () if song is None : return None song_table_data [ 'song_id' ] = song [ 0 ] song_table_data [ \"filepath\" ] = song [ 1 ] song_table_data [ \"filesize\" ] = song [ 2 ] song_table_data [ \"padding\" ] = song [ 3 ] song_table_data [ \"album_artwork_bit_depth\" ] = song [ 4 ] song_table_data [ \"album_artwork_colors\" ] = song [ 5 ] song_table_data [ \"album_artwork_height\" ] = song [ 6 ] song_table_data [ \"album_artwork_width\" ] = song [ 7 ] song_table_data [ \"bit_depth\" ] = song [ 8 ] song_table_data [ \"bitrate\" ] = song [ 9 ] song_table_data [ \"channels\" ] = song [ 10 ] song_table_data [ \"duration\" ] = song [ 11 ] song_table_data [ \"sample_rate\" ] = song [ 12 ] song_table_data [ \"album\" ] = song [ 13 ] song_table_data [ \"barcode\" ] = song [ 14 ] song_table_data [ \"date_created\" ] = song [ 15 ] song_table_data [ \"disc_number\" ] = song [ 16 ] song_table_data [ \"disc_total\" ] = song [ 17 ] song_table_data [ \"isrc\" ] = song [ 18 ] song_table_data [ \"itunesadvisory\" ] = song [ 19 ] song_table_data [ \"length\" ] = song [ 20 ] song_table_data [ \"publisher\" ] = song [ 21 ] song_table_data [ \"rating\" ] = song [ 22 ] song_table_data [ \"title\" ] = song [ 23 ] song_table_data [ \"track_number\" ] = song [ 24 ] song_table_data [ \"track_total\" ] = song [ 25 ] song_table_data [ \"source\" ] = song [ 26 ] song_table_data [ \"main_artist\" ] = song [ 27 ] return song_table_data def get_song_id_by_title_filesize ( self , title : str , filesize : int ) -> int : \"\"\" get_song_id_by_title_filesize Searches the database to find the song ID by title and filesize. You want to use filesize because they're basically gurenteed to be unique. Args: title (str): Title of Song filesize (int): Filesize of song (get these from the song object) Returns: int: song_id of the song \"\"\" logging . info ( f \"Getting song by title and filesize: { title } , { filesize } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM songs WHERE title = ? AND filesize = ?;\"\"\" , ( title , filesize ) ) # return the id of the song song = cursor . fetchone () if song is None : return None logging . info ( f \"Got song by title and filesize: { title } , { filesize } \" ) return song [ 0 ] def get_songs_in_playlist ( self , playlist_name : str ) -> List [ dict ]: \"\"\" get_songs_in_playlist Returns a list of all the songs in a given playlist Args: playlist_name (str): Name of the playlist to get songs from Returns: List[dict]: List of dictionaries containing the song data. \"\"\" logging . info ( f \"Getting songs in playlist: { playlist_name } \" ) playlist_id = self . get_playlist_id_by_name ( playlist_name ) # GET SONG IDS from playlists_songs table then look up songs in songs table cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM playlists_songs WHERE playlist_id = ?;\"\"\" , ( playlist_id ,) ) playlist_songs = cursor . fetchall () songs = [] for playlist_song in playlist_songs : song_id = playlist_song [ 1 ] song = self . get_song_by_id ( song_id ) songs . append ( song ) logging . info ( f \"Got songs in playlist: { playlist_name } \" ) return songs def get_playlist_id_by_name ( self , playlist_name : str ) -> int : \"\"\" get_playlist_id_by_name Get ID of playlist by name. Args: playlist_name (str): Name of playlist Returns: int: ID of playlist \"\"\" logging . info ( f \"Getting playlist by name: { playlist_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM playlists WHERE playlist_name = ?;\"\"\" , ( playlist_name ,) ) playlist = cursor . fetchone () if playlist is None : return None logging . info ( f \"Got playlist by name: { playlist_name } \" ) return playlist [ 0 ] def get_playlist_by_id ( self , playlist_id : int ) -> dict : \"\"\" get_playlist_by_id Get playlist by ID. Args: playlist_id (int): ID of playlist Returns: dict: Dictionary containing playlist data. {playlist_id, playlist_name, playlist_desc, created_dt} \"\"\" logging . info ( f \"Getting playlist by ID: { playlist_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM playlists WHERE playlist_id = ?;\"\"\" , ( playlist_id ,) ) playlist = cursor . fetchone () logging . info ( f \"Got playlist by ID: { playlist_id } \" ) playlist_data = {} playlist_data [ \"playlist_id\" ] = playlist [ 0 ] playlist_data [ \"playlist_name\" ] = playlist [ 1 ] playlist_data [ \"playlist_desc\" ] = playlist [ 2 ] playlist_data [ \"created_dt\" ] = playlist [ 3 ] return playlist_data def get_song_album_artists ( self , song_id : str ) -> List [ str ]: \"\"\" get_song_album_artists Get all the album artists of a song, returns a list of names. Args: song_id (str): ID of song Returns: List[str]: list of names of album artists \"\"\" logging . info ( f \"Getting song album artists by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM album_artists WHERE song_id = ?;\"\"\" , ( song_id ,) ) album_artists = cursor . fetchall () logging . info ( f \"Got song album artists by song ID: { song_id } \" ) return album_artists def get_song_composers ( self , song_id : str ) -> List [ str ]: \"\"\" get_song_composers Get all the composers of a song, returns a list of names. Args: song_id (str): ID of song Returns: List[str]: list of names of composers \"\"\" logging . info ( f \"Getting song composers by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM composers WHERE song_id = ?;\"\"\" , ( song_id ,) ) composers = cursor . fetchall () logging . info ( f \"Got song composers by song ID: { song_id } \" ) return composers def get_song_artists ( self , song_id : str ) -> List [ str ]: \"\"\" get_song_artists Get all the artists of a song, returns a list of names of Artists. Args: song_id (str): ID of song Returns: List[str]: list of names of artists \"\"\" logging . info ( f \"Getting song artists by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM artists WHERE song_id = ?;\"\"\" , ( song_id ,) ) artists = cursor . fetchall () logging . info ( f \"Got song artists by song ID: { song_id } \" ) return artists def get_song_genres ( self , song_id : str ) -> List [ str ]: \"\"\" get_song_genres Get all the genres of a song, returns a list of names of genres. Args: song_id (str): ID of song Returns: List[str]: list of names of genres \"\"\" logging . info ( f \"Getting song genres by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM genres WHERE song_id = ?;\"\"\" , ( song_id ,) ) genres = cursor . fetchall () logging . info ( f \"Got song genres by song ID: { song_id } \" ) return genres def get_play_information_from_song_id ( self , song_id : str ) -> Dict [ str , str ]: \"\"\" get_play_information_from_song_id Get play information from song ID. This is the song_title, song_primary_artist, and filesize Args: song_id (str): ID of song Returns: Dict[str, str]: Dictionary of song_title, song_primary_artist, filesize, and song_id \"\"\" logging . info ( f \"Getting play information for song ID: { song_id } \" ) song_raw = self . get_song_by_id ( song_id ) song_values = { \"song_title\" : song_raw [ \"title\" ], \"song_primary_artist\" : song_raw [ \"main_artist\" ], \"filesize\" : song_raw [ \"filesize\" ], \"song_id\" : song_raw [ 'song_id' ] } logging . info ( f \"Got play information for song ID: { song_id } \" ) return song_values def get_play_by_id ( self , play_id : int ) -> dict : \"\"\" get_play_by_id Get play by ID. Args: play_id (int): ID of play Returns: dict: play object \"\"\" logging . info ( f \"Getting play by ID: { play_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM plays WHERE play_id = ?;\"\"\" , ( play_id ,) ) play = cursor . fetchone () logging . info ( f \"Got play by ID: { play_id } \" ) play_data = { \"play_id\" : play [ 0 ], \"song_title\" : play [ 1 ], \"song_primary_artist\" : play [ 2 ], \"filesize\" : play [ 3 ], \"start_dt\" : play [ 4 ], \"end_dt\" : play [ 5 ], \"song_id\" : play [ 6 ] } return play_data def get_song_artists_of_song ( self , song_id : str ) -> List [ str ]: \"\"\" get_song_artists_of_song Get all the artists of a song, returns a list of names of Artists. Args: song_id (str): ID of song Returns: List[str]: list of names of artists \"\"\" logging . info ( f \"Getting song artists by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM song_artists WHERE song_id = ?;\"\"\" , ( song_id ,) ) artists = cursor . fetchall () song_artists = [] for artist in artists : song_artists . append ( artist [ 0 ]) logging . info ( f \"Got song artists by song ID: { song_id } \" ) return song_artists def get_album_artists_of_song ( self , song_id : str ) -> List [ str ]: \"\"\" get_album_artists_of_song Get all the artists of a song, returns a list of names of Artists. Args: song_id (str): ID of song Returns: List[str]: list of names of artists \"\"\" logging . info ( f \"Getting album artists by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM album_artists WHERE song_id = ?;\"\"\" , ( song_id ,) ) artists = cursor . fetchall () album_artists = [] for artist in artists : album_artists . append ( artist [ 0 ]) logging . info ( f \"Got album artists by song ID: { song_id } \" ) return album_artists def get_composers_of_song ( self , song_id : str ) -> List [ str ]: \"\"\" get_composers_of_song Get all the composers of a song, returns a list of names of composers. Args: song_id (str): ID of song Returns: List[str]: list of names of composers \"\"\" logging . info ( f \"Getting composers by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM composers WHERE song_id = ?;\"\"\" , ( song_id ,) ) composers = cursor . fetchall () song_composers = [] for composer in composers : song_composers . append ( composer [ 0 ]) logging . info ( f \"Got composers by song ID: { song_id } \" ) return song_composers def get_genres_of_song ( self , song_id : str ) -> List [ str ]: \"\"\" get_genres_of_song Get all the genres of a song, returns a list of names of genres. Args: song_id (str): ID of song Returns: List[str]: list of names of genres \"\"\" logging . info ( f \"Getting song genres by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM genres WHERE song_id = ?;\"\"\" , ( song_id ,) ) genres = cursor . fetchall () song_genres = [] for genre in genres : song_genres . append ( genre [ 0 ]) logging . info ( f \"Got song genres by song ID: { song_id } \" ) return song_genres def get_songs_in_album ( self , album_name : str ) -> List [ dict ]: \"\"\" get_songs_in_album Get all the songs in an album, returns a list of Song objects. Args: album_name (str): name of album Returns: List[dict]: list of Song objects \"\"\" logging . info ( f \"Getting songs in album: { album_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM songs WHERE album = ?;\"\"\" , ( album_name ,) ) songs = cursor . fetchall () song_list = [] for song in songs : song_list . append ({ \"song_title\" : song [ - 5 ], \"song_primary_artist\" : song [ - 1 ], \"filesize\" : song [ 2 ], \"song_id\" : song [ 0 ] }) logging . info ( f \"Got songs in album: { album_name } \" ) return song_list def get_songs_in_album_artist ( self , album_artist : str ) -> List [ dict ]: \"\"\" get_songs_in_album_artist Get all the songs in an album artist, returns a list of Song objects. Args: album_artist (str): name of album artist Returns: List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) \"\"\" logging . info ( f \"Getting songs in album artist: { album_artist } \" ) cursor = self . conn . cursor () # use table album_artists to get all songs by album artist cursor . execute ( \"\"\"SELECT * FROM album_artists WHERE artist_name = ?;\"\"\" , ( album_artist ,) ) songs = cursor . fetchall () song_list = [] for song in songs : song_data = self . get_song_by_id ( song [ 1 ]) song_list . append ({ \"song_title\" : song_data [ 'title' ], \"song_primary_artist\" : song_data [ 'main_artist' ], \"filesize\" : song_data [ 'filesize' ], \"song_id\" : song_data [ 'song_id' ] }) logging . info ( f \"Got songs in album artist: { album_artist } \" ) return song_list def get_songs_in_song_artist ( self , song_artist : str ) -> List [ dict ]: \"\"\" get_songs_in_song_artist Get all the songs in a song artist, returns a list of Song objects. Args: song_artist (str): name of song artist Returns: List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) \"\"\" logging . info ( f \"Getting songs in song artist: { song_artist } \" ) cursor = self . conn . cursor () # use table song_artists to get all songs by song artist cursor . execute ( \"\"\"SELECT * FROM song_artists WHERE artist_name = ?;\"\"\" , ( song_artist ,) ) songs = cursor . fetchall () song_list = [] for song in songs : song_data = self . get_song_by_id ( song [ 1 ]) song_list . append ({ \"song_title\" : song_data [ 'title' ], \"song_primary_artist\" : song_data [ 'main_artist' ], \"filesize\" : song_data [ 'filesize' ], \"song_id\" : song_data [ 'song_id' ] }) logging . info ( f \"Got songs in song artist: { song_artist } \" ) return song_list def get_songs_in_composer ( self , composer : str ) -> List [ dict ]: \"\"\" get_songs_in_composer Get all the songs in a composer, returns a list of Song objects. Args: composer (str): name of composer Returns: List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) \"\"\" logging . info ( f \"Getting songs in composer: { composer } \" ) cursor = self . conn . cursor () # use table composers to get all songs by composer cursor . execute ( \"\"\"SELECT * FROM composers WHERE composer_name = ?;\"\"\" , ( composer ,) ) songs = cursor . fetchall () song_list = [] for song in songs : song_data = self . get_song_by_id ( song [ 1 ]) song_list . append ({ \"song_title\" : song_data [ 'title' ], \"song_primary_artist\" : song_data [ 'main_artist' ], \"filesize\" : song_data [ 'filesize' ], \"song_id\" : song_data [ 'song_id' ] }) logging . info ( f \"Got songs in composer: { composer } \" ) return song_list def get_songs_in_genre ( self , genre : str ) -> List [ dict ]: \"\"\" get_songs_in_genre Get all the songs in a genre, returns a list of Song objects. Args: genre (str): name of genre Returns: List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) \"\"\" logging . info ( f \"Getting songs in genre: { genre } \" ) cursor = self . conn . cursor () # use table genres to get all songs by genre cursor . execute ( \"\"\"SELECT * FROM genres WHERE genre_name = ?;\"\"\" , ( genre ,) ) songs = cursor . fetchall () song_list = [] for song in songs : song_data = self . get_song_by_id ( song [ 1 ]) song_list . append ({ \"song_title\" : song_data [ 'title' ], \"song_primary_artist\" : song_data [ 'main_artist' ], \"filesize\" : song_data [ 'filesize' ], \"song_id\" : song_data [ 'song_id' ] }) logging . info ( f \"Got songs in genre: { genre } \" ) return song_list # ------------------------------------------------------------------------------------------------------------ # ------------------------------------------------------------------------------------------------------------ # RETRIEVE DATA MULTIPLE # ------------------------------------------------------------------------------------------------------------ # ------------------------------------------------------------------------------------------------------------ def get_all_tables ( self ) -> List [ str ]: \"\"\" get_all_tables Get all the tables in the database, returns a list of table names. Returns: List[str]: list of table names \"\"\" logging . info ( \"Getting all tables\" ) cursor = self . conn . cursor () cursor . execute ( \"SELECT name FROM sqlite_master WHERE type='table';\" ) tables = cursor . fetchall () logging . info ( \"Got all tables\" ) return tables def get_all_songs ( self ) -> List [ dict ]: \"\"\" get_all_songs Get all the songs in the database, returns a list of Song objects Returns: List[dict]: list of dictionaries \"\"\" logging . info ( \"Getting all songs\" ) cursor = self . conn . cursor () cursor . execute ( \"SELECT * FROM songs;\" ) songs = cursor . fetchall () songs_return = [] for song in songs : song_table_data = { \"song_id\" : song [ 0 ], \"filepath\" : song [ 1 ], \"filesize\" : song [ 2 ], \"padding\" : song [ 3 ], \"album_artwork_bit_depth\" : song [ 4 ], \"album_artwork_colors\" : song [ 5 ], \"album_artwork_height\" : song [ 6 ], \"album_artwork_width\" : song [ 7 ], \"bit_depth\" : song [ 8 ], \"bitrate\" : song [ 9 ], \"channels\" : song [ 10 ], \"duration\" : song [ 11 ], \"sample_rate\" : song [ 12 ], \"album\" : song [ 13 ], \"barcode\" : song [ 14 ], \"date_created\" : song [ 15 ], \"disc_number\" : song [ 16 ], \"disc_total\" : song [ 17 ], \"isrc\" : song [ 18 ], \"itunesadvisory\" : song [ 19 ], \"length\" : song [ 20 ], \"publisher\" : song [ 21 ], \"rating\" : song [ 22 ], \"title\" : song [ 23 ], \"track_number\" : song [ 24 ], \"track_total\" : song [ 25 ], \"source\" : song [ 26 ], \"main_artist\" : song [ 27 ], } songs_return . append ( song_table_data ) return songs_return def get_all_plays ( self ) -> List [ dict ]: \"\"\" get_all_plays Get all the plays in the database, returns a list of the plays Returns: List[dict]: list of dictionaries \"\"\" logging . info ( \"Getting all plays\" ) cursor = self . conn . cursor () cursor . execute ( \"SELECT * FROM plays;\" ) plays = cursor . fetchall () logging . info ( \"Got all plays\" ) return plays def get_all_song_artists ( self , no_duplicates = True ) -> List [ str ]: \"\"\" get_all_song_artists Get all the song artists in the database, returns a list of strings Returns: List[str]: list of strings \"\"\" # artists can be duplicated, so we need to remove duplicates from song_artists logging . info ( \"Getting all song artists\" ) cursor = self . conn . cursor () if no_duplicates : cursor . execute ( \"SELECT DISTINCT artist_name FROM song_artists;\" ) else : cursor . execute ( \"SELECT artist_name FROM song_artists;\" ) song_artists = cursor . fetchall () logging . info ( \"Got all song artists\" ) song_artists = [ artist [ 0 ] for artist in song_artists ] return song_artists def get_all_album_artists ( self , no_duplicates = True ) -> List [ str ]: \"\"\" get_all_album_artists Get all the album artists in the database, returns a list of strings Args: no_duplicates (bool, optional): remove duplicates. Defaults to True. Returns: List[str]: list of strings \"\"\" # artists can be duplicated, so we need to remove duplicates from album_artists logging . info ( \"Getting all album artists\" ) cursor = self . conn . cursor () album_artists = [] if no_duplicates : cursor . execute ( \"SELECT DISTINCT artist_name FROM album_artists;\" ) else : cursor . execute ( \"SELECT artist_name FROM album_artists;\" ) album_artists = cursor . fetchall () logging . info ( \"Got all album artists\" ) album_artists = [ artist [ 0 ] for artist in album_artists ] return album_artists def get_all_composers ( self , no_duplicates = True ) -> List [ str ]: \"\"\" get_all_composers Get all the composers in the database, returns a list of strings Args: no_duplicates (bool, optional): remove duplicates. Defaults to True. Returns: List[str]: list of strings \"\"\" # composers can be duplicated, so we need to remove duplicates from composers logging . info ( \"Getting all composers\" ) cursor = self . conn . cursor () if no_duplicates : cursor . execute ( \"SELECT DISTINCT composer_name FROM composers;\" ) else : cursor . execute ( \"SELECT composer_name FROM composers;\" ) composers = cursor . fetchall () logging . info ( \"Got all composers\" ) composers = [ composer [ 0 ] for composer in composers ] return composers def get_all_genres ( self , no_duplicates = True ) -> List [ str ]: \"\"\" get_all_genres Get all the genres in the database, returns a list of strings Args: no_duplicates (bool, optional): remove duplicates. Defaults to True. Returns: List[str]: list of strings \"\"\" # genres can be duplicated, so we need to remove duplicates from genres logging . info ( \"Getting all genres\" ) cursor = self . conn . cursor () if no_duplicates : cursor . execute ( \"SELECT DISTINCT genre_name FROM genres;\" ) else : cursor . execute ( \"SELECT genre_name FROM genres;\" ) genres = cursor . fetchall () logging . info ( \"Got all genres\" ) genres = [ genre [ 0 ] for genre in genres ] return genres def get_all_playlist_names ( self ) -> List [ str ]: \"\"\" get_all_playlist_names Get all the playlist names in the database, returns a list of strings Returns: List[str]: list of strings \"\"\" logging . info ( \"Getting all playlist names\" ) cursor = self . conn . cursor () cursor . execute ( \"SELECT playlist_name FROM playlists;\" ) playlist_names = cursor . fetchall () # remove the tuple from each playlist name playlist_names = [ playlist_name [ 0 ] for playlist_name in playlist_names ] logging . info ( \"Got all playlist names\" ) return playlist_names def get_all_playlist_songs ( self ) -> List [ dict ]: \"\"\" get_all_playlist_songs Get all the playlist songs in the database, returns a list of dictionaries Returns: List[dict]: list of dictionaries [song_name, file_size, id] \"\"\" playlist_names = self . get_all_playlist_names () playlist_songs = {} for playlist_name in playlist_names : # we only want the song_name, file_size, and id songs = self . get_songs_in_playlist ( playlist_name ) playlist_values = [] for song_data in songs : song_values = { \"song_name\" : song_data [ \"title\" ], \"file_size\" : song_data [ \"filesize\" ], } song_id = self . get_song_id_by_title_filesize ( song_values [ \"song_name\" ], song_values [ \"file_size\" ]) song_values [ \"id\" ] = song_id playlist_values . append ( song_values ) playlist_songs [ playlist_name ] = playlist_values return playlist_songs def get_all_songs_in_genre ( self , genre_name : str ) -> List [ dict ]: \"\"\" get_all_songs_in_genre Get all the songs in a genre, returns a list of dictionaries Args: genre_name (str): Name of the genre Returns: List[dict]: list of dictionaries \"\"\" logging . info ( \"Getting all songs in genre {} \" . format ( genre_name )) cursor = self . conn . cursor () # get all song_id that matches the given genre_name in the genres table cursor . execute ( \"SELECT song_id FROM genres WHERE genre_name = ?;\" , ( genre_name ,)) song_ids = cursor . fetchall () song_ids = [ song_id [ 0 ] for song_id in song_ids ] # get all the songs that match the song_ids songs = [] for song_id in song_ids : song_data = self . get_song_by_id ( song_id ) songs . append ( song_data ) logging . info ( \"Got all songs in genre {} \" . format ( genre_name )) return songs def get_all_columns_from_table ( self , table_name : str ) -> List [ str ]: \"\"\" get_all_columns_from_table Get all the columns from a table, returns a list of strings Args: table_name (str): Name of the table Returns: List[str]: list of strings \"\"\" logging . info ( \"Getting all columns from table {} \" . format ( table_name )) cursor = self . conn . cursor () cursor . execute ( \"PRAGMA table_info( {} );\" . format ( table_name )) columns = cursor . fetchall () columns = [ column [ 1 ] for column in columns ] logging . info ( \"Got all columns from table {} \" . format ( table_name )) return columns def get_all_album_names ( self ) -> List [ str ]: \"\"\" get_all_album_names Get all the album names in the database, returns a list of strings Returns: List[str]: list of strings \"\"\" logging . info ( \"Getting all album names\" ) cursor = self . conn . cursor () # all the albums are a column in the songs table cursor . execute ( \"SELECT album FROM songs;\" ) albums = cursor . fetchall () albums = [ album [ 0 ] for album in albums ] # remove duplicates albums = list ( set ( albums )) logging . info ( \"Got all album names\" ) return albums # ------------------------------------------------------------------------------------------------------------ # ------------------------------------------------------------------------------------------------------------ # INSERT DATA # ------------------------------------------------------------------------------------------------------------ # ------------------------------------------------------------------------------------------------------------ # play table: song_title, song_primary_artist, filesize, start_dt, end_dt def insert_play ( self , song_title : str , song_primary_artist : str , filesize : int , start_dt : str , end_dt : str , song_id : str ) -> int : \"\"\" insert_play Insert a play into the plays table Args: song_title (str): Title of the song song_primary_artist (str): Primary artist of the song filesize (int): Filesize of the song start_dt (str): Date the song started playing end_dt (str): Date the song ended playing Returns: int: id of the inserted play \"\"\" # plays table has auto incrementing id, so we don't need to insert the id logging . info ( \"Inserting play into plays table\" ) cursor = self . conn . cursor () cursor . execute ( \"INSERT INTO plays (song_title, song_primary_artist, filesize, start_dt, end_dt, song_id) VALUES (?, ?, ?, ?, ?, ?);\" , ( song_title , song_primary_artist , filesize , start_dt , end_dt , song_id ) ) self . conn . commit () # get the id of the inserted play play_id = cursor . lastrowid logging . info ( \"Inserted play into plays table\" ) return play_id def insert_playlist ( self , playlist_name : str , playlist_desc : str , created_dt : str ) -> int : \"\"\" insert_playlist Insert a playlist into the playlists table. Only inserts if the playlist does not already exist Args: playlist_name (str): Name of the playlist playlist_desc (str): Description of the playlist created_dt (str): Date the playlist was created Returns: int: id of the inserted playlist \"\"\" # check if the playlist already exists if self . get_playlist_id_by_name ( playlist_name ) is not None : logging . info ( \"Playlist {} already exists\" . format ( playlist_name )) return False logging . info ( \"Inserting playlist {} into playlists table\" . format ( playlist_name )) cursor = self . conn . cursor () cursor . execute ( \"INSERT INTO playlists (playlist_name, playlist_desc, created_dt) VALUES (?, ?, ?);\" , ( playlist_name , playlist_desc , created_dt )) self . conn . commit () # get the id of the inserted playlist playlist_id = cursor . lastrowid logging . info ( \"Inserted playlist {} into playlists table\" . format ( playlist_name )) return playlist_id def insert_playlist_song ( self , playlist_name : str , song_id : str ) -> bool : \"\"\" insert_playlist_song Inserts a song into a playlist. Adds a record to the playlists_songs table Args: playlist_name (str): Name of the playlist song_id (str): ID of the song Returns: bool: True if successful, False if not \"\"\" logging . info ( \"Inserting playlist_song {} into playlists_songs table\" . format ( playlist_name )) playlist_id = self . get_playlist_id_by_name ( playlist_name ) added_dt = datetime . datetime . now () . strftime ( \"%Y-%m- %d %H:%M:%S\" ) cursor = self . conn . cursor () # duplicates are ok cursor . execute ( \"\"\"INSERT INTO playlists_songs (playlist_id, song_id, added_dt) VALUES (?, ?, ?);\"\"\" , ( playlist_id , song_id , added_dt ) ) self . conn . commit () logging . info ( \"Inserted playlist_song {} into playlists_songs table\" . format ( playlist_name )) return True def insert_song ( self , ** kwargs ) -> str : \"\"\" insert_song Insert a song into the songs table, returns song_id of inserted song. Only insert if the song does not already exist. Use the title and filesize. Args: **kwargs: song_table_data (dict) Returns: str: song_id of inserted song \"\"\" logging . info ( \"Inserting song {} into songs table\" . format ( kwargs [ \"title\" ])) cursor = self . conn . cursor () # self.song_table_data = { # \"song_id\": \"N/A\", # string # \"filepath\": \"N/A\", # string # \"main_artist\": \"N/A\", # string # \"filesize\": -1, # in bytes # \"padding\": -1, # in bytes # \"album_artwork_bit_depth\": -1, # in bits # \"album_artwork_colors\": -1, # int # \"album_artwork_height\": -1, # in pixels # \"album_artwork_width\": -1, # in pixels # \"bit_depth\": -1, # in bits # \"bitrate\": -1, # in bits, divide by 1000 to get Kbps # \"channels\": -1, # int # \"duration\": -1, # in seconds # \"sample_rate\": -1, # in KHz # \"album\": \"N/A\", # string # \"barcode\": \"N/A\", # string # \"date_created\": \"N/A\", # in YYYY-MM-DD # \"disc_number\": -1, # int # \"disc_total\": -1, # int # \"isrc\": \"N/A\", # string # \"itunesadvisory\": \"N/A\", # string # \"length\": -1, # int # \"publisher\": \"N/A\", # string # \"rating\": -1, # int # \"title\": \"N/A\", # string # \"track_number\": -1, # int # \"track_total\": -1, # int # \"source\": \"N/A\", # string # } # check if song already exists song_id = self . get_song_by_id ( kwargs [ 'song_id' ]) if song_id : logging . warning ( \"Song {} already exists in songs table\" . format ( kwargs [ \"title\" ])) return song_id cursor . execute ( \"\"\"INSERT INTO songs ( song_id, filepath, main_artist, filesize, padding, album_artwork_bit_depth, album_artwork_colors, album_artwork_height, album_artwork_width, bit_depth, bitrate, channels, duration, sample_rate, album, barcode, date_created, disc_number, disc_total, isrc, itunesadvisory, length, publisher, rating, title, track_number, track_total, source ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? );\"\"\" , ( kwargs [ 'song_id' ], kwargs [ \"filepath\" ], kwargs [ \"main_artist\" ], kwargs [ \"filesize\" ], kwargs [ \"padding\" ], kwargs [ \"album_artwork_bit_depth\" ], kwargs [ \"album_artwork_colors\" ], kwargs [ \"album_artwork_height\" ], kwargs [ \"album_artwork_width\" ], kwargs [ \"bit_depth\" ], kwargs [ \"bitrate\" ], kwargs [ \"channels\" ], kwargs [ \"duration\" ], kwargs [ \"sample_rate\" ], kwargs [ \"album\" ], kwargs [ \"barcode\" ], kwargs [ \"date_created\" ], kwargs [ \"disc_number\" ], kwargs [ \"disc_total\" ], kwargs [ \"isrc\" ], kwargs [ \"itunesadvisory\" ], kwargs [ \"length\" ], kwargs [ \"publisher\" ], kwargs [ \"rating\" ], kwargs [ \"title\" ], kwargs [ \"track_number\" ], kwargs [ \"track_total\" ], kwargs [ \"source\" ], ) ) self . conn . commit () # get the song_id of the inserted song song_name = kwargs [ \"title\" ] logging . info ( f \"Inserted { song_name } with song_id: { song_id } \" ) return kwargs [ 'song_id' ] def insert_album_artist ( self , artist_name , song_id ) -> bool : \"\"\" insert_album_artist Insert an album_artist into the database, returns True if successful, False if not. Only insert if the album_artist does not already exist Args: artist_name (_type_): name of the album artist song_id (_type_): song_id of the song Returns: bool: True if successful, False if not \"\"\" logging . info ( \"Attempting to insert album artist {} iwith song_id {} into album_artists table\" . format ( artist_name , song_id )) cursor = self . conn . cursor () # check if album_artist already exists cursor . execute ( \"\"\"SELECT 1 FROM album_artists WHERE artist_name = ? AND song_id = ?;\"\"\" , ( artist_name , song_id ) ) if cursor . fetchone (): logging . warning ( \"Album artist {} with song_id {} already exists in album_artists table\" . format ( artist_name , song_id )) return False cursor . execute ( \"\"\"INSERT INTO album_artists (artist_name, song_id, dt_added) VALUES (?, ?, ?);\"\"\" , ( artist_name , song_id , datetime . datetime . now ()) ) self . conn . commit () logging . info ( \"Inserted album artist {} with song_id {} into album_artists table\" . format ( artist_name , song_id )) return True def insert_song_artist ( self , artist_name , song_id ) -> bool : \"\"\" insert_song_artist Insert a song_artist into the database, returns True if successful, False if not. Only insert if the song_artist does not already exist Args: artist_name (_type_): name of the song artist song_id (_type_): song_id of the song Returns: bool: True if successful, False if not \"\"\" logging . info ( \"Attempting to insert song artist {} with song_id {} into song_artists table\" . format ( artist_name , song_id )) cursor = self . conn . cursor () # cursor.execute( # \"\"\"INSERT INTO song_artists (artist_name, song_id, dt_added) # SELECT ?, ?, ? WHERE NOT EXISTS ( # SELECT 1 FROM song_artists WHERE artist_name = ? AND song_id = ? # );\"\"\", # (artist_name, song_id, datetime.datetime.now(), artist_name, song_id) # ) # check if song_artist already exists cursor . execute ( \"\"\"SELECT 1 FROM song_artists WHERE artist_name = ? AND song_id = ?;\"\"\" , ( artist_name , song_id ) ) if cursor . fetchone (): logging . warning ( \"Song artist {} with song_id {} already exists in song_artists table\" . format ( artist_name , song_id )) return False cursor . execute ( \"\"\"INSERT INTO song_artists (artist_name, song_id, dt_added) VALUES (?, ?, ?);\"\"\" , ( artist_name , song_id , datetime . datetime . now ()) ) self . conn . commit () logging . info ( \"Inserted song artist {} with song_id {} into song_artists table\" . format ( artist_name , song_id )) return True def insert_composer ( self , composer_name , song_id ) -> bool : \"\"\" insert_composer Insert a composer into the database, returns True if successful, False if not. Only insert if the composer does not already exist Args: composer_name (_type_): name of the composer song_id (_type_): song_id of the song Returns: bool: True if successful, False if not \"\"\" logging . info ( \"Attempting to insert composer {} with song_id {} into composers table\" . format ( composer_name , song_id )) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT 1 FROM composers WHERE composer_name = ? AND song_id = ?;\"\"\" , ( composer_name , song_id ) ) if cursor . fetchone (): logging . warning ( \"Composer {} with song_id {} already exists in composers table\" . format ( composer_name , song_id )) return False cursor . execute ( \"\"\"INSERT INTO composers (composer_name, song_id, dt_added) VALUES (?, ?, ?);\"\"\" , ( composer_name , song_id , datetime . datetime . now ()) ) self . conn . commit () logging . info ( \"Inserted composer {} with song_id {} into composers table\" . format ( composer_name , song_id )) return True def insert_genre ( self , genre_name , song_id ) -> bool : \"\"\"Insert a genre into the database, returns True if successful, False if not. Only insert if the genre does not already exist.\"\"\" logging . warning ( \"Inserting genre {} with song_id {} into genres table\" . format ( genre_name , song_id )) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT 1 FROM genres WHERE genre_name = ? AND song_id = ?;\"\"\" , ( genre_name , song_id ) ) if cursor . fetchone (): logging . info ( \"Genre {} with song_id {} already exists in genres table\" . format ( genre_name , song_id )) return False cursor . execute ( \"\"\"INSERT INTO genres (genre_name, song_id, dt_added) VALUES (?, ?, ?);\"\"\" , ( genre_name , song_id , datetime . datetime . now ()) ) self . conn . commit () logging . info ( \"Inserted genre {} with song_id {} into genres table\" . format ( genre_name , song_id )) return True # IMPORTANT: FUNCTION BELOW! def populate_database ( self , soundfiles_path = config . SOUNDFILES_PATH ): \"\"\" populate_database Populate the database using the data from the soundfiles in the SOUNDFILES_PATH directory \"\"\" # fetch all the files from config.SOUNDFILES_PATH soundfiles = os . listdir ( soundfiles_path ) for file in soundfiles : # get path of file file_path = os . path . join ( soundfiles_path , file ) # get metadata from file parser = songparser . SongMetadata ( filepath = file_path ) # get the song data and insert it into the database song_data = parser . get_song_table_data () song_id = None if song_data is not None : self . insert_song ( ** song_data ) song_id = song_data [ \"song_id\" ] else : logging . error ( f \"Could not get song data for file: { file_path } \" ) continue # get the artist data and insert it into the database album_artist_data = parser . get_album_artist_data () if album_artist_data is not None : for artist in album_artist_data : self . insert_album_artist ( artist , song_id ) song_artist_data = parser . get_song_artist_data () if song_artist_data is not None : for artist in song_artist_data : self . insert_song_artist ( artist , song_id ) composer_data = parser . get_composer_data () if composer_data is not None : for composer in composer_data : self . insert_composer ( composer , song_id ) genre_data = parser . get_genre_data () if genre_data is not None : for genre in genre_data : self . insert_genre ( genre , song_id ) # ------------------------------------------------------------------------------------------------------------ # ------------------------------------------------------------------------------------------------------------ # Backup and Restore # ------------------------------------------------------------------------------------------------------------ # ------------------------------------------------------------------------------------------------------------ def backup_database ( self ) -> bool : \"\"\" backup_database Backup the database to the path specified in config.DATABASE_BACKUP_PATH Returns: bool: True if successful, False if not \"\"\" logging . info ( \"Backing up database\" ) # Zip the database file and name it with the current date # then move it to config.DATABASE_BACKUP_PATH # database is at config.DATABASE_PATH with zipfile . ZipFile ( f \" { config . DATABASE_BACKUP_PATH } / { datetime . datetime . now () . strftime ( '%Y-%m- %d %H-%M-%S' ) } .zip\" , 'w' ) as zip : zip . write ( config . DATABASE_PATH , arcname = \"analytics.db\" ) logging . info ( \"Backed up database\" ) return True","title":"AnalyticsDBHandler"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.__init__","text":"init Initialize the database handler. Creates the database at the path specified in config.py Parameters: Name Type Description Default debug_path str Path to the database for debug. Defaults to None. None Source code in src\\core\\analyticsdb.py 28 29 30 31 32 33 34 35 36 37 38 def __init__ ( self , debug_path = None ) -> None : \"\"\" __init__ Initialize the database handler. Creates the database at the path specified in config.py Args: debug_path (str, optional): Path to the database for debug. Defaults to None. \"\"\" if debug_path is None : self . conn = sqlite3 . connect ( config . DATABASE_PATH ) else : self . conn = sqlite3 . connect ( debug_path )","title":"__init__()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.backup_database","text":"backup_database Backup the database to the path specified in config.DATABASE_BACKUP_PATH Returns: Name Type Description bool bool True if successful, False if not Source code in src\\core\\analyticsdb.py 1846 1847 1848 1849 1850 1851 1852 1853 1854 1855 1856 1857 1858 1859 1860 1861 1862 1863 def backup_database ( self ) -> bool : \"\"\" backup_database Backup the database to the path specified in config.DATABASE_BACKUP_PATH Returns: bool: True if successful, False if not \"\"\" logging . info ( \"Backing up database\" ) # Zip the database file and name it with the current date # then move it to config.DATABASE_BACKUP_PATH # database is at config.DATABASE_PATH with zipfile . ZipFile ( f \" { config . DATABASE_BACKUP_PATH } / { datetime . datetime . now () . strftime ( '%Y-%m- %d %H-%M-%S' ) } .zip\" , 'w' ) as zip : zip . write ( config . DATABASE_PATH , arcname = \"analytics.db\" ) logging . info ( \"Backed up database\" ) return True","title":"backup_database()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.clear_album_artists_table","text":"clear_album_artists_table Clears the album_artists table in the database. Source code in src\\core\\analyticsdb.py 326 327 328 329 330 331 332 333 334 def clear_album_artists_table ( self ): \"\"\" clear_album_artists_table Clears the album_artists table in the database. \"\"\" logging . info ( \"Clearing album_artists table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM album_artists;\" ) self . conn . commit () logging . info ( \"Cleared album_artists table\" )","title":"clear_album_artists_table()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.clear_all_tables","text":"Clear all the tables, returns True if successful, False if not. Source code in src\\core\\analyticsdb.py 357 358 359 360 361 362 363 364 365 366 367 368 369 def clear_all_tables ( self ) -> bool : \"\"\"Clear all the tables, returns True if successful, False if not.\"\"\" logging . info ( \"Clearing all tables\" ) self . clear_songs_table () self . clear_plays_table () self . clear_playlists_table () self . clear_playlists_songs_table () self . clear_song_artists_table () self . clear_album_artists_table () self . clear_composers_table () self . clear_genres_table () logging . info ( \"Cleared all tables\" ) return True","title":"clear_all_tables()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.clear_composers_table","text":"clear_composers_table Clears the composers table in the database. Source code in src\\core\\analyticsdb.py 336 337 338 339 340 341 342 343 344 def clear_composers_table ( self ): \"\"\" clear_composers_table Clears the composers table in the database. \"\"\" logging . info ( \"Clearing composers table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM composers;\" ) self . conn . commit () logging . info ( \"Cleared composers table\" )","title":"clear_composers_table()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.clear_genres_table","text":"clear_genres_table Clears the genres table in the database. Source code in src\\core\\analyticsdb.py 346 347 348 349 350 351 352 353 354 def clear_genres_table ( self ): \"\"\" clear_genres_table Clears the genres table in the database. \"\"\" logging . info ( \"Clearing genres table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM genres;\" ) self . conn . commit () logging . info ( \"Cleared genres table\" )","title":"clear_genres_table()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.clear_playlists_songs_table","text":"clear_playlists_songs_table Clears the playlists_songs table in the database. Source code in src\\core\\analyticsdb.py 306 307 308 309 310 311 312 313 314 def clear_playlists_songs_table ( self ): \"\"\" clear_playlists_songs_table Clears the playlists_songs table in the database. \"\"\" logging . info ( \"Clearing playlists_songs table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM playlists_songs;\" ) self . conn . commit () logging . info ( \"Cleared playlists_songs table\" )","title":"clear_playlists_songs_table()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.clear_playlists_table","text":"clear_playlists_table Clears the playlists table in the database. Source code in src\\core\\analyticsdb.py 296 297 298 299 300 301 302 303 304 def clear_playlists_table ( self ): \"\"\" clear_playlists_table Clears the playlists table in the database. \"\"\" logging . info ( \"Clearing playlists table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM playlists;\" ) self . conn . commit () logging . info ( \"Cleared playlists table\" )","title":"clear_playlists_table()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.clear_plays_table","text":"clear_plays_table Clears the plays table in the database. Source code in src\\core\\analyticsdb.py 286 287 288 289 290 291 292 293 294 def clear_plays_table ( self ): \"\"\" clear_plays_table Clears the plays table in the database. \"\"\" logging . info ( \"Clearing plays table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM plays;\" ) self . conn . commit () logging . info ( \"Cleared plays table\" )","title":"clear_plays_table()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.clear_song_artists_table","text":"clear_song_artists_table Clears the song_artists table in the database. Source code in src\\core\\analyticsdb.py 316 317 318 319 320 321 322 323 324 def clear_song_artists_table ( self ): \"\"\" clear_song_artists_table Clears the song_artists table in the database. \"\"\" logging . info ( \"Clearing song_artists table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM song_artists;\" ) self . conn . commit () logging . info ( \"Cleared song_artists table\" )","title":"clear_song_artists_table()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.clear_songs_table","text":"clear_songs_table Clears the songs table in the database. Source code in src\\core\\analyticsdb.py 276 277 278 279 280 281 282 283 284 def clear_songs_table ( self ): \"\"\" clear_songs_table Clears the songs table in the database. \"\"\" logging . info ( \"Clearing songs table\" ) cursor = self . conn . cursor () cursor . execute ( \"DELETE FROM songs;\" ) self . conn . commit () logging . info ( \"Cleared songs table\" )","title":"clear_songs_table()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.create_album_artists_table","text":"Create the album_artists table, returns True if successful, False if not. Source code in src\\core\\analyticsdb.py 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 def create_album_artists_table ( self ): \"\"\"Create the album_artists table, returns True if successful, False if not.\"\"\" try : # Album_id is a foreign key to the songs table logging . info ( \"Creating album_artists table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS album_artists ( artist_name TEXT NOT NULL, song_id TEXT NOT NULL, dt_added TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created album_artists table\" ) except : self . raise_table_not_created ( \"album_artists\" , \"unable to create table\" )","title":"create_album_artists_table()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.create_all_tables","text":"Create all the tables, returns True if successful, False if not. Source code in src\\core\\analyticsdb.py 256 257 258 259 260 261 262 263 264 265 266 267 def create_all_tables ( self ): \"\"\"Create all the tables, returns True if successful, False if not.\"\"\" logging . info ( \"Creating all tables\" ) self . create_songs_table () self . create_plays_table () self . create_playlists_table () self . create_playlists_songs_table () self . create_song_artists_table () self . create_album_artists_table () self . create_composers_table () self . create_genres_table () logging . info ( \"Created all tables\" )","title":"create_all_tables()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.create_composers_table","text":"create_composers_table Creates the composers table in the database. Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 def create_composers_table ( self ) -> bool : \"\"\" create_composers_table Creates the composers table in the database. Returns: bool: True if successful, False if not. \"\"\" try : # Song_id is a foreign key to the songs table logging . info ( \"Creating composers table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS composers ( composer_name TEXT NOT NULL, song_id TEXT NOT NULL, dt_added TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created composers table\" ) except : self . raise_table_not_created ( \"composers\" , \"unable to create table\" )","title":"create_composers_table()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.create_genres_table","text":"create_genres_table Creates the genres table in the database. Source code in src\\core\\analyticsdb.py 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 def create_genres_table ( self ): \"\"\" create_genres_table Creates the genres table in the database. \"\"\" try : # Song_id is a foreign key to the songs table logging . info ( \"Creating genres table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS genres ( genre_name TEXT NOT NULL, song_id TEXT NOT NULL, dt_added TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created genres table\" ) except : self . raise_table_not_created ( \"genres\" , \"unable to create table\" )","title":"create_genres_table()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.create_playlists_songs_table","text":"create_playlists_songs_table Creates the playlists_songs table in the database. Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 def create_playlists_songs_table ( self ) -> bool : \"\"\" create_playlists_songs_table Creates the playlists_songs table in the database. Returns: bool: True if successful, False if not. \"\"\" try : # Song_id is a foreign key to the songs table logging . info ( \"Creating playlists_songs table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS playlists_songs ( playlist_id INTEGER NOT NULL, song_id TEXT NOT NULL, added_dt TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created playlists_songs table\" ) except : self . raise_table_not_created ( \"playlists_songs\" , \"unable to create table\" )","title":"create_playlists_songs_table()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.create_playlists_table","text":"create_playlists_table Creates the playlists table in the database. Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 def create_playlists_table ( self ) -> bool : \"\"\" create_playlists_table Creates the playlists table in the database. Returns: bool: True if successful, False if not. \"\"\" try : logging . info ( \"Creating playlists table\" ) cursor = self . conn . cursor () # description is a text that is cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS playlists ( playlist_id INTEGER PRIMARY KEY AUTOINCREMENT, playlist_name TEXT NOT NULL, playlist_desc TEXT, created_dt TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created playlists table\" ) except : self . raise_table_not_created ( \"playlists\" , \"unable to create table\" )","title":"create_playlists_table()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.create_plays_table","text":"create_plays_table Creates the plays table in the database. Source code in src\\core\\analyticsdb.py 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 def create_plays_table ( self ): \"\"\" create_plays_table Creates the plays table in the database. \"\"\" try : logging . info ( \"Creating plays table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS plays ( play_id INTEGER PRIMARY KEY AUTOINCREMENT, song_title TEXT NOT NULL, song_primary_artist TEXT NOT NULL, filesize BIGINT, start_dt TEXT NOT NULL, end_dt TEXT NOT NULL, song_id TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created plays table\" ) except : self . raise_table_not_created ( \"plays\" , \"unable to create table\" )","title":"create_plays_table()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.create_song_artists_table","text":"create_song_artists_table Creates the song_artists table in the database. Source code in src\\core\\analyticsdb.py 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 def create_song_artists_table ( self ): \"\"\" create_song_artists_table Creates the song_artists table in the database. \"\"\" try : # Song_id is a foreign key to the songs table logging . info ( \"Creating song_artists table\" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS song_artists ( artist_name TEXT NOT NULL, song_id TEXT NOT NULL, dt_added TEXT NOT NULL );\"\"\" ) self . conn . commit () logging . info ( \"Created song_artists table\" ) except : self . raise_table_not_created ( \"song_artists\" , \"unable to create table\" )","title":"create_song_artists_table()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.create_songs_table","text":"create_songs_table Creates the songs table in the database. Source code in src\\core\\analyticsdb.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 def create_songs_table ( self ): \"\"\" create_songs_table Creates the songs table in the database. \"\"\" try : logging . info ( \"Creating songs table\" ) cursor = self . conn . cursor () # This is going to be a LOT of data, make a table with the following: # Create the table cursor . execute ( \"\"\"CREATE TABLE IF NOT EXISTS songs ( song_id TEXT PRIMARY KEY, filepath TEXT, filesize BIGINT, padding INTEGER, album_artwork_bit_depth INTEGER, album_artwork_colors INTEGER, album_artwork_height INTEGER, album_artwork_width INTEGER, bit_depth INTEGER, bitrate INTEGER, channels INTEGER, duration INTEGER, sample_rate INTEGER, album TEXT, barcode TEXT, date_created TEXT, disc_number INTEGER, disc_total INTEGER, isrc TEXT, itunesadvisory TEXT, length INTEGER, publisher TEXT, rating INTEGER, title TEXT, track_number INTEGER, track_total INTEGER, source TEXT, main_artist TEXT )\"\"\" ) self . conn . commit () logging . info ( \"Created songs table\" ) except : self . raise_table_not_created ( \"song\" , \"unable to create table\" )","title":"create_songs_table()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.delete_album_artist_by_artist_album_id","text":"Delete an album from an artist by its ID. Parameters: Name Type Description Default artist_id int ID of the artist to delete the album from. required album_id int ID of the album to delete. required Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 def delete_album_artist_by_artist_album_id ( self , artist_id : int , album_id : int ) -> bool : \"\"\"Delete an album from an artist by its ID. Args: artist_id (int): ID of the artist to delete the album from. album_id (int): ID of the album to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting album from artist by ID: { album_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM albums_artists WHERE artist_id = ? AND album_id = ?;\"\"\" , ( artist_id , album_id ) ) self . conn . commit () logging . info ( f \"Deleted album from artist by ID: { album_id } \" ) return True","title":"delete_album_artist_by_artist_album_id()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.delete_composer_by_name_song_id","text":"Delete a composer from a song by its name. Parameters: Name Type Description Default composer_name str Name of the composer to delete the song from. required song_id str ID of the song to delete. required Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 def delete_composer_by_name_song_id ( self , composer_name : str , song_id : str ) -> bool : \"\"\"Delete a composer from a song by its name. Args: composer_name (str): Name of the composer to delete the song from. song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting composer from song by name: { composer_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM songs_composers WHERE composer_id = (SELECT composer_id FROM composers WHERE composer_name = ?) AND song_id = ?;\"\"\" , ( composer_name , song_id ) ) self . conn . commit () logging . info ( f \"Deleted composer from song by name: { composer_name } \" ) return True","title":"delete_composer_by_name_song_id()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.delete_database","text":"Delete the database, returns True if successful, False if not. Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 371 372 373 374 375 376 377 378 379 380 def delete_database ( self ) -> bool : \"\"\"Delete the database, returns True if successful, False if not. Returns: bool: True if successful, False if not. \"\"\" logging . info ( \"Deleting database\" ) os . remove ( config . DATABASE_PATH ) logging . info ( \"Deleted database\" ) return True","title":"delete_database()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.delete_genre_by_name_song_id","text":"Delete a genre from a song by its name. Parameters: Name Type Description Default genre_name str Name of the genre to delete the song from. required song_id str ID of the song to delete. required Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 577 def delete_genre_by_name_song_id ( self , genre_name : str , song_id : str ) -> bool : \"\"\"Delete a genre from a song by its name. Args: genre_name (str): Name of the genre to delete the song from. song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting genre from song by name: { genre_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM songs_genres WHERE genre_id = (SELECT genre_id FROM genres WHERE genre_name = ?) AND song_id = ?;\"\"\" , ( genre_name , song_id ) ) self . conn . commit () logging . info ( f \"Deleted genre from song by name: { genre_name } \" ) return True","title":"delete_genre_by_name_song_id()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.delete_playlist_by_id","text":"Delete a playlist from the database by its ID. Parameters: Name Type Description Default playlist_id int ID of the playlist to delete. required Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 def delete_playlist_by_id ( self , playlist_id : int ) -> bool : \"\"\"Delete a playlist from the database by its ID. Args: playlist_id (int): ID of the playlist to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting playlist by ID: { playlist_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM playlists WHERE playlist_id = ?;\"\"\" , ( playlist_id ,) ) self . conn . commit () logging . info ( f \"Deleted playlist by ID: { playlist_id } \" ) return True","title":"delete_playlist_by_id()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.delete_playlist_by_name","text":"Delete a playlist from the database by its name. Parameters: Name Type Description Default playlist_name str Name of the playlist to delete. required Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 def delete_playlist_by_name ( self , playlist_name : str ) -> bool : \"\"\"Delete a playlist from the database by its name. Args: playlist_name (str): Name of the playlist to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting playlist by name: { playlist_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM playlists WHERE playlist_name = ?;\"\"\" , ( playlist_name ,) ) self . conn . commit () logging . info ( f \"Deleted playlist by name: { playlist_name } \" ) return True","title":"delete_playlist_by_name()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.delete_playlist_song_by_id","text":"Delete a song from a playlist by its ID. Parameters: Name Type Description Default playlist_id int ID of the playlist to delete the song from. required song_id str ID of the song to delete. required Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 def delete_playlist_song_by_id ( self , playlist_id : int , song_id : str ) -> bool : \"\"\"Delete a song from a playlist by its ID. Args: playlist_id (int): ID of the playlist to delete the song from. song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting song from playlist by ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM playlists_songs WHERE playlist_id = ? AND song_id = ?;\"\"\" , ( playlist_id , song_id ) ) self . conn . commit () logging . info ( f \"Deleted song from playlist by ID: { song_id } \" ) return True","title":"delete_playlist_song_by_id()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.delete_playlist_song_by_name","text":"Delete a song from a playlist by its name. Parameters: Name Type Description Default playlist_name str Name of the playlist to delete the song from. required song_name str Name of the song to delete. required Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 def delete_playlist_song_by_name ( self , playlist_name : str , song_name : str ) -> bool : \"\"\"Delete a song from a playlist by its name. Args: playlist_name (str): Name of the playlist to delete the song from. song_name (str): Name of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting song from playlist by name: { song_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM playlists_songs WHERE playlist_id = (SELECT playlist_id FROM playlists WHERE playlist_name = ?) AND song_id = (SELECT song_id FROM songs WHERE song_name = ?);\"\"\" , ( playlist_name , song_name ) ) self . conn . commit () logging . info ( f \"Deleted song from playlist by name: { song_name } \" ) return True","title":"delete_playlist_song_by_name()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.delete_playlist_song_by_playlist_id_song_id","text":"Delete a song from a playlist by its ID. Parameters: Name Type Description Default playlist_id int ID of the playlist to delete the song from. required song_id str ID of the song to delete. required Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 def delete_playlist_song_by_playlist_id_song_id ( self , playlist_id : int , song_id : str ) -> bool : \"\"\"Delete a song from a playlist by its ID. Args: playlist_id (int): ID of the playlist to delete the song from. song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting song from playlist by ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM playlists_songs WHERE playlist_id = ? AND song_id = ?;\"\"\" , ( playlist_id , song_id ) ) self . conn . commit () logging . info ( f \"Deleted song from playlist by ID: { song_id } \" ) return True","title":"delete_playlist_song_by_playlist_id_song_id()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.delete_song_artist_by_artist_song_id","text":"Delete a song from a playlist by its ID. Parameters: Name Type Description Default artist_id int ID of the artist to delete the song from. required song_id str ID of the song to delete. required Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 def delete_song_artist_by_artist_song_id ( self , artist_id : int , song_id : str ) -> bool : \"\"\"Delete a song from a playlist by its ID. Args: artist_id (int): ID of the artist to delete the song from. song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting song from artist by ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM songs_artists WHERE artist_id = ? AND song_id = ?;\"\"\" , ( artist_id , song_id ) ) self . conn . commit () logging . info ( f \"Deleted song from artist by ID: { song_id } \" ) return True","title":"delete_song_artist_by_artist_song_id()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.delete_song_by_id","text":"Delete a song from the database by its ID. Parameters: Name Type Description Default song_id str ID of the song to delete. required Returns: Name Type Description bool bool True if successful, False if not. Source code in src\\core\\analyticsdb.py 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 def delete_song_by_id ( self , song_id : str ) -> bool : \"\"\"Delete a song from the database by its ID. Args: song_id (str): ID of the song to delete. Returns: bool: True if successful, False if not. \"\"\" logging . info ( f \"Deleting song by ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"DELETE FROM songs WHERE song_id = ?;\"\"\" , ( song_id ,) ) self . conn . commit () logging . info ( f \"Deleted song by ID: { song_id } \" ) return True","title":"delete_song_by_id()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_album_artists_of_song","text":"get_album_artists_of_song Get all the artists of a song, returns a list of names of Artists. Parameters: Name Type Description Default song_id str ID of song required Returns: Type Description List [ str ] List[str]: list of names of artists Source code in src\\core\\analyticsdb.py 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 def get_album_artists_of_song ( self , song_id : str ) -> List [ str ]: \"\"\" get_album_artists_of_song Get all the artists of a song, returns a list of names of Artists. Args: song_id (str): ID of song Returns: List[str]: list of names of artists \"\"\" logging . info ( f \"Getting album artists by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM album_artists WHERE song_id = ?;\"\"\" , ( song_id ,) ) artists = cursor . fetchall () album_artists = [] for artist in artists : album_artists . append ( artist [ 0 ]) logging . info ( f \"Got album artists by song ID: { song_id } \" ) return album_artists","title":"get_album_artists_of_song()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_all_album_artists","text":"get_all_album_artists Get all the album artists in the database, returns a list of strings Parameters: Name Type Description Default no_duplicates bool remove duplicates. Defaults to True. True Returns: Type Description List [ str ] List[str]: list of strings Source code in src\\core\\analyticsdb.py 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 def get_all_album_artists ( self , no_duplicates = True ) -> List [ str ]: \"\"\" get_all_album_artists Get all the album artists in the database, returns a list of strings Args: no_duplicates (bool, optional): remove duplicates. Defaults to True. Returns: List[str]: list of strings \"\"\" # artists can be duplicated, so we need to remove duplicates from album_artists logging . info ( \"Getting all album artists\" ) cursor = self . conn . cursor () album_artists = [] if no_duplicates : cursor . execute ( \"SELECT DISTINCT artist_name FROM album_artists;\" ) else : cursor . execute ( \"SELECT artist_name FROM album_artists;\" ) album_artists = cursor . fetchall () logging . info ( \"Got all album artists\" ) album_artists = [ artist [ 0 ] for artist in album_artists ] return album_artists","title":"get_all_album_artists()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_all_album_names","text":"get_all_album_names Get all the album names in the database, returns a list of strings Returns: Type Description List [ str ] List[str]: list of strings Source code in src\\core\\analyticsdb.py 1409 1410 1411 1412 1413 1414 1415 1416 1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 def get_all_album_names ( self ) -> List [ str ]: \"\"\" get_all_album_names Get all the album names in the database, returns a list of strings Returns: List[str]: list of strings \"\"\" logging . info ( \"Getting all album names\" ) cursor = self . conn . cursor () # all the albums are a column in the songs table cursor . execute ( \"SELECT album FROM songs;\" ) albums = cursor . fetchall () albums = [ album [ 0 ] for album in albums ] # remove duplicates albums = list ( set ( albums )) logging . info ( \"Got all album names\" ) return albums","title":"get_all_album_names()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_all_columns_from_table","text":"get_all_columns_from_table Get all the columns from a table, returns a list of strings Parameters: Name Type Description Default table_name str Name of the table required Returns: Type Description List [ str ] List[str]: list of strings Source code in src\\core\\analyticsdb.py 1390 1391 1392 1393 1394 1395 1396 1397 1398 1399 1400 1401 1402 1403 1404 1405 1406 1407 def get_all_columns_from_table ( self , table_name : str ) -> List [ str ]: \"\"\" get_all_columns_from_table Get all the columns from a table, returns a list of strings Args: table_name (str): Name of the table Returns: List[str]: list of strings \"\"\" logging . info ( \"Getting all columns from table {} \" . format ( table_name )) cursor = self . conn . cursor () cursor . execute ( \"PRAGMA table_info( {} );\" . format ( table_name )) columns = cursor . fetchall () columns = [ column [ 1 ] for column in columns ] logging . info ( \"Got all columns from table {} \" . format ( table_name )) return columns","title":"get_all_columns_from_table()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_all_composers","text":"get_all_composers Get all the composers in the database, returns a list of strings Parameters: Name Type Description Default no_duplicates bool remove duplicates. Defaults to True. True Returns: Type Description List [ str ] List[str]: list of strings Source code in src\\core\\analyticsdb.py 1268 1269 1270 1271 1272 1273 1274 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 def get_all_composers ( self , no_duplicates = True ) -> List [ str ]: \"\"\" get_all_composers Get all the composers in the database, returns a list of strings Args: no_duplicates (bool, optional): remove duplicates. Defaults to True. Returns: List[str]: list of strings \"\"\" # composers can be duplicated, so we need to remove duplicates from composers logging . info ( \"Getting all composers\" ) cursor = self . conn . cursor () if no_duplicates : cursor . execute ( \"SELECT DISTINCT composer_name FROM composers;\" ) else : cursor . execute ( \"SELECT composer_name FROM composers;\" ) composers = cursor . fetchall () logging . info ( \"Got all composers\" ) composers = [ composer [ 0 ] for composer in composers ] return composers","title":"get_all_composers()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_all_genres","text":"get_all_genres Get all the genres in the database, returns a list of strings Parameters: Name Type Description Default no_duplicates bool remove duplicates. Defaults to True. True Returns: Type Description List [ str ] List[str]: list of strings Source code in src\\core\\analyticsdb.py 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 def get_all_genres ( self , no_duplicates = True ) -> List [ str ]: \"\"\" get_all_genres Get all the genres in the database, returns a list of strings Args: no_duplicates (bool, optional): remove duplicates. Defaults to True. Returns: List[str]: list of strings \"\"\" # genres can be duplicated, so we need to remove duplicates from genres logging . info ( \"Getting all genres\" ) cursor = self . conn . cursor () if no_duplicates : cursor . execute ( \"SELECT DISTINCT genre_name FROM genres;\" ) else : cursor . execute ( \"SELECT genre_name FROM genres;\" ) genres = cursor . fetchall () logging . info ( \"Got all genres\" ) genres = [ genre [ 0 ] for genre in genres ] return genres","title":"get_all_genres()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_all_playlist_names","text":"get_all_playlist_names Get all the playlist names in the database, returns a list of strings Returns: Type Description List [ str ] List[str]: list of strings Source code in src\\core\\analyticsdb.py 1314 1315 1316 1317 1318 1319 1320 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 def get_all_playlist_names ( self ) -> List [ str ]: \"\"\" get_all_playlist_names Get all the playlist names in the database, returns a list of strings Returns: List[str]: list of strings \"\"\" logging . info ( \"Getting all playlist names\" ) cursor = self . conn . cursor () cursor . execute ( \"SELECT playlist_name FROM playlists;\" ) playlist_names = cursor . fetchall () # remove the tuple from each playlist name playlist_names = [ playlist_name [ 0 ] for playlist_name in playlist_names ] logging . info ( \"Got all playlist names\" ) return playlist_names","title":"get_all_playlist_names()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_all_playlist_songs","text":"get_all_playlist_songs Get all the playlist songs in the database, returns a list of dictionaries Returns: Type Description List [ dict ] List[dict]: list of dictionaries [song_name, file_size, id] Source code in src\\core\\analyticsdb.py 1332 1333 1334 1335 1336 1337 1338 1339 1340 1341 1342 1343 1344 1345 1346 1347 1348 1349 1350 1351 1352 1353 1354 1355 1356 1357 1358 def get_all_playlist_songs ( self ) -> List [ dict ]: \"\"\" get_all_playlist_songs Get all the playlist songs in the database, returns a list of dictionaries Returns: List[dict]: list of dictionaries [song_name, file_size, id] \"\"\" playlist_names = self . get_all_playlist_names () playlist_songs = {} for playlist_name in playlist_names : # we only want the song_name, file_size, and id songs = self . get_songs_in_playlist ( playlist_name ) playlist_values = [] for song_data in songs : song_values = { \"song_name\" : song_data [ \"title\" ], \"file_size\" : song_data [ \"filesize\" ], } song_id = self . get_song_id_by_title_filesize ( song_values [ \"song_name\" ], song_values [ \"file_size\" ]) song_values [ \"id\" ] = song_id playlist_values . append ( song_values ) playlist_songs [ playlist_name ] = playlist_values return playlist_songs","title":"get_all_playlist_songs()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_all_plays","text":"get_all_plays Get all the plays in the database, returns a list of the plays Returns: Type Description List [ dict ] List[dict]: list of dictionaries Source code in src\\core\\analyticsdb.py 1209 1210 1211 1212 1213 1214 1215 1216 1217 1218 1219 1220 1221 1222 def get_all_plays ( self ) -> List [ dict ]: \"\"\" get_all_plays Get all the plays in the database, returns a list of the plays Returns: List[dict]: list of dictionaries \"\"\" logging . info ( \"Getting all plays\" ) cursor = self . conn . cursor () cursor . execute ( \"SELECT * FROM plays;\" ) plays = cursor . fetchall () logging . info ( \"Got all plays\" ) return plays","title":"get_all_plays()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_all_song_artists","text":"get_all_song_artists Get all the song artists in the database, returns a list of strings Returns: Type Description List [ str ] List[str]: list of strings Source code in src\\core\\analyticsdb.py 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 def get_all_song_artists ( self , no_duplicates = True ) -> List [ str ]: \"\"\" get_all_song_artists Get all the song artists in the database, returns a list of strings Returns: List[str]: list of strings \"\"\" # artists can be duplicated, so we need to remove duplicates from song_artists logging . info ( \"Getting all song artists\" ) cursor = self . conn . cursor () if no_duplicates : cursor . execute ( \"SELECT DISTINCT artist_name FROM song_artists;\" ) else : cursor . execute ( \"SELECT artist_name FROM song_artists;\" ) song_artists = cursor . fetchall () logging . info ( \"Got all song artists\" ) song_artists = [ artist [ 0 ] for artist in song_artists ] return song_artists","title":"get_all_song_artists()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_all_songs","text":"get_all_songs Get all the songs in the database, returns a list of Song objects Returns: Type Description List [ dict ] List[dict]: list of dictionaries Source code in src\\core\\analyticsdb.py 1162 1163 1164 1165 1166 1167 1168 1169 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 def get_all_songs ( self ) -> List [ dict ]: \"\"\" get_all_songs Get all the songs in the database, returns a list of Song objects Returns: List[dict]: list of dictionaries \"\"\" logging . info ( \"Getting all songs\" ) cursor = self . conn . cursor () cursor . execute ( \"SELECT * FROM songs;\" ) songs = cursor . fetchall () songs_return = [] for song in songs : song_table_data = { \"song_id\" : song [ 0 ], \"filepath\" : song [ 1 ], \"filesize\" : song [ 2 ], \"padding\" : song [ 3 ], \"album_artwork_bit_depth\" : song [ 4 ], \"album_artwork_colors\" : song [ 5 ], \"album_artwork_height\" : song [ 6 ], \"album_artwork_width\" : song [ 7 ], \"bit_depth\" : song [ 8 ], \"bitrate\" : song [ 9 ], \"channels\" : song [ 10 ], \"duration\" : song [ 11 ], \"sample_rate\" : song [ 12 ], \"album\" : song [ 13 ], \"barcode\" : song [ 14 ], \"date_created\" : song [ 15 ], \"disc_number\" : song [ 16 ], \"disc_total\" : song [ 17 ], \"isrc\" : song [ 18 ], \"itunesadvisory\" : song [ 19 ], \"length\" : song [ 20 ], \"publisher\" : song [ 21 ], \"rating\" : song [ 22 ], \"title\" : song [ 23 ], \"track_number\" : song [ 24 ], \"track_total\" : song [ 25 ], \"source\" : song [ 26 ], \"main_artist\" : song [ 27 ], } songs_return . append ( song_table_data ) return songs_return","title":"get_all_songs()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_all_songs_in_genre","text":"get_all_songs_in_genre Get all the songs in a genre, returns a list of dictionaries Parameters: Name Type Description Default genre_name str Name of the genre required Returns: Type Description List [ dict ] List[dict]: list of dictionaries Source code in src\\core\\analyticsdb.py 1360 1361 1362 1363 1364 1365 1366 1367 1368 1369 1370 1371 1372 1373 1374 1375 1376 1377 1378 1379 1380 1381 1382 1383 1384 1385 1386 1387 1388 def get_all_songs_in_genre ( self , genre_name : str ) -> List [ dict ]: \"\"\" get_all_songs_in_genre Get all the songs in a genre, returns a list of dictionaries Args: genre_name (str): Name of the genre Returns: List[dict]: list of dictionaries \"\"\" logging . info ( \"Getting all songs in genre {} \" . format ( genre_name )) cursor = self . conn . cursor () # get all song_id that matches the given genre_name in the genres table cursor . execute ( \"SELECT song_id FROM genres WHERE genre_name = ?;\" , ( genre_name ,)) song_ids = cursor . fetchall () song_ids = [ song_id [ 0 ] for song_id in song_ids ] # get all the songs that match the song_ids songs = [] for song_id in song_ids : song_data = self . get_song_by_id ( song_id ) songs . append ( song_data ) logging . info ( \"Got all songs in genre {} \" . format ( genre_name )) return songs","title":"get_all_songs_in_genre()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_all_tables","text":"get_all_tables Get all the tables in the database, returns a list of table names. Returns: Type Description List [ str ] List[str]: list of table names Source code in src\\core\\analyticsdb.py 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 def get_all_tables ( self ) -> List [ str ]: \"\"\" get_all_tables Get all the tables in the database, returns a list of table names. Returns: List[str]: list of table names \"\"\" logging . info ( \"Getting all tables\" ) cursor = self . conn . cursor () cursor . execute ( \"SELECT name FROM sqlite_master WHERE type='table';\" ) tables = cursor . fetchall () logging . info ( \"Got all tables\" ) return tables","title":"get_all_tables()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_composers_of_song","text":"get_composers_of_song Get all the composers of a song, returns a list of names of composers. Parameters: Name Type Description Default song_id str ID of song required Returns: Type Description List [ str ] List[str]: list of names of composers Source code in src\\core\\analyticsdb.py 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 def get_composers_of_song ( self , song_id : str ) -> List [ str ]: \"\"\" get_composers_of_song Get all the composers of a song, returns a list of names of composers. Args: song_id (str): ID of song Returns: List[str]: list of names of composers \"\"\" logging . info ( f \"Getting composers by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM composers WHERE song_id = ?;\"\"\" , ( song_id ,) ) composers = cursor . fetchall () song_composers = [] for composer in composers : song_composers . append ( composer [ 0 ]) logging . info ( f \"Got composers by song ID: { song_id } \" ) return song_composers","title":"get_composers_of_song()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_genres_of_song","text":"get_genres_of_song Get all the genres of a song, returns a list of names of genres. Parameters: Name Type Description Default song_id str ID of song required Returns: Type Description List [ str ] List[str]: list of names of genres Source code in src\\core\\analyticsdb.py 957 958 959 960 961 962 963 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 def get_genres_of_song ( self , song_id : str ) -> List [ str ]: \"\"\" get_genres_of_song Get all the genres of a song, returns a list of names of genres. Args: song_id (str): ID of song Returns: List[str]: list of names of genres \"\"\" logging . info ( f \"Getting song genres by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM genres WHERE song_id = ?;\"\"\" , ( song_id ,) ) genres = cursor . fetchall () song_genres = [] for genre in genres : song_genres . append ( genre [ 0 ]) logging . info ( f \"Got song genres by song ID: { song_id } \" ) return song_genres","title":"get_genres_of_song()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_play_by_id","text":"get_play_by_id Get play by ID. Parameters: Name Type Description Default play_id int ID of play required Returns: Name Type Description dict dict play object Source code in src\\core\\analyticsdb.py 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 def get_play_by_id ( self , play_id : int ) -> dict : \"\"\" get_play_by_id Get play by ID. Args: play_id (int): ID of play Returns: dict: play object \"\"\" logging . info ( f \"Getting play by ID: { play_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM plays WHERE play_id = ?;\"\"\" , ( play_id ,) ) play = cursor . fetchone () logging . info ( f \"Got play by ID: { play_id } \" ) play_data = { \"play_id\" : play [ 0 ], \"song_title\" : play [ 1 ], \"song_primary_artist\" : play [ 2 ], \"filesize\" : play [ 3 ], \"start_dt\" : play [ 4 ], \"end_dt\" : play [ 5 ], \"song_id\" : play [ 6 ] } return play_data","title":"get_play_by_id()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_play_information_from_song_id","text":"get_play_information_from_song_id Get play information from song ID. This is the song_title, song_primary_artist, and filesize Parameters: Name Type Description Default song_id str ID of song required Returns: Type Description Dict [ str , str ] Dict[str, str]: Dictionary of song_title, song_primary_artist, filesize, and song_id Source code in src\\core\\analyticsdb.py 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 851 852 def get_play_information_from_song_id ( self , song_id : str ) -> Dict [ str , str ]: \"\"\" get_play_information_from_song_id Get play information from song ID. This is the song_title, song_primary_artist, and filesize Args: song_id (str): ID of song Returns: Dict[str, str]: Dictionary of song_title, song_primary_artist, filesize, and song_id \"\"\" logging . info ( f \"Getting play information for song ID: { song_id } \" ) song_raw = self . get_song_by_id ( song_id ) song_values = { \"song_title\" : song_raw [ \"title\" ], \"song_primary_artist\" : song_raw [ \"main_artist\" ], \"filesize\" : song_raw [ \"filesize\" ], \"song_id\" : song_raw [ 'song_id' ] } logging . info ( f \"Got play information for song ID: { song_id } \" ) return song_values","title":"get_play_information_from_song_id()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_playlist_by_id","text":"get_playlist_by_id Get playlist by ID. Parameters: Name Type Description Default playlist_id int ID of playlist required Returns: Name Type Description dict dict Dictionary containing playlist data. {playlist_id, playlist_name, playlist_desc, created_dt} Source code in src\\core\\analyticsdb.py 719 720 721 722 723 724 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 def get_playlist_by_id ( self , playlist_id : int ) -> dict : \"\"\" get_playlist_by_id Get playlist by ID. Args: playlist_id (int): ID of playlist Returns: dict: Dictionary containing playlist data. {playlist_id, playlist_name, playlist_desc, created_dt} \"\"\" logging . info ( f \"Getting playlist by ID: { playlist_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM playlists WHERE playlist_id = ?;\"\"\" , ( playlist_id ,) ) playlist = cursor . fetchone () logging . info ( f \"Got playlist by ID: { playlist_id } \" ) playlist_data = {} playlist_data [ \"playlist_id\" ] = playlist [ 0 ] playlist_data [ \"playlist_name\" ] = playlist [ 1 ] playlist_data [ \"playlist_desc\" ] = playlist [ 2 ] playlist_data [ \"created_dt\" ] = playlist [ 3 ] return playlist_data","title":"get_playlist_by_id()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_playlist_id_by_name","text":"get_playlist_id_by_name Get ID of playlist by name. Parameters: Name Type Description Default playlist_name str Name of playlist required Returns: Name Type Description int int ID of playlist Source code in src\\core\\analyticsdb.py 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 def get_playlist_id_by_name ( self , playlist_name : str ) -> int : \"\"\" get_playlist_id_by_name Get ID of playlist by name. Args: playlist_name (str): Name of playlist Returns: int: ID of playlist \"\"\" logging . info ( f \"Getting playlist by name: { playlist_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM playlists WHERE playlist_name = ?;\"\"\" , ( playlist_name ,) ) playlist = cursor . fetchone () if playlist is None : return None logging . info ( f \"Got playlist by name: { playlist_name } \" ) return playlist [ 0 ]","title":"get_playlist_id_by_name()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_song_album_artists","text":"get_song_album_artists Get all the album artists of a song, returns a list of names. Parameters: Name Type Description Default song_id str ID of song required Returns: Type Description List [ str ] List[str]: list of names of album artists Source code in src\\core\\analyticsdb.py 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 def get_song_album_artists ( self , song_id : str ) -> List [ str ]: \"\"\" get_song_album_artists Get all the album artists of a song, returns a list of names. Args: song_id (str): ID of song Returns: List[str]: list of names of album artists \"\"\" logging . info ( f \"Getting song album artists by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM album_artists WHERE song_id = ?;\"\"\" , ( song_id ,) ) album_artists = cursor . fetchall () logging . info ( f \"Got song album artists by song ID: { song_id } \" ) return album_artists","title":"get_song_album_artists()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_song_artists","text":"get_song_artists Get all the artists of a song, returns a list of names of Artists. Parameters: Name Type Description Default song_id str ID of song required Returns: Type Description List [ str ] List[str]: list of names of artists Source code in src\\core\\analyticsdb.py 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 def get_song_artists ( self , song_id : str ) -> List [ str ]: \"\"\" get_song_artists Get all the artists of a song, returns a list of names of Artists. Args: song_id (str): ID of song Returns: List[str]: list of names of artists \"\"\" logging . info ( f \"Getting song artists by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM artists WHERE song_id = ?;\"\"\" , ( song_id ,) ) artists = cursor . fetchall () logging . info ( f \"Got song artists by song ID: { song_id } \" ) return artists","title":"get_song_artists()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_song_artists_of_song","text":"get_song_artists_of_song Get all the artists of a song, returns a list of names of Artists. Parameters: Name Type Description Default song_id str ID of song required Returns: Type Description List [ str ] List[str]: list of names of artists Source code in src\\core\\analyticsdb.py 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 def get_song_artists_of_song ( self , song_id : str ) -> List [ str ]: \"\"\" get_song_artists_of_song Get all the artists of a song, returns a list of names of Artists. Args: song_id (str): ID of song Returns: List[str]: list of names of artists \"\"\" logging . info ( f \"Getting song artists by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM song_artists WHERE song_id = ?;\"\"\" , ( song_id ,) ) artists = cursor . fetchall () song_artists = [] for artist in artists : song_artists . append ( artist [ 0 ]) logging . info ( f \"Got song artists by song ID: { song_id } \" ) return song_artists","title":"get_song_artists_of_song()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_song_by_id","text":"get_song_by_id Searches the song table for a song with the given ID. Parameters: Name Type Description Default song_id str ID of the song to search for. required Returns: Type Description List [ dict ] List[dict]: List of dictionaries containing the song data. Source code in src\\core\\analyticsdb.py 584 585 586 587 588 589 590 591 592 593 594 595 596 597 598 599 600 601 602 603 604 605 606 607 608 609 610 611 612 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 630 631 632 633 634 635 636 def get_song_by_id ( self , song_id : str ) -> List [ dict ]: \"\"\" get_song_by_id Searches the song table for a song with the given ID. Args: song_id (str): ID of the song to search for. Returns: List[dict]: List of dictionaries containing the song data. \"\"\" logging . info ( f \"Getting song by ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM songs WHERE song_id = ?;\"\"\" , ( song_id ,) ) song = cursor . fetchone () # copy the dict variable config.song_table_data song_table_data = config . song_table_data . copy () if song is None : return None song_table_data [ 'song_id' ] = song [ 0 ] song_table_data [ \"filepath\" ] = song [ 1 ] song_table_data [ \"filesize\" ] = song [ 2 ] song_table_data [ \"padding\" ] = song [ 3 ] song_table_data [ \"album_artwork_bit_depth\" ] = song [ 4 ] song_table_data [ \"album_artwork_colors\" ] = song [ 5 ] song_table_data [ \"album_artwork_height\" ] = song [ 6 ] song_table_data [ \"album_artwork_width\" ] = song [ 7 ] song_table_data [ \"bit_depth\" ] = song [ 8 ] song_table_data [ \"bitrate\" ] = song [ 9 ] song_table_data [ \"channels\" ] = song [ 10 ] song_table_data [ \"duration\" ] = song [ 11 ] song_table_data [ \"sample_rate\" ] = song [ 12 ] song_table_data [ \"album\" ] = song [ 13 ] song_table_data [ \"barcode\" ] = song [ 14 ] song_table_data [ \"date_created\" ] = song [ 15 ] song_table_data [ \"disc_number\" ] = song [ 16 ] song_table_data [ \"disc_total\" ] = song [ 17 ] song_table_data [ \"isrc\" ] = song [ 18 ] song_table_data [ \"itunesadvisory\" ] = song [ 19 ] song_table_data [ \"length\" ] = song [ 20 ] song_table_data [ \"publisher\" ] = song [ 21 ] song_table_data [ \"rating\" ] = song [ 22 ] song_table_data [ \"title\" ] = song [ 23 ] song_table_data [ \"track_number\" ] = song [ 24 ] song_table_data [ \"track_total\" ] = song [ 25 ] song_table_data [ \"source\" ] = song [ 26 ] song_table_data [ \"main_artist\" ] = song [ 27 ] return song_table_data","title":"get_song_by_id()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_song_composers","text":"get_song_composers Get all the composers of a song, returns a list of names. Parameters: Name Type Description Default song_id str ID of song required Returns: Type Description List [ str ] List[str]: list of names of composers Source code in src\\core\\analyticsdb.py 767 768 769 770 771 772 773 774 775 776 777 778 779 780 781 782 783 784 785 786 def get_song_composers ( self , song_id : str ) -> List [ str ]: \"\"\" get_song_composers Get all the composers of a song, returns a list of names. Args: song_id (str): ID of song Returns: List[str]: list of names of composers \"\"\" logging . info ( f \"Getting song composers by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM composers WHERE song_id = ?;\"\"\" , ( song_id ,) ) composers = cursor . fetchall () logging . info ( f \"Got song composers by song ID: { song_id } \" ) return composers","title":"get_song_composers()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_song_genres","text":"get_song_genres Get all the genres of a song, returns a list of names of genres. Parameters: Name Type Description Default song_id str ID of song required Returns: Type Description List [ str ] List[str]: list of names of genres Source code in src\\core\\analyticsdb.py 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 825 826 827 828 def get_song_genres ( self , song_id : str ) -> List [ str ]: \"\"\" get_song_genres Get all the genres of a song, returns a list of names of genres. Args: song_id (str): ID of song Returns: List[str]: list of names of genres \"\"\" logging . info ( f \"Getting song genres by song ID: { song_id } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM genres WHERE song_id = ?;\"\"\" , ( song_id ,) ) genres = cursor . fetchall () logging . info ( f \"Got song genres by song ID: { song_id } \" ) return genres","title":"get_song_genres()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_song_id_by_title_filesize","text":"get_song_id_by_title_filesize Searches the database to find the song ID by title and filesize. You want to use filesize because they're basically gurenteed to be unique. Parameters: Name Type Description Default title str Title of Song required filesize int Filesize of song (get these from the song object) required Returns: Name Type Description int int song_id of the song Source code in src\\core\\analyticsdb.py 638 639 640 641 642 643 644 645 646 647 648 649 650 651 652 653 654 655 656 657 658 659 660 661 662 663 def get_song_id_by_title_filesize ( self , title : str , filesize : int ) -> int : \"\"\" get_song_id_by_title_filesize Searches the database to find the song ID by title and filesize. You want to use filesize because they're basically gurenteed to be unique. Args: title (str): Title of Song filesize (int): Filesize of song (get these from the song object) Returns: int: song_id of the song \"\"\" logging . info ( f \"Getting song by title and filesize: { title } , { filesize } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM songs WHERE title = ? AND filesize = ?;\"\"\" , ( title , filesize ) ) # return the id of the song song = cursor . fetchone () if song is None : return None logging . info ( f \"Got song by title and filesize: { title } , { filesize } \" ) return song [ 0 ]","title":"get_song_id_by_title_filesize()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_songs_in_album","text":"get_songs_in_album Get all the songs in an album, returns a list of Song objects. Parameters: Name Type Description Default album_name str name of album required Returns: Type Description List [ dict ] List[dict]: list of Song objects Source code in src\\core\\analyticsdb.py 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 1000 1001 1002 1003 1004 1005 1006 1007 1008 def get_songs_in_album ( self , album_name : str ) -> List [ dict ]: \"\"\" get_songs_in_album Get all the songs in an album, returns a list of Song objects. Args: album_name (str): name of album Returns: List[dict]: list of Song objects \"\"\" logging . info ( f \"Getting songs in album: { album_name } \" ) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM songs WHERE album = ?;\"\"\" , ( album_name ,) ) songs = cursor . fetchall () song_list = [] for song in songs : song_list . append ({ \"song_title\" : song [ - 5 ], \"song_primary_artist\" : song [ - 1 ], \"filesize\" : song [ 2 ], \"song_id\" : song [ 0 ] }) logging . info ( f \"Got songs in album: { album_name } \" ) return song_list","title":"get_songs_in_album()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_songs_in_album_artist","text":"get_songs_in_album_artist Get all the songs in an album artist, returns a list of Song objects. Parameters: Name Type Description Default album_artist str name of album artist required Returns: Type Description List [ dict ] List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) Source code in src\\core\\analyticsdb.py 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 def get_songs_in_album_artist ( self , album_artist : str ) -> List [ dict ]: \"\"\" get_songs_in_album_artist Get all the songs in an album artist, returns a list of Song objects. Args: album_artist (str): name of album artist Returns: List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) \"\"\" logging . info ( f \"Getting songs in album artist: { album_artist } \" ) cursor = self . conn . cursor () # use table album_artists to get all songs by album artist cursor . execute ( \"\"\"SELECT * FROM album_artists WHERE artist_name = ?;\"\"\" , ( album_artist ,) ) songs = cursor . fetchall () song_list = [] for song in songs : song_data = self . get_song_by_id ( song [ 1 ]) song_list . append ({ \"song_title\" : song_data [ 'title' ], \"song_primary_artist\" : song_data [ 'main_artist' ], \"filesize\" : song_data [ 'filesize' ], \"song_id\" : song_data [ 'song_id' ] }) logging . info ( f \"Got songs in album artist: { album_artist } \" ) return song_list","title":"get_songs_in_album_artist()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_songs_in_composer","text":"get_songs_in_composer Get all the songs in a composer, returns a list of Song objects. Parameters: Name Type Description Default composer str name of composer required Returns: Type Description List [ dict ] List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) Source code in src\\core\\analyticsdb.py 1076 1077 1078 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 def get_songs_in_composer ( self , composer : str ) -> List [ dict ]: \"\"\" get_songs_in_composer Get all the songs in a composer, returns a list of Song objects. Args: composer (str): name of composer Returns: List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) \"\"\" logging . info ( f \"Getting songs in composer: { composer } \" ) cursor = self . conn . cursor () # use table composers to get all songs by composer cursor . execute ( \"\"\"SELECT * FROM composers WHERE composer_name = ?;\"\"\" , ( composer ,) ) songs = cursor . fetchall () song_list = [] for song in songs : song_data = self . get_song_by_id ( song [ 1 ]) song_list . append ({ \"song_title\" : song_data [ 'title' ], \"song_primary_artist\" : song_data [ 'main_artist' ], \"filesize\" : song_data [ 'filesize' ], \"song_id\" : song_data [ 'song_id' ] }) logging . info ( f \"Got songs in composer: { composer } \" ) return song_list","title":"get_songs_in_composer()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_songs_in_genre","text":"get_songs_in_genre Get all the songs in a genre, returns a list of Song objects. Parameters: Name Type Description Default genre str name of genre required Returns: Type Description List [ dict ] List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) Source code in src\\core\\analyticsdb.py 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 def get_songs_in_genre ( self , genre : str ) -> List [ dict ]: \"\"\" get_songs_in_genre Get all the songs in a genre, returns a list of Song objects. Args: genre (str): name of genre Returns: List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) \"\"\" logging . info ( f \"Getting songs in genre: { genre } \" ) cursor = self . conn . cursor () # use table genres to get all songs by genre cursor . execute ( \"\"\"SELECT * FROM genres WHERE genre_name = ?;\"\"\" , ( genre ,) ) songs = cursor . fetchall () song_list = [] for song in songs : song_data = self . get_song_by_id ( song [ 1 ]) song_list . append ({ \"song_title\" : song_data [ 'title' ], \"song_primary_artist\" : song_data [ 'main_artist' ], \"filesize\" : song_data [ 'filesize' ], \"song_id\" : song_data [ 'song_id' ] }) logging . info ( f \"Got songs in genre: { genre } \" ) return song_list","title":"get_songs_in_genre()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_songs_in_playlist","text":"get_songs_in_playlist Returns a list of all the songs in a given playlist Parameters: Name Type Description Default playlist_name str Name of the playlist to get songs from required Returns: Type Description List [ dict ] List[dict]: List of dictionaries containing the song data. Source code in src\\core\\analyticsdb.py 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 691 692 693 694 def get_songs_in_playlist ( self , playlist_name : str ) -> List [ dict ]: \"\"\" get_songs_in_playlist Returns a list of all the songs in a given playlist Args: playlist_name (str): Name of the playlist to get songs from Returns: List[dict]: List of dictionaries containing the song data. \"\"\" logging . info ( f \"Getting songs in playlist: { playlist_name } \" ) playlist_id = self . get_playlist_id_by_name ( playlist_name ) # GET SONG IDS from playlists_songs table then look up songs in songs table cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT * FROM playlists_songs WHERE playlist_id = ?;\"\"\" , ( playlist_id ,) ) playlist_songs = cursor . fetchall () songs = [] for playlist_song in playlist_songs : song_id = playlist_song [ 1 ] song = self . get_song_by_id ( song_id ) songs . append ( song ) logging . info ( f \"Got songs in playlist: { playlist_name } \" ) return songs","title":"get_songs_in_playlist()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.get_songs_in_song_artist","text":"get_songs_in_song_artist Get all the songs in a song artist, returns a list of Song objects. Parameters: Name Type Description Default song_artist str name of song artist required Returns: Type Description List [ dict ] List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) Source code in src\\core\\analyticsdb.py 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 def get_songs_in_song_artist ( self , song_artist : str ) -> List [ dict ]: \"\"\" get_songs_in_song_artist Get all the songs in a song artist, returns a list of Song objects. Args: song_artist (str): name of song artist Returns: List[dict]: list of Song objects (song_title, song_primary_artist, filesize, song_id) \"\"\" logging . info ( f \"Getting songs in song artist: { song_artist } \" ) cursor = self . conn . cursor () # use table song_artists to get all songs by song artist cursor . execute ( \"\"\"SELECT * FROM song_artists WHERE artist_name = ?;\"\"\" , ( song_artist ,) ) songs = cursor . fetchall () song_list = [] for song in songs : song_data = self . get_song_by_id ( song [ 1 ]) song_list . append ({ \"song_title\" : song_data [ 'title' ], \"song_primary_artist\" : song_data [ 'main_artist' ], \"filesize\" : song_data [ 'filesize' ], \"song_id\" : song_data [ 'song_id' ] }) logging . info ( f \"Got songs in song artist: { song_artist } \" ) return song_list","title":"get_songs_in_song_artist()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.insert_album_artist","text":"insert_album_artist Insert an album_artist into the database, returns True if successful, False if not. Only insert if the album_artist does not already exist Parameters: Name Type Description Default artist_name _type_ name of the album artist required song_id _type_ song_id of the song required Returns: Name Type Description bool bool True if successful, False if not Source code in src\\core\\analyticsdb.py 1648 1649 1650 1651 1652 1653 1654 1655 1656 1657 1658 1659 1660 1661 1662 1663 1664 1665 1666 1667 1668 1669 1670 1671 1672 1673 1674 1675 1676 1677 1678 1679 1680 1681 1682 1683 def insert_album_artist ( self , artist_name , song_id ) -> bool : \"\"\" insert_album_artist Insert an album_artist into the database, returns True if successful, False if not. Only insert if the album_artist does not already exist Args: artist_name (_type_): name of the album artist song_id (_type_): song_id of the song Returns: bool: True if successful, False if not \"\"\" logging . info ( \"Attempting to insert album artist {} iwith song_id {} into album_artists table\" . format ( artist_name , song_id )) cursor = self . conn . cursor () # check if album_artist already exists cursor . execute ( \"\"\"SELECT 1 FROM album_artists WHERE artist_name = ? AND song_id = ?;\"\"\" , ( artist_name , song_id ) ) if cursor . fetchone (): logging . warning ( \"Album artist {} with song_id {} already exists in album_artists table\" . format ( artist_name , song_id )) return False cursor . execute ( \"\"\"INSERT INTO album_artists (artist_name, song_id, dt_added) VALUES (?, ?, ?);\"\"\" , ( artist_name , song_id , datetime . datetime . now ()) ) self . conn . commit () logging . info ( \"Inserted album artist {} with song_id {} into album_artists table\" . format ( artist_name , song_id )) return True","title":"insert_album_artist()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.insert_composer","text":"insert_composer Insert a composer into the database, returns True if successful, False if not. Only insert if the composer does not already exist Parameters: Name Type Description Default composer_name _type_ name of the composer required song_id _type_ song_id of the song required Returns: Name Type Description bool bool True if successful, False if not Source code in src\\core\\analyticsdb.py 1730 1731 1732 1733 1734 1735 1736 1737 1738 1739 1740 1741 1742 1743 1744 1745 1746 1747 1748 1749 1750 1751 1752 1753 1754 1755 1756 1757 1758 1759 1760 1761 1762 1763 1764 def insert_composer ( self , composer_name , song_id ) -> bool : \"\"\" insert_composer Insert a composer into the database, returns True if successful, False if not. Only insert if the composer does not already exist Args: composer_name (_type_): name of the composer song_id (_type_): song_id of the song Returns: bool: True if successful, False if not \"\"\" logging . info ( \"Attempting to insert composer {} with song_id {} into composers table\" . format ( composer_name , song_id )) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT 1 FROM composers WHERE composer_name = ? AND song_id = ?;\"\"\" , ( composer_name , song_id ) ) if cursor . fetchone (): logging . warning ( \"Composer {} with song_id {} already exists in composers table\" . format ( composer_name , song_id )) return False cursor . execute ( \"\"\"INSERT INTO composers (composer_name, song_id, dt_added) VALUES (?, ?, ?);\"\"\" , ( composer_name , song_id , datetime . datetime . now ()) ) self . conn . commit () logging . info ( \"Inserted composer {} with song_id {} into composers table\" . format ( composer_name , song_id )) return True","title":"insert_composer()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.insert_genre","text":"Insert a genre into the database, returns True if successful, False if not. Only insert if the genre does not already exist. Source code in src\\core\\analyticsdb.py 1766 1767 1768 1769 1770 1771 1772 1773 1774 1775 1776 1777 1778 1779 1780 1781 1782 1783 1784 1785 1786 1787 1788 1789 1790 def insert_genre ( self , genre_name , song_id ) -> bool : \"\"\"Insert a genre into the database, returns True if successful, False if not. Only insert if the genre does not already exist.\"\"\" logging . warning ( \"Inserting genre {} with song_id {} into genres table\" . format ( genre_name , song_id )) cursor = self . conn . cursor () cursor . execute ( \"\"\"SELECT 1 FROM genres WHERE genre_name = ? AND song_id = ?;\"\"\" , ( genre_name , song_id ) ) if cursor . fetchone (): logging . info ( \"Genre {} with song_id {} already exists in genres table\" . format ( genre_name , song_id )) return False cursor . execute ( \"\"\"INSERT INTO genres (genre_name, song_id, dt_added) VALUES (?, ?, ?);\"\"\" , ( genre_name , song_id , datetime . datetime . now ()) ) self . conn . commit () logging . info ( \"Inserted genre {} with song_id {} into genres table\" . format ( genre_name , song_id )) return True","title":"insert_genre()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.insert_play","text":"insert_play Insert a play into the plays table Parameters: Name Type Description Default song_title str Title of the song required song_primary_artist str Primary artist of the song required filesize int Filesize of the song required start_dt str Date the song started playing required end_dt str Date the song ended playing required Returns: Name Type Description int int id of the inserted play Source code in src\\core\\analyticsdb.py 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 1449 1450 1451 1452 1453 1454 1455 1456 1457 1458 1459 1460 1461 1462 1463 def insert_play ( self , song_title : str , song_primary_artist : str , filesize : int , start_dt : str , end_dt : str , song_id : str ) -> int : \"\"\" insert_play Insert a play into the plays table Args: song_title (str): Title of the song song_primary_artist (str): Primary artist of the song filesize (int): Filesize of the song start_dt (str): Date the song started playing end_dt (str): Date the song ended playing Returns: int: id of the inserted play \"\"\" # plays table has auto incrementing id, so we don't need to insert the id logging . info ( \"Inserting play into plays table\" ) cursor = self . conn . cursor () cursor . execute ( \"INSERT INTO plays (song_title, song_primary_artist, filesize, start_dt, end_dt, song_id) VALUES (?, ?, ?, ?, ?, ?);\" , ( song_title , song_primary_artist , filesize , start_dt , end_dt , song_id ) ) self . conn . commit () # get the id of the inserted play play_id = cursor . lastrowid logging . info ( \"Inserted play into plays table\" ) return play_id","title":"insert_play()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.insert_playlist","text":"insert_playlist Insert a playlist into the playlists table. Only inserts if the playlist does not already exist Parameters: Name Type Description Default playlist_name str Name of the playlist required playlist_desc str Description of the playlist required created_dt str Date the playlist was created required Returns: Name Type Description int int id of the inserted playlist Source code in src\\core\\analyticsdb.py 1465 1466 1467 1468 1469 1470 1471 1472 1473 1474 1475 1476 1477 1478 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 def insert_playlist ( self , playlist_name : str , playlist_desc : str , created_dt : str ) -> int : \"\"\" insert_playlist Insert a playlist into the playlists table. Only inserts if the playlist does not already exist Args: playlist_name (str): Name of the playlist playlist_desc (str): Description of the playlist created_dt (str): Date the playlist was created Returns: int: id of the inserted playlist \"\"\" # check if the playlist already exists if self . get_playlist_id_by_name ( playlist_name ) is not None : logging . info ( \"Playlist {} already exists\" . format ( playlist_name )) return False logging . info ( \"Inserting playlist {} into playlists table\" . format ( playlist_name )) cursor = self . conn . cursor () cursor . execute ( \"INSERT INTO playlists (playlist_name, playlist_desc, created_dt) VALUES (?, ?, ?);\" , ( playlist_name , playlist_desc , created_dt )) self . conn . commit () # get the id of the inserted playlist playlist_id = cursor . lastrowid logging . info ( \"Inserted playlist {} into playlists table\" . format ( playlist_name )) return playlist_id","title":"insert_playlist()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.insert_playlist_song","text":"insert_playlist_song Inserts a song into a playlist. Adds a record to the playlists_songs table Parameters: Name Type Description Default playlist_name str Name of the playlist required song_id str ID of the song required Returns: Name Type Description bool bool True if successful, False if not Source code in src\\core\\analyticsdb.py 1495 1496 1497 1498 1499 1500 1501 1502 1503 1504 1505 1506 1507 1508 1509 1510 1511 1512 1513 1514 1515 1516 1517 1518 1519 1520 1521 1522 1523 def insert_playlist_song ( self , playlist_name : str , song_id : str ) -> bool : \"\"\" insert_playlist_song Inserts a song into a playlist. Adds a record to the playlists_songs table Args: playlist_name (str): Name of the playlist song_id (str): ID of the song Returns: bool: True if successful, False if not \"\"\" logging . info ( \"Inserting playlist_song {} into playlists_songs table\" . format ( playlist_name )) playlist_id = self . get_playlist_id_by_name ( playlist_name ) added_dt = datetime . datetime . now () . strftime ( \"%Y-%m- %d %H:%M:%S\" ) cursor = self . conn . cursor () # duplicates are ok cursor . execute ( \"\"\"INSERT INTO playlists_songs (playlist_id, song_id, added_dt) VALUES (?, ?, ?);\"\"\" , ( playlist_id , song_id , added_dt ) ) self . conn . commit () logging . info ( \"Inserted playlist_song {} into playlists_songs table\" . format ( playlist_name )) return True","title":"insert_playlist_song()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.insert_song","text":"insert_song Insert a song into the songs table, returns song_id of inserted song. Only insert if the song does not already exist. Use the title and filesize. Parameters: Name Type Description Default **kwargs song_table_data (dict) {} Returns: Name Type Description str str song_id of inserted song Source code in src\\core\\analyticsdb.py 1525 1526 1527 1528 1529 1530 1531 1532 1533 1534 1535 1536 1537 1538 1539 1540 1541 1542 1543 1544 1545 1546 1547 1548 1549 1550 1551 1552 1553 1554 1555 1556 1557 1558 1559 1560 1561 1562 1563 1564 1565 1566 1567 1568 1569 1570 1571 1572 1573 1574 1575 1576 1577 1578 1579 1580 1581 1582 1583 1584 1585 1586 1587 1588 1589 1590 1591 1592 1593 1594 1595 1596 1597 1598 1599 1600 1601 1602 1603 1604 1605 1606 1607 1608 1609 1610 1611 1612 1613 1614 1615 1616 1617 1618 1619 1620 1621 1622 1623 1624 1625 1626 1627 1628 1629 1630 1631 1632 1633 1634 1635 1636 1637 1638 1639 1640 1641 1642 1643 1644 1645 1646 def insert_song ( self , ** kwargs ) -> str : \"\"\" insert_song Insert a song into the songs table, returns song_id of inserted song. Only insert if the song does not already exist. Use the title and filesize. Args: **kwargs: song_table_data (dict) Returns: str: song_id of inserted song \"\"\" logging . info ( \"Inserting song {} into songs table\" . format ( kwargs [ \"title\" ])) cursor = self . conn . cursor () # self.song_table_data = { # \"song_id\": \"N/A\", # string # \"filepath\": \"N/A\", # string # \"main_artist\": \"N/A\", # string # \"filesize\": -1, # in bytes # \"padding\": -1, # in bytes # \"album_artwork_bit_depth\": -1, # in bits # \"album_artwork_colors\": -1, # int # \"album_artwork_height\": -1, # in pixels # \"album_artwork_width\": -1, # in pixels # \"bit_depth\": -1, # in bits # \"bitrate\": -1, # in bits, divide by 1000 to get Kbps # \"channels\": -1, # int # \"duration\": -1, # in seconds # \"sample_rate\": -1, # in KHz # \"album\": \"N/A\", # string # \"barcode\": \"N/A\", # string # \"date_created\": \"N/A\", # in YYYY-MM-DD # \"disc_number\": -1, # int # \"disc_total\": -1, # int # \"isrc\": \"N/A\", # string # \"itunesadvisory\": \"N/A\", # string # \"length\": -1, # int # \"publisher\": \"N/A\", # string # \"rating\": -1, # int # \"title\": \"N/A\", # string # \"track_number\": -1, # int # \"track_total\": -1, # int # \"source\": \"N/A\", # string # } # check if song already exists song_id = self . get_song_by_id ( kwargs [ 'song_id' ]) if song_id : logging . warning ( \"Song {} already exists in songs table\" . format ( kwargs [ \"title\" ])) return song_id cursor . execute ( \"\"\"INSERT INTO songs ( song_id, filepath, main_artist, filesize, padding, album_artwork_bit_depth, album_artwork_colors, album_artwork_height, album_artwork_width, bit_depth, bitrate, channels, duration, sample_rate, album, barcode, date_created, disc_number, disc_total, isrc, itunesadvisory, length, publisher, rating, title, track_number, track_total, source ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? );\"\"\" , ( kwargs [ 'song_id' ], kwargs [ \"filepath\" ], kwargs [ \"main_artist\" ], kwargs [ \"filesize\" ], kwargs [ \"padding\" ], kwargs [ \"album_artwork_bit_depth\" ], kwargs [ \"album_artwork_colors\" ], kwargs [ \"album_artwork_height\" ], kwargs [ \"album_artwork_width\" ], kwargs [ \"bit_depth\" ], kwargs [ \"bitrate\" ], kwargs [ \"channels\" ], kwargs [ \"duration\" ], kwargs [ \"sample_rate\" ], kwargs [ \"album\" ], kwargs [ \"barcode\" ], kwargs [ \"date_created\" ], kwargs [ \"disc_number\" ], kwargs [ \"disc_total\" ], kwargs [ \"isrc\" ], kwargs [ \"itunesadvisory\" ], kwargs [ \"length\" ], kwargs [ \"publisher\" ], kwargs [ \"rating\" ], kwargs [ \"title\" ], kwargs [ \"track_number\" ], kwargs [ \"track_total\" ], kwargs [ \"source\" ], ) ) self . conn . commit () # get the song_id of the inserted song song_name = kwargs [ \"title\" ] logging . info ( f \"Inserted { song_name } with song_id: { song_id } \" ) return kwargs [ 'song_id' ]","title":"insert_song()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.insert_song_artist","text":"insert_song_artist Insert a song_artist into the database, returns True if successful, False if not. Only insert if the song_artist does not already exist Parameters: Name Type Description Default artist_name _type_ name of the song artist required song_id _type_ song_id of the song required Returns: Name Type Description bool bool True if successful, False if not Source code in src\\core\\analyticsdb.py 1685 1686 1687 1688 1689 1690 1691 1692 1693 1694 1695 1696 1697 1698 1699 1700 1701 1702 1703 1704 1705 1706 1707 1708 1709 1710 1711 1712 1713 1714 1715 1716 1717 1718 1719 1720 1721 1722 1723 1724 1725 1726 1727 1728 def insert_song_artist ( self , artist_name , song_id ) -> bool : \"\"\" insert_song_artist Insert a song_artist into the database, returns True if successful, False if not. Only insert if the song_artist does not already exist Args: artist_name (_type_): name of the song artist song_id (_type_): song_id of the song Returns: bool: True if successful, False if not \"\"\" logging . info ( \"Attempting to insert song artist {} with song_id {} into song_artists table\" . format ( artist_name , song_id )) cursor = self . conn . cursor () # cursor.execute( # \"\"\"INSERT INTO song_artists (artist_name, song_id, dt_added) # SELECT ?, ?, ? WHERE NOT EXISTS ( # SELECT 1 FROM song_artists WHERE artist_name = ? AND song_id = ? # );\"\"\", # (artist_name, song_id, datetime.datetime.now(), artist_name, song_id) # ) # check if song_artist already exists cursor . execute ( \"\"\"SELECT 1 FROM song_artists WHERE artist_name = ? AND song_id = ?;\"\"\" , ( artist_name , song_id ) ) if cursor . fetchone (): logging . warning ( \"Song artist {} with song_id {} already exists in song_artists table\" . format ( artist_name , song_id )) return False cursor . execute ( \"\"\"INSERT INTO song_artists (artist_name, song_id, dt_added) VALUES (?, ?, ?);\"\"\" , ( artist_name , song_id , datetime . datetime . now ()) ) self . conn . commit () logging . info ( \"Inserted song artist {} with song_id {} into song_artists table\" . format ( artist_name , song_id )) return True","title":"insert_song_artist()"},{"location":"analyticsdb/#src.core.analyticsdb.AnalyticsDBHandler.populate_database","text":"populate_database Populate the database using the data from the soundfiles in the SOUNDFILES_PATH directory Source code in src\\core\\analyticsdb.py 1794 1795 1796 1797 1798 1799 1800 1801 1802 1803 1804 1805 1806 1807 1808 1809 1810 1811 1812 1813 1814 1815 1816 1817 1818 1819 1820 1821 1822 1823 1824 1825 1826 1827 1828 1829 1830 1831 1832 1833 1834 1835 1836 1837 1838 def populate_database ( self , soundfiles_path = config . SOUNDFILES_PATH ): \"\"\" populate_database Populate the database using the data from the soundfiles in the SOUNDFILES_PATH directory \"\"\" # fetch all the files from config.SOUNDFILES_PATH soundfiles = os . listdir ( soundfiles_path ) for file in soundfiles : # get path of file file_path = os . path . join ( soundfiles_path , file ) # get metadata from file parser = songparser . SongMetadata ( filepath = file_path ) # get the song data and insert it into the database song_data = parser . get_song_table_data () song_id = None if song_data is not None : self . insert_song ( ** song_data ) song_id = song_data [ \"song_id\" ] else : logging . error ( f \"Could not get song data for file: { file_path } \" ) continue # get the artist data and insert it into the database album_artist_data = parser . get_album_artist_data () if album_artist_data is not None : for artist in album_artist_data : self . insert_album_artist ( artist , song_id ) song_artist_data = parser . get_song_artist_data () if song_artist_data is not None : for artist in song_artist_data : self . insert_song_artist ( artist , song_id ) composer_data = parser . get_composer_data () if composer_data is not None : for composer in composer_data : self . insert_composer ( composer , song_id ) genre_data = parser . get_genre_data () if genre_data is not None : for genre in genre_data : self . insert_genre ( genre , song_id )","title":"populate_database()"},{"location":"commits/","text":"Okay, you just wrote some awesome code, now you want to commit it to the repository. This is a quick guide on how to do that. We are using a system that requires making an additional branch and merging it with the main branch. This is to ensure that the main branch is always stable and working. Tests are automatically ran to make sure your changes didn't break anything. Here's a step-by-step guide on how to do that: Step 1: Create a branch Before or after you make your changes, you need to create a branch. You can do this in GitHub Desktop very easily: Create a new branch in GitHub Desktop Step 2: Add your changes and push the new branch to GitHub After you've made your changes, you need to add them to the branch. Commit them to the branch by the usual method (make sure you're on the new branch you made) then push the branch to GitHub. Commit your changes to the new branch Step 3: Create a pull request After you've pushed your branch to GitHub, you need to create a pull request. This is done by clicking the \"Pull request\" button on GitHub Desktop or the web client. Create a pull request Step 4: Merge the pull request We have automatic tests that must be passed by your changes so you don't break anything. If they pass, you can merge your pull request. If they don't, you need to fix your code. Wait for the pull request to be merged Step 5: Done! After your pull request is merged, your code is on the main branch. The old branch is automatically deleted.","title":"How to commit changes"},{"location":"commits/#step-1-create-a-branch","text":"Before or after you make your changes, you need to create a branch. You can do this in GitHub Desktop very easily: Create a new branch in GitHub Desktop","title":"Step 1: Create a branch"},{"location":"commits/#step-2-add-your-changes-and-push-the-new-branch-to-github","text":"After you've made your changes, you need to add them to the branch. Commit them to the branch by the usual method (make sure you're on the new branch you made) then push the branch to GitHub. Commit your changes to the new branch","title":"Step 2: Add your changes and push the new branch to GitHub"},{"location":"commits/#step-3-create-a-pull-request","text":"After you've pushed your branch to GitHub, you need to create a pull request. This is done by clicking the \"Pull request\" button on GitHub Desktop or the web client. Create a pull request","title":"Step 3: Create a pull request"},{"location":"commits/#step-4-merge-the-pull-request","text":"We have automatic tests that must be passed by your changes so you don't break anything. If they pass, you can merge your pull request. If they don't, you need to fix your code. Wait for the pull request to be merged","title":"Step 4: Merge the pull request"},{"location":"commits/#step-5-done","text":"After your pull request is merged, your code is on the main branch. The old branch is automatically deleted.","title":"Step 5: Done!"},{"location":"config/","text":"The main file that contains all the configuration variables. Has tons of handy dandy info the rest of the program might need. Here's some important variables it contains: Logging LOGGING_LEVEL - The logging level of the project. This should be always be DEBUG, otherwise you might not get any logs LOGGING_FORMAT - The format of the logs. Those weird variables are the date, file location, and message. LOGGING_DATE_FORMAT - The format of the date in the logs. LOGGING_FILENAME - The filename of the logs. This is automatically generated based on the date. LOGGING_ENCODING - The encoding of the logs. This should always be utf-8. DATABASE_PATH - The path to the database. This is automatically generated based on the project's directory. Database DATABASE_PATH - The path to the database. This is automatically generated based on the project's directory. Sound Files SOUNDFILES_PATH - The path to the sound files. This is automatically generated based on the project's directory. Backups BACKUPS_PATH - The path to the backups. This is automatically generated based on the project's directory. DATABASE_BACKUP_PATH - The path to the database backups. This is automatically generated based on the project's directory. LOGS_BACKUP_PATH - The path to the logs backups. This is automatically generated based on the project's directory.","title":"config.py"},{"location":"config/#logging","text":"LOGGING_LEVEL - The logging level of the project. This should be always be DEBUG, otherwise you might not get any logs LOGGING_FORMAT - The format of the logs. Those weird variables are the date, file location, and message. LOGGING_DATE_FORMAT - The format of the date in the logs. LOGGING_FILENAME - The filename of the logs. This is automatically generated based on the date. LOGGING_ENCODING - The encoding of the logs. This should always be utf-8. DATABASE_PATH - The path to the database. This is automatically generated based on the project's directory.","title":"Logging"},{"location":"config/#database","text":"DATABASE_PATH - The path to the database. This is automatically generated based on the project's directory.","title":"Database"},{"location":"config/#sound-files","text":"SOUNDFILES_PATH - The path to the sound files. This is automatically generated based on the project's directory.","title":"Sound Files"},{"location":"config/#backups","text":"BACKUPS_PATH - The path to the backups. This is automatically generated based on the project's directory. DATABASE_BACKUP_PATH - The path to the database backups. This is automatically generated based on the project's directory. LOGS_BACKUP_PATH - The path to the logs backups. This is automatically generated based on the project's directory.","title":"Backups"},{"location":"docinstructions/","text":"Understanding the documentation Structure. The config is in a file at the root called mkdocs.yml. This file contains all the information about the documentation. It contains the pages, the theme, and the plugins. The pages are the files that are used to generate the documentation. The theme is the theme of the documentation. / # Root of the project \u251c\u2500\u2500 docs/ # Contains all the documentation files | \u251c\u2500\u2500 index.md # The main page of the documentation | \u251c\u2500\u2500 docinstructions.md # This file | \u251c\u2500\u2500 <other random .md files> \u251c\u2500\u2500 mkdocs.yml # The config file for mkdocs \u251c\u2500\u2500 src/ \u251c\u2500\u2500 <other random files> All the actual \"meat\" of the documentation is in the docs folder. This folder contains all the files that are used to generate the documentation. The files are in markdown format. Documenting your code Use docstrings in your code, this may look like: def get_all_playlist_songs ( self ) -> List [ dict ]: \"\"\" get_all_playlist_songs Get all the playlist songs in the database, returns a list of dictionaries Returns: List[dict]: list of dictionaries [song_name, file_size, id] \"\"\" pass or like def loadMetadataParams ( self , params : dict ) -> None : \"\"\" loadMetadataParams Loads the metadata of the FLAC file into the metadata variable. Necessary if not using filepaths. Args: params (dict): the metadata of the FLAC song file \"\"\" pass I highly encourage you to download a vs code extension to do this. I use this one for python. Adding the document to the documentation Make a new doc in the docs folder. Name it something similar to the file you are documenting. For example, if you are documenting songparser.py , name the file songparser.md . Add whatever information you think is important in the file, then make sure to add a special signature that lets mkdocs read your code! This signature will ALWAYS be src.[folder in src].[file name] with three colons in front (:::). Look below for example. (I cant add it here otherwise it gets overwritten.) Some examples: ::: src.core.analyticsdb ::: src.core.songparser ::: src.tests.test_analyticsdb Adding the document to the documentation index Open the mkdocs.yml file and edit the nav tree. For example, it may look something like this. nav: # DONT CHANGE THIS - Home: index.md # DONT CHANGE THIS - \"Core Modules\": # PARENT OF DROP DOWN - \"analyticsdb.py\": \"analyticsdb.md\" # NAME OF DROP DOWN ITEM: NAME OF DOCUMENT - \"config.py\": \"config.md\" # PAGE WILL APPEAR AS CONFIG.PY, AND RENDER DOCUMENT CONFIG.MD - \"songparser.py\": \"songparser.md\" if I wanted to add this document per say, I would add: nav: # DONT CHANGE THIS - Home: index.md # DONT CHANGE THIS - \"Core Modules\": # PARENT OF DROP DOWN - \"analyticsdb.py\": \"analyticsdb.md\" # NAME OF DROP DOWN ITEM: NAME OF DOCUMENT - \"config.py\": \"config.md\" # PAGE WILL APPEAR AS CONFIG.PY, AND RENDER DOCUMENT CONFIG.MD - \"songparser.py\": \"songparser.md\" - \"newdocument.py\": \"newdocument.md\" Push to gh-pages Run the command mkdocs serve mkdocs gh-deploy","title":"How to add to Documentation"},{"location":"docinstructions/#understanding-the-documentation-structure","text":"The config is in a file at the root called mkdocs.yml. This file contains all the information about the documentation. It contains the pages, the theme, and the plugins. The pages are the files that are used to generate the documentation. The theme is the theme of the documentation. / # Root of the project \u251c\u2500\u2500 docs/ # Contains all the documentation files | \u251c\u2500\u2500 index.md # The main page of the documentation | \u251c\u2500\u2500 docinstructions.md # This file | \u251c\u2500\u2500 <other random .md files> \u251c\u2500\u2500 mkdocs.yml # The config file for mkdocs \u251c\u2500\u2500 src/ \u251c\u2500\u2500 <other random files> All the actual \"meat\" of the documentation is in the docs folder. This folder contains all the files that are used to generate the documentation. The files are in markdown format.","title":"Understanding the documentation Structure."},{"location":"docinstructions/#documenting-your-code","text":"Use docstrings in your code, this may look like: def get_all_playlist_songs ( self ) -> List [ dict ]: \"\"\" get_all_playlist_songs Get all the playlist songs in the database, returns a list of dictionaries Returns: List[dict]: list of dictionaries [song_name, file_size, id] \"\"\" pass or like def loadMetadataParams ( self , params : dict ) -> None : \"\"\" loadMetadataParams Loads the metadata of the FLAC file into the metadata variable. Necessary if not using filepaths. Args: params (dict): the metadata of the FLAC song file \"\"\" pass I highly encourage you to download a vs code extension to do this. I use this one for python.","title":"Documenting your code"},{"location":"docinstructions/#adding-the-document-to-the-documentation","text":"Make a new doc in the docs folder. Name it something similar to the file you are documenting. For example, if you are documenting songparser.py , name the file songparser.md . Add whatever information you think is important in the file, then make sure to add a special signature that lets mkdocs read your code! This signature will ALWAYS be src.[folder in src].[file name] with three colons in front (:::). Look below for example. (I cant add it here otherwise it gets overwritten.) Some examples: ::: src.core.analyticsdb ::: src.core.songparser ::: src.tests.test_analyticsdb","title":"Adding the document to the documentation"},{"location":"docinstructions/#adding-the-document-to-the-documentation-index","text":"Open the mkdocs.yml file and edit the nav tree. For example, it may look something like this. nav: # DONT CHANGE THIS - Home: index.md # DONT CHANGE THIS - \"Core Modules\": # PARENT OF DROP DOWN - \"analyticsdb.py\": \"analyticsdb.md\" # NAME OF DROP DOWN ITEM: NAME OF DOCUMENT - \"config.py\": \"config.md\" # PAGE WILL APPEAR AS CONFIG.PY, AND RENDER DOCUMENT CONFIG.MD - \"songparser.py\": \"songparser.md\" if I wanted to add this document per say, I would add: nav: # DONT CHANGE THIS - Home: index.md # DONT CHANGE THIS - \"Core Modules\": # PARENT OF DROP DOWN - \"analyticsdb.py\": \"analyticsdb.md\" # NAME OF DROP DOWN ITEM: NAME OF DOCUMENT - \"config.py\": \"config.md\" # PAGE WILL APPEAR AS CONFIG.PY, AND RENDER DOCUMENT CONFIG.MD - \"songparser.py\": \"songparser.md\" - \"newdocument.py\": \"newdocument.md\"","title":"Adding the document to the documentation index"},{"location":"docinstructions/#push-to-gh-pages","text":"Run the command mkdocs serve mkdocs gh-deploy","title":"Push to gh-pages"},{"location":"songparser/","text":"Responsible for parsing the song files and extracting their metadata. Overview We are using an abstract class SongFile which should be extended by child classes for each file type. For example: # This is what the parent class looks like class SongFile ( ABC ): # ABC means it's an abstract class @abstractmethod def get_song_table_data ( self ): pass # This is the class we want to make class SongFileFLAC ( SongFile ): # inherit from SongFile def get_song_table_data ( self ): # this is an abstract method, so we have to implement it super () . get_song_table_data () # call the parent method (named the exact same as current function) pass class SongFileMP3 ( SongFile ): # inherit from SongFile def get_song_table_data ( self ): # this is an abstract method, so we have to implement it super () . get_song_table_data () # call the parent method (named the exact same as current function) pass If you are adding support for a new file, there's some very important things you have to be aware of: Firstly, you need to create a child class of SongFile for your file type. Look at the above example for more information. Add your filetype to the __init__() function of the SongMetadata class. # This is what the init function will look like (maybe a little different since this was written but it will be same gist) def __init__ ( self , filepath ): \"\"\"Initialize the SongMetadata object. We want to see what file type it is, and load the correct file.\"\"\" self . extension = os . path . splitext ( filepath )[ 1 ] self . songfile = None if self . extension == \".flac\" : self . songfile = SongFileFLAC ( filepath ) # ----------------------------------------------# # Add your file type here! For example, for mp3:# # ----------------------------------------------# elif self . extension == \".mp3\" : self . songfile = SongFileMP3 ( filepath ) # change this to the class you made else : logging . error ( \"File type not supported: \" + self . extension ) Add the required methods. These are the following get_song_table_data(self) get_album_artist_data(self) get_song_artist_data(self) get_composer_data(self) get_genre_data(self) Here's the actual hard part, you have to return certain types of data for each of these methods get_song_table_data(self) This one has the most information. Here's the list of stuff you have to return \"main_artist\" : None , # string \"filesize\" : 0 , # int in bytes \"padding\" : None , # int in bytes \"album_artwork_bit_depth\" : None , # int in bits \"album_artwork_colors\" : None , # int \"album_artwork_height\" : None , # int in pixels \"album_artwork_width\" : None , # int in pixels \"bit_depth\" : None , # int in bits \"bitrate\" : None , # int in bits, divide by 1000 to get Kbps \"channels\" : None , # int \"duration\" : None , # int in seconds \"sample_rate\" : None , # int in KHz \"album\" : None , # string \"barcode\" : None , # string \"date_created\" : None , # string in YYYY-MM-DD \"disc_number\" : None , # int \"disc_total\" : None , # int \"isrc\" : None , # string \"itunesadvisory\" : None , # string \"length\" : None , # int \"publisher\" : None , # string \"rating\" : None , # int \"title\" : \"Missing\" , # string \"track_number\" : None , # int \"track_total\" : None , # int \"source\" : None , # string It HAS to be a dict with all these keys, if you don't have the value for one, set it to None . get_album_artist_data(self) This one is a little easier. Just return a list of the album artists [ \"artist1\" , \"artist2\" , \"artist3\" ] get_song_artist_data(self) Same thing as above, but for song artists [ \"artist1\" , \"artist2\" , \"artist3\" ] get_composer_data(self) Same thing as above, but for composers [ \"artist1\" , \"artist2\" , \"artist3\" ] get_genre_data(self) Same thing as above, but for genres [ \"genre1\" , \"genre2\" , \"genre3\" ] SongFile Bases: ABC SongFile The core class for parsing metadata from song files Parameters: Name Type Description Default ABC _type_ Abstract Base Class required Source code in src\\core\\songparser.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 class SongFile ( ABC ): \"\"\" SongFile The core class for parsing metadata from song files Args: ABC (_type_): Abstract Base Class \"\"\" def __init__ ( self , filepath ): self . filepath = filepath self . filename = os . path . basename ( filepath ) logging . info ( \"Parsing metadata for \" + self . filename ) def __init__ ( self ): self . filepath = None self . filename = None @log_data @abstractmethod def load_file ( self , filepath ) -> None : \"\"\" load_file Abstract method to load a file Args: filepath (str): the path to the file \"\"\" pass @log_data @abstractmethod def get_song_table_data ( self ) -> Dict [ str , str ]: \"\"\" get_song_table_data Abstract method to get all the data required for the song table Returns: Dict: a dictionary with all the data required for the song table \"\"\" pass @log_data @abstractmethod def get_album_artist_data ( self ) -> List [ str ]: \"\"\" get_album_artist_data Abstract method to get all the data required for the album artist table Returns: List[str]: a list of all the album artists \"\"\" pass @log_data @abstractmethod def get_song_artist_data ( self ) -> List [ str ]: \"\"\" get_song_artist_data Abstract method to get all the data required for the song artist table Returns: List[str]: a list of all the song artists \"\"\" pass @log_data @abstractmethod def get_composer_data ( self ) -> List [ str ]: \"\"\" get_composer_data Abstract method to get all the data required for the composer table Returns: List[str]: a list of all the composers \"\"\" pass @log_data @abstractmethod def get_genre_data ( self ) -> List [ str ]: \"\"\" get_genre_data Abstract method to get all the data required for the genre table Returns: List[str]: a list of all the genres \"\"\" pass get_album_artist_data () abstractmethod get_album_artist_data Abstract method to get all the data required for the album artist table Returns: Type Description List [ str ] List[str]: a list of all the album artists Source code in src\\core\\songparser.py 78 79 80 81 82 83 84 85 86 87 @log_data @abstractmethod def get_album_artist_data ( self ) -> List [ str ]: \"\"\" get_album_artist_data Abstract method to get all the data required for the album artist table Returns: List[str]: a list of all the album artists \"\"\" pass get_composer_data () abstractmethod get_composer_data Abstract method to get all the data required for the composer table Returns: Type Description List [ str ] List[str]: a list of all the composers Source code in src\\core\\songparser.py 100 101 102 103 104 105 106 107 108 109 @log_data @abstractmethod def get_composer_data ( self ) -> List [ str ]: \"\"\" get_composer_data Abstract method to get all the data required for the composer table Returns: List[str]: a list of all the composers \"\"\" pass get_genre_data () abstractmethod get_genre_data Abstract method to get all the data required for the genre table Returns: Type Description List [ str ] List[str]: a list of all the genres Source code in src\\core\\songparser.py 111 112 113 114 115 116 117 118 119 120 @log_data @abstractmethod def get_genre_data ( self ) -> List [ str ]: \"\"\" get_genre_data Abstract method to get all the data required for the genre table Returns: List[str]: a list of all the genres \"\"\" pass get_song_artist_data () abstractmethod get_song_artist_data Abstract method to get all the data required for the song artist table Returns: Type Description List [ str ] List[str]: a list of all the song artists Source code in src\\core\\songparser.py 89 90 91 92 93 94 95 96 97 98 @log_data @abstractmethod def get_song_artist_data ( self ) -> List [ str ]: \"\"\" get_song_artist_data Abstract method to get all the data required for the song artist table Returns: List[str]: a list of all the song artists \"\"\" pass get_song_table_data () abstractmethod get_song_table_data Abstract method to get all the data required for the song table Returns: Name Type Description Dict Dict [ str , str ] a dictionary with all the data required for the song table Source code in src\\core\\songparser.py 67 68 69 70 71 72 73 74 75 76 @log_data @abstractmethod def get_song_table_data ( self ) -> Dict [ str , str ]: \"\"\" get_song_table_data Abstract method to get all the data required for the song table Returns: Dict: a dictionary with all the data required for the song table \"\"\" pass load_file ( filepath ) abstractmethod load_file Abstract method to load a file Parameters: Name Type Description Default filepath str the path to the file required Source code in src\\core\\songparser.py 56 57 58 59 60 61 62 63 64 65 @log_data @abstractmethod def load_file ( self , filepath ) -> None : \"\"\" load_file Abstract method to load a file Args: filepath (str): the path to the file \"\"\" pass SongFileFLAC Bases: SongFile Source code in src\\core\\songparser.pyclass SongFileFLAC ( SongFile ): # def __init__(self, filepath: str): # \"\"\" # __init__ constructor for SongFileFLAC # Args: # filepath (str): the filepath of the FLAC song file (absolute path, use os.join) # \"\"\" # super().__init__(filepath) # self.metadata = None # self.song_table_data = None # self.loadMetadata(filepath) # self.make_song_table_data() def __init__ ( self ): \"\"\" __init__ Default constructor for SongFileFLAC. Does nothing. \"\"\" super () . __init__ () self . metadata = None self . song_table_data = None self . make_song_table_data () def load_file ( self , filepath : str ) -> None : \"\"\" load_file Loads the metadata of the FLAC file into the metadata variable. Args: filepath (str): the filepath of the FLAC song file (absolute path, use os.join) Returns: _type_: None \"\"\" self . hash = file_to_hash ( filepath ) self . metadata = audio_metadata . load ( filepath ) def loadMetadataParams ( self , params : dict ) -> None : \"\"\" loadMetadataParams Loads the metadata of the FLAC file into the metadata variable. Necessary if not using filepaths. Args: params (dict): the metadata of the FLAC song file \"\"\" self . song_table_data = params def make_song_table_data ( self ): \"\"\" make_song_table_data Instantiates the song_table_data dictionary with all the keys and values set to None. \"\"\" # there's so much data bruh, here's a big ass list that details everything # this method isn't really necessary, but I thinik it makes things cleaner self . song_table_data = config . song_table_data . copy () def get_song_table_data ( self ) -> Dict [ str , str ]: \"\"\" get_song_table_data Looks at self.metadata and self.song_table_data and grabs all possible data from self.metadata and puts it into self.song_table_data. Returns: Dict: a dictionary with all the data required for the song table \"\"\" super () . get_song_table_data () self . song_table_data [ 'song_id' ] = self . hash # do the above but with if statements to check if the key exists if \"filepath\" in self . metadata : self . song_table_data [ \"filepath\" ] = self . metadata [ \"filepath\" ] if \"filesize\" in self . metadata : self . song_table_data [ \"filesize\" ] = self . metadata [ \"filesize\" ] if \"padding\" in self . metadata : self . song_table_data [ \"padding\" ] = self . metadata [ \"padding\" ] . size if \"pictures\" in self . metadata : if \"bit_depth\" in self . metadata [ \"pictures\" ][ 0 ]: self . song_table_data [ \"album_artwork_bit_depth\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"bit_depth\" ] if \"colors\" in self . metadata [ \"pictures\" ][ 0 ]: self . song_table_data [ \"album_artwork_colors\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"colors\" ] if \"height\" in self . metadata [ \"pictures\" ][ 0 ]: self . song_table_data [ \"album_artwork_height\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"height\" ] if \"width\" in self . metadata [ \"pictures\" ][ 0 ]: self . song_table_data [ \"album_artwork_width\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"width\" ] if \"streaminfo\" in self . metadata : if \"bit_depth\" in self . metadata [ \"streaminfo\" ]: self . song_table_data [ \"bit_depth\" ] = self . metadata [ \"streaminfo\" ][ \"bit_depth\" ] if \"bitrate\" in self . metadata [ \"streaminfo\" ]: self . song_table_data [ \"bitrate\" ] = self . metadata [ \"streaminfo\" ][ \"bitrate\" ] if \"channels\" in self . metadata [ \"streaminfo\" ]: self . song_table_data [ \"channels\" ] = self . metadata [ \"streaminfo\" ][ \"channels\" ] if \"duration\" in self . metadata [ \"streaminfo\" ]: self . song_table_data [ \"duration\" ] = self . metadata [ \"streaminfo\" ][ \"duration\" ] if \"sample_rate\" in self . metadata [ \"streaminfo\" ]: self . song_table_data [ \"sample_rate\" ] = self . metadata [ \"streaminfo\" ][ \"sample_rate\" ] if \"tags\" in self . metadata : if \"album\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"album\" ] = self . metadata [ \"tags\" ][ \"album\" ][ 0 ] if \"barcode\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"barcode\" ] = self . metadata [ \"tags\" ][ \"barcode\" ][ 0 ] if \"date\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"date_created\" ] = self . metadata [ \"tags\" ][ \"date\" ][ 0 ] if \"discnumber\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"disc_number\" ] = self . metadata [ \"tags\" ][ \"discnumber\" ][ 0 ] if \"disctotal\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"disc_total\" ] = self . metadata [ \"tags\" ][ \"disctotal\" ][ 0 ] if \"isrc\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"isrc\" ] = self . metadata [ \"tags\" ][ \"isrc\" ][ 0 ] if \"itunesadvisory\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"itunesadvisory\" ] = self . metadata [ \"tags\" ][ \"itunesadvisory\" ][ 0 ] if \"length\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"length\" ] = self . metadata [ \"tags\" ][ \"length\" ][ 0 ] if \"publisher\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"publisher\" ] = self . metadata [ \"tags\" ][ \"publisher\" ][ 0 ] if \"rating\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"rating\" ] = self . metadata [ \"tags\" ][ \"rating\" ][ 0 ] if \"title\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"title\" ] = self . metadata [ \"tags\" ][ \"title\" ][ 0 ] if \"tracknumber\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"track_number\" ] = self . metadata [ \"tags\" ][ \"tracknumber\" ][ 0 ] if \"tracktotal\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"track_total\" ] = self . metadata [ \"tags\" ][ \"tracktotal\" ][ 0 ] if \"source\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"source\" ] = self . metadata [ \"tags\" ][ \"source\" ][ 0 ] if \"artist\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"main_artist\" ] = self . metadata [ \"tags\" ][ \"artist\" ][ 0 ] return self . song_table_data def get_album_artist_data ( self ) -> List [ str ]: \"\"\" get_album_artist_data gets the album artist data from the metadata Returns: List[str]: list of album artists for FLAC files \"\"\" super () . get_album_artist_data () if \"albumartist\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"albumartist\" ] else : return None def get_song_artist_data ( self ) -> List [ str ]: \"\"\" get_song_artist_data gets the song artist data from the metadata Returns: List[str]: list of song artists for FLAC files \"\"\" super () . get_song_artist_data () if \"artist\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"artist\" ] else : return None def get_composer_data ( self ) -> List [ str ]: \"\"\" get_composer_data gets the composer data from the metadata Returns: List[str]: list of composers for FLAC files \"\"\" super () . get_composer_data () if \"composer\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"composer\" ] else : return None def get_genre_data ( self ) -> List [ str ]: \"\"\" get_genre_data gets the genre data from the metadata Returns: List[str]: list of genres for FLAC files \"\"\" super () . get_genre_data () if \"genre\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"genre\" ] else : return None __init__ () init Default constructor for SongFileFLAC. Does nothing. Source code in src\\core\\songparser.py 139 140 141 142 143 144 145 146 def __init__ ( self ): \"\"\" __init__ Default constructor for SongFileFLAC. Does nothing. \"\"\" super () . __init__ () self . metadata = None self . song_table_data = None self . make_song_table_data () get_album_artist_data () get_album_artist_data gets the album artist data from the metadata Returns: Type Description List [ str ] List[str]: list of album artists for FLAC files Source code in src\\core\\songparser.py 250 251 252 253 254 255 256 257 258 259 260 261 def get_album_artist_data ( self ) -> List [ str ]: \"\"\" get_album_artist_data gets the album artist data from the metadata Returns: List[str]: list of album artists for FLAC files \"\"\" super () . get_album_artist_data () if \"albumartist\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"albumartist\" ] else : return None get_composer_data () get_composer_data gets the composer data from the metadata Returns: Type Description List [ str ] List[str]: list of composers for FLAC files Source code in src\\core\\songparser.py 277 278 279 280 281 282 283 284 285 286 287 288 def get_composer_data ( self ) -> List [ str ]: \"\"\" get_composer_data gets the composer data from the metadata Returns: List[str]: list of composers for FLAC files \"\"\" super () . get_composer_data () if \"composer\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"composer\" ] else : return None get_genre_data () get_genre_data gets the genre data from the metadata Returns: Type Description List [ str ] List[str]: list of genres for FLAC files Source code in src\\core\\songparser.py 290 291 292 293 294 295 296 297 298 299 300 301 def get_genre_data ( self ) -> List [ str ]: \"\"\" get_genre_data gets the genre data from the metadata Returns: List[str]: list of genres for FLAC files \"\"\" super () . get_genre_data () if \"genre\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"genre\" ] else : return None get_song_artist_data () get_song_artist_data gets the song artist data from the metadata Returns: Type Description List [ str ] List[str]: list of song artists for FLAC files Source code in src\\core\\songparser.py 263 264 265 266 267 268 269 270 271 272 273 274 275 def get_song_artist_data ( self ) -> List [ str ]: \"\"\" get_song_artist_data gets the song artist data from the metadata Returns: List[str]: list of song artists for FLAC files \"\"\" super () . get_song_artist_data () if \"artist\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"artist\" ] else : return None get_song_table_data () get_song_table_data Looks at self.metadata and self.song_table_data and grabs all possible data from self.metadata and puts it into self.song_table_data. Returns: Name Type Description Dict Dict [ str , str ] a dictionary with all the data required for the song table Source code in src\\core\\songparser.py 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 def get_song_table_data ( self ) -> Dict [ str , str ]: \"\"\" get_song_table_data Looks at self.metadata and self.song_table_data and grabs all possible data from self.metadata and puts it into self.song_table_data. Returns: Dict: a dictionary with all the data required for the song table \"\"\" super () . get_song_table_data () self . song_table_data [ 'song_id' ] = self . hash # do the above but with if statements to check if the key exists if \"filepath\" in self . metadata : self . song_table_data [ \"filepath\" ] = self . metadata [ \"filepath\" ] if \"filesize\" in self . metadata : self . song_table_data [ \"filesize\" ] = self . metadata [ \"filesize\" ] if \"padding\" in self . metadata : self . song_table_data [ \"padding\" ] = self . metadata [ \"padding\" ] . size if \"pictures\" in self . metadata : if \"bit_depth\" in self . metadata [ \"pictures\" ][ 0 ]: self . song_table_data [ \"album_artwork_bit_depth\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"bit_depth\" ] if \"colors\" in self . metadata [ \"pictures\" ][ 0 ]: self . song_table_data [ \"album_artwork_colors\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"colors\" ] if \"height\" in self . metadata [ \"pictures\" ][ 0 ]: self . song_table_data [ \"album_artwork_height\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"height\" ] if \"width\" in self . metadata [ \"pictures\" ][ 0 ]: self . song_table_data [ \"album_artwork_width\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"width\" ] if \"streaminfo\" in self . metadata : if \"bit_depth\" in self . metadata [ \"streaminfo\" ]: self . song_table_data [ \"bit_depth\" ] = self . metadata [ \"streaminfo\" ][ \"bit_depth\" ] if \"bitrate\" in self . metadata [ \"streaminfo\" ]: self . song_table_data [ \"bitrate\" ] = self . metadata [ \"streaminfo\" ][ \"bitrate\" ] if \"channels\" in self . metadata [ \"streaminfo\" ]: self . song_table_data [ \"channels\" ] = self . metadata [ \"streaminfo\" ][ \"channels\" ] if \"duration\" in self . metadata [ \"streaminfo\" ]: self . song_table_data [ \"duration\" ] = self . metadata [ \"streaminfo\" ][ \"duration\" ] if \"sample_rate\" in self . metadata [ \"streaminfo\" ]: self . song_table_data [ \"sample_rate\" ] = self . metadata [ \"streaminfo\" ][ \"sample_rate\" ] if \"tags\" in self . metadata : if \"album\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"album\" ] = self . metadata [ \"tags\" ][ \"album\" ][ 0 ] if \"barcode\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"barcode\" ] = self . metadata [ \"tags\" ][ \"barcode\" ][ 0 ] if \"date\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"date_created\" ] = self . metadata [ \"tags\" ][ \"date\" ][ 0 ] if \"discnumber\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"disc_number\" ] = self . metadata [ \"tags\" ][ \"discnumber\" ][ 0 ] if \"disctotal\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"disc_total\" ] = self . metadata [ \"tags\" ][ \"disctotal\" ][ 0 ] if \"isrc\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"isrc\" ] = self . metadata [ \"tags\" ][ \"isrc\" ][ 0 ] if \"itunesadvisory\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"itunesadvisory\" ] = self . metadata [ \"tags\" ][ \"itunesadvisory\" ][ 0 ] if \"length\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"length\" ] = self . metadata [ \"tags\" ][ \"length\" ][ 0 ] if \"publisher\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"publisher\" ] = self . metadata [ \"tags\" ][ \"publisher\" ][ 0 ] if \"rating\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"rating\" ] = self . metadata [ \"tags\" ][ \"rating\" ][ 0 ] if \"title\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"title\" ] = self . metadata [ \"tags\" ][ \"title\" ][ 0 ] if \"tracknumber\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"track_number\" ] = self . metadata [ \"tags\" ][ \"tracknumber\" ][ 0 ] if \"tracktotal\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"track_total\" ] = self . metadata [ \"tags\" ][ \"tracktotal\" ][ 0 ] if \"source\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"source\" ] = self . metadata [ \"tags\" ][ \"source\" ][ 0 ] if \"artist\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"main_artist\" ] = self . metadata [ \"tags\" ][ \"artist\" ][ 0 ] return self . song_table_data loadMetadataParams ( params ) loadMetadataParams Loads the metadata of the FLAC file into the metadata variable. Necessary if not using filepaths. Parameters: Name Type Description Default params dict the metadata of the FLAC song file required Source code in src\\core\\songparser.py 161 162 163 164 165 166 167 168 def loadMetadataParams ( self , params : dict ) -> None : \"\"\" loadMetadataParams Loads the metadata of the FLAC file into the metadata variable. Necessary if not using filepaths. Args: params (dict): the metadata of the FLAC song file \"\"\" self . song_table_data = params load_file ( filepath ) load_file Loads the metadata of the FLAC file into the metadata variable. Parameters: Name Type Description Default filepath str the filepath of the FLAC song file (absolute path, use os.join) required Returns: Name Type Description _type_ None None Source code in src\\core\\songparser.py 148 149 150 151 152 153 154 155 156 157 158 159 def load_file ( self , filepath : str ) -> None : \"\"\" load_file Loads the metadata of the FLAC file into the metadata variable. Args: filepath (str): the filepath of the FLAC song file (absolute path, use os.join) Returns: _type_: None \"\"\" self . hash = file_to_hash ( filepath ) self . metadata = audio_metadata . load ( filepath ) make_song_table_data () make_song_table_data Instantiates the song_table_data dictionary with all the keys and values set to None. Source code in src\\core\\songparser.py 172 173 174 175 176 177 178 def make_song_table_data ( self ): \"\"\" make_song_table_data Instantiates the song_table_data dictionary with all the keys and values set to None. \"\"\" # there's so much data bruh, here's a big ass list that details everything # this method isn't really necessary, but I thinik it makes things cleaner self . song_table_data = config . song_table_data . copy () SongFileMP3 Bases: SongFile Source code in src\\core\\songparser.pyclass SongFileMP3 ( SongFile ): def __init__ ( self ): super () . __init__ () self . make_song_table_data () def load_file ( self , filepath : str ) -> None : \"\"\" load_file Loads the metadata of the FLAC file into the metadata variable. Args: filepath (str): the filepath of the FLAC song file (absolute path, use os.join) Returns: _type_: None \"\"\" self . metadata = audio_metadata . load ( filepath ) self . hash = file_to_hash ( filepath ) def make_song_table_data ( self ): \"\"\" make_song_table_data makes the song table data from the metadata \"\"\" self . song_table_data = config . song_table_data . copy () def get_song_table_data ( self ) -> Dict [ str , Any ]: \"\"\" get_song_table_data gets the song table data from the metadata Returns: Dict[str, Any]: dictionary of song table data \"\"\" super () . get_song_table_data () # MP3({ # 'filepath': 'c:\\\\Users\\\\drale\\\\Documents\\\\GitHub\\\\decibl-docker\\\\src\\\\soundfiles\\\\mp3_with_art.mp3', # 'filesize': '7.98 MiB', # 'pictures': [ # <ID3v2Picture({ # 'data': '1.10 MiB', # 'description': '', # 'height': 1200, # 'mime_type': 'image/jpeg', # 'type': <ID3PictureType.COVER_FRONT>, # 'width': 1200, # })>, # ], # 'streaminfo': <MP3StreamInfo({ # 'bitrate': '245 Kbps', # 'bitrate_mode': <MP3BitrateMode.ABR>, # 'channel_mode': <MP3ChannelMode.JOINT_STEREO>, # 'channels': 2, # 'duration': '03:56', # 'layer': 3, # 'protected': False, # 'sample_rate': '44.1 KHz', # 'version': 1, # })>, # 'tags': <ID3v2Frames({ # 'album': ['Bakusou Yumeuta'], # 'artist': [\"Diggy-MO'\"], # 'comment': [ # <ID3v2Comment({ # 'description': '', # 'language': 'eng', # 'text': 'Download at: https://www.yumeost.club/', # })>, # ], # 'date': ['2008'], # 'discnumber': ['1'], # 'genre': ['Anime'], # 'rating': [ # <ID3v2Popularimeter({'count': 0, 'email': 'MusicBee', 'rating': 242})>, # ], # 'title': ['Bakusou Yumeuta (\\u7206\\u8d70\\u5922\\u6b4c)'], # 'tracknumber': ['1'], # })>, # })> self . song_table_data [ \"song_id\" ] = self . hash if \"filepath\" in self . metadata : self . song_table_data [ \"filepath\" ] = self . metadata [ \"filepath\" ] if \"filesize\" in self . metadata : self . song_table_data [ \"filesize\" ] = self . metadata [ \"filesize\" ] if len ( self . metadata [ \"pictures\" ]) > 0 : self . song_table_data [ \"album_artwork_height\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"height\" ] self . song_table_data [ \"album_artwork_width\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"width\" ] if \"streaminfo\" in self . metadata : self . song_table_data [ \"bitrate\" ] = self . metadata [ \"streaminfo\" ][ \"bitrate\" ] self . song_table_data [ \"channels\" ] = self . metadata [ \"streaminfo\" ][ \"channels\" ] self . song_table_data [ \"duration\" ] = self . metadata [ \"streaminfo\" ][ \"duration\" ] self . song_table_data [ \"sample_rate\" ] = self . metadata [ \"streaminfo\" ][ \"sample_rate\" ] if \"tags\" in self . metadata : if \"album\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"album\" ] = self . metadata [ \"tags\" ][ \"album\" ][ 0 ] if \"artist\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"main_artist\" ] = self . metadata [ \"tags\" ][ \"artist\" ][ 0 ] if \"date\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"date_created\" ] = self . metadata [ \"tags\" ][ \"date\" ][ 0 ] if \"discnumber\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"disc_number\" ] = self . metadata [ \"tags\" ][ \"discnumber\" ][ 0 ] if \"title\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"title\" ] = self . metadata [ \"tags\" ][ \"title\" ][ 0 ] if \"tracknumber\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"track_number\" ] = self . metadata [ \"tags\" ][ \"tracknumber\" ][ 0 ] if self . song_table_data [ \"title\" ] is None : self . song_table_data [ \"title\" ] = self . song_table_data [ \"filepath\" ] . split ( \" \\\\ \" )[ - 1 ] . split ( \".\" )[ 0 ] if self . song_table_data [ \"main_artist\" ] is None : self . song_table_data [ \"main_artist\" ] = \"Unknown Artist\" return self . song_table_data def get_album_artist_data ( self ) -> List [ str ]: \"\"\" get_album_artist_data gets the album artist data from the metadata Returns: List[str]: list of album artists for FLAC files \"\"\" super () . get_album_artist_data () if \"albumartist\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"artist\" ] else : return None def get_song_artist_data ( self ) -> List [ str ]: \"\"\" get_song_artist_data gets the song artist data from the metadata Returns: List[str]: list of song artists for FLAC files \"\"\" super () . get_song_artist_data () if \"artist\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"artist\" ] else : return None def get_composer_data ( self ) -> List [ str ]: return None def get_genre_data ( self ) -> List [ str ]: \"\"\" get_genre_data gets the genre data from the metadata Returns: List[str]: list of genres for FLAC files \"\"\" super () . get_genre_data () if \"genre\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"genre\" ] else : return None def __str__ ( self ) -> str : return self . get_song_table_data () . __str__ () def __repr__ ( self ) -> str : return self . get_song_table_data () . __repr__ () get_album_artist_data () get_album_artist_data gets the album artist data from the metadata Returns: Type Description List [ str ] List[str]: list of album artists for FLAC files Source code in src\\core\\songparser.py 418 419 420 421 422 423 424 425 426 427 428 429 def get_album_artist_data ( self ) -> List [ str ]: \"\"\" get_album_artist_data gets the album artist data from the metadata Returns: List[str]: list of album artists for FLAC files \"\"\" super () . get_album_artist_data () if \"albumartist\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"artist\" ] else : return None get_genre_data () get_genre_data gets the genre data from the metadata Returns: Type Description List [ str ] List[str]: list of genres for FLAC files Source code in src\\core\\songparser.py 448 449 450 451 452 453 454 455 456 457 458 459 def get_genre_data ( self ) -> List [ str ]: \"\"\" get_genre_data gets the genre data from the metadata Returns: List[str]: list of genres for FLAC files \"\"\" super () . get_genre_data () if \"genre\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"genre\" ] else : return None get_song_artist_data () get_song_artist_data gets the song artist data from the metadata Returns: Type Description List [ str ] List[str]: list of song artists for FLAC files Source code in src\\core\\songparser.py 431 432 433 434 435 436 437 438 439 440 441 442 443 def get_song_artist_data ( self ) -> List [ str ]: \"\"\" get_song_artist_data gets the song artist data from the metadata Returns: List[str]: list of song artists for FLAC files \"\"\" super () . get_song_artist_data () if \"artist\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"artist\" ] else : return None get_song_table_data () get_song_table_data gets the song table data from the metadata Returns: Type Description Dict [ str , Any ] Dict[str, Any]: dictionary of song table data Source code in src\\core\\songparser.py 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 def get_song_table_data ( self ) -> Dict [ str , Any ]: \"\"\" get_song_table_data gets the song table data from the metadata Returns: Dict[str, Any]: dictionary of song table data \"\"\" super () . get_song_table_data () # MP3({ # 'filepath': 'c:\\\\Users\\\\drale\\\\Documents\\\\GitHub\\\\decibl-docker\\\\src\\\\soundfiles\\\\mp3_with_art.mp3', # 'filesize': '7.98 MiB', # 'pictures': [ # <ID3v2Picture({ # 'data': '1.10 MiB', # 'description': '', # 'height': 1200, # 'mime_type': 'image/jpeg', # 'type': <ID3PictureType.COVER_FRONT>, # 'width': 1200, # })>, # ], # 'streaminfo': <MP3StreamInfo({ # 'bitrate': '245 Kbps', # 'bitrate_mode': <MP3BitrateMode.ABR>, # 'channel_mode': <MP3ChannelMode.JOINT_STEREO>, # 'channels': 2, # 'duration': '03:56', # 'layer': 3, # 'protected': False, # 'sample_rate': '44.1 KHz', # 'version': 1, # })>, # 'tags': <ID3v2Frames({ # 'album': ['Bakusou Yumeuta'], # 'artist': [\"Diggy-MO'\"], # 'comment': [ # <ID3v2Comment({ # 'description': '', # 'language': 'eng', # 'text': 'Download at: https://www.yumeost.club/', # })>, # ], # 'date': ['2008'], # 'discnumber': ['1'], # 'genre': ['Anime'], # 'rating': [ # <ID3v2Popularimeter({'count': 0, 'email': 'MusicBee', 'rating': 242})>, # ], # 'title': ['Bakusou Yumeuta (\\u7206\\u8d70\\u5922\\u6b4c)'], # 'tracknumber': ['1'], # })>, # })> self . song_table_data [ \"song_id\" ] = self . hash if \"filepath\" in self . metadata : self . song_table_data [ \"filepath\" ] = self . metadata [ \"filepath\" ] if \"filesize\" in self . metadata : self . song_table_data [ \"filesize\" ] = self . metadata [ \"filesize\" ] if len ( self . metadata [ \"pictures\" ]) > 0 : self . song_table_data [ \"album_artwork_height\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"height\" ] self . song_table_data [ \"album_artwork_width\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"width\" ] if \"streaminfo\" in self . metadata : self . song_table_data [ \"bitrate\" ] = self . metadata [ \"streaminfo\" ][ \"bitrate\" ] self . song_table_data [ \"channels\" ] = self . metadata [ \"streaminfo\" ][ \"channels\" ] self . song_table_data [ \"duration\" ] = self . metadata [ \"streaminfo\" ][ \"duration\" ] self . song_table_data [ \"sample_rate\" ] = self . metadata [ \"streaminfo\" ][ \"sample_rate\" ] if \"tags\" in self . metadata : if \"album\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"album\" ] = self . metadata [ \"tags\" ][ \"album\" ][ 0 ] if \"artist\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"main_artist\" ] = self . metadata [ \"tags\" ][ \"artist\" ][ 0 ] if \"date\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"date_created\" ] = self . metadata [ \"tags\" ][ \"date\" ][ 0 ] if \"discnumber\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"disc_number\" ] = self . metadata [ \"tags\" ][ \"discnumber\" ][ 0 ] if \"title\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"title\" ] = self . metadata [ \"tags\" ][ \"title\" ][ 0 ] if \"tracknumber\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"track_number\" ] = self . metadata [ \"tags\" ][ \"tracknumber\" ][ 0 ] if self . song_table_data [ \"title\" ] is None : self . song_table_data [ \"title\" ] = self . song_table_data [ \"filepath\" ] . split ( \" \\\\ \" )[ - 1 ] . split ( \".\" )[ 0 ] if self . song_table_data [ \"main_artist\" ] is None : self . song_table_data [ \"main_artist\" ] = \"Unknown Artist\" return self . song_table_data load_file ( filepath ) load_file Loads the metadata of the FLAC file into the metadata variable. Parameters: Name Type Description Default filepath str the filepath of the FLAC song file (absolute path, use os.join) required Returns: Name Type Description _type_ None None Source code in src\\core\\songparser.py 309 310 311 312 313 314 315 316 317 318 319 320 321 def load_file ( self , filepath : str ) -> None : \"\"\" load_file Loads the metadata of the FLAC file into the metadata variable. Args: filepath (str): the filepath of the FLAC song file (absolute path, use os.join) Returns: _type_: None \"\"\" self . metadata = audio_metadata . load ( filepath ) self . hash = file_to_hash ( filepath ) make_song_table_data () make_song_table_data makes the song table data from the metadata Source code in src\\core\\songparser.py 323 324 325 326 327 328 def make_song_table_data ( self ): \"\"\" make_song_table_data makes the song table data from the metadata \"\"\" self . song_table_data = config . song_table_data . copy () SongMetadata Source code in src\\core\\songparser.py 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 class SongMetadata : # Songs have a lot of Metadata! We want to store as much as possible. # We will store the following: # - filepath # - filesize (in bytes) # - padding (in bytes) # - Album Artwork Bit Depth (in bits) # - Album Artwork Colors (int) # - Album Artwork Size (in bytes) # - Album Artwork Height (in pixels) # - Album Artwork Width (in pixels) # - bit_depth (in bits) # - bitrates (in Kbps) # - channels (int) # - duration (in seconds) # - sample_rate (in KHz) # - Album # - Album Artists # - Song Artists # - Barcode # - Composers # - Date Created (in YYYY-MM-DD) # - Disc Number # - Disc Total # - ISRC # - itunesadvisory # - length # - publisher # - rating # - title # - track number # - track total # - favorited (bool) def __init__ ( self , filepath = None ): \"\"\"Initialize the SongMetadata object. We want to see what file type it is, and load the correct file.\"\"\" if filepath != None : self . extension = os . path . splitext ( filepath )[ 1 ] self . songfile = None if self . extension == \".flac\" : self . songfile = SongFileFLAC () self . songfile . load_file ( filepath ) elif self . extension == \".mp3\" : self . songfile = SongFileMP3 () self . songfile . load_file ( filepath ) else : logging . error ( \"File type not supported: \" + self . extension ) def get_song_table_data ( self ) -> Dict [ str , str ]: \"\"\" get_song_table_data Gets the required song data for inserting into the database depending on the file Returns: Dict[str, str]: Dictionary of song data \"\"\" if self . songfile is not None : return self . songfile . get_song_table_data () def get_album_artist_data ( self ) -> List [ str ]: \"\"\" get_album_artist_data Gets the album artist data for inserting into the database depending on the file Returns: List[str]: List of album artists \"\"\" if self . songfile is not None : return self . songfile . get_album_artist_data () def get_song_artist_data ( self ) -> List [ str ]: \"\"\" get_song_artist_data Gets the song artist data for inserting into the database depending on the file Returns: List[str]: List of song artists \"\"\" if self . songfile is not None : return self . songfile . get_song_artist_data () def get_composer_data ( self ) -> List [ str ]: \"\"\" get_composer_data Gets the composer data for inserting into the database depending on the file Returns: List[str]: List of composers \"\"\" if self . songfile is not None : return self . songfile . get_composer_data () def get_genre_data ( self ) -> List [ str ]: \"\"\" get_genre_data Gets the genre data for inserting into the database depending on the file Returns: List[str]: List of genres \"\"\" if self . songfile is not None : return self . songfile . get_genre_data () # when printed, print the metadata def __str__ ( self ): return str ( self . songfile . metadata ) # when printed, print the metadata def __repr__ ( self ): return str ( self . songfile . metadata ) __init__ ( filepath = None ) Initialize the SongMetadata object. We want to see what file type it is, and load the correct file. Source code in src\\core\\songparser.py 503 504 505 506 507 508 509 510 511 512 513 514 515 516 def __init__ ( self , filepath = None ): \"\"\"Initialize the SongMetadata object. We want to see what file type it is, and load the correct file.\"\"\" if filepath != None : self . extension = os . path . splitext ( filepath )[ 1 ] self . songfile = None if self . extension == \".flac\" : self . songfile = SongFileFLAC () self . songfile . load_file ( filepath ) elif self . extension == \".mp3\" : self . songfile = SongFileMP3 () self . songfile . load_file ( filepath ) else : logging . error ( \"File type not supported: \" + self . extension ) get_album_artist_data () get_album_artist_data Gets the album artist data for inserting into the database depending on the file Returns: Type Description List [ str ] List[str]: List of album artists Source code in src\\core\\songparser.py 529 530 531 532 533 534 535 536 537 def get_album_artist_data ( self ) -> List [ str ]: \"\"\" get_album_artist_data Gets the album artist data for inserting into the database depending on the file Returns: List[str]: List of album artists \"\"\" if self . songfile is not None : return self . songfile . get_album_artist_data () get_composer_data () get_composer_data Gets the composer data for inserting into the database depending on the file Returns: Type Description List [ str ] List[str]: List of composers Source code in src\\core\\songparser.py 549 550 551 552 553 554 555 556 557 def get_composer_data ( self ) -> List [ str ]: \"\"\" get_composer_data Gets the composer data for inserting into the database depending on the file Returns: List[str]: List of composers \"\"\" if self . songfile is not None : return self . songfile . get_composer_data () get_genre_data () get_genre_data Gets the genre data for inserting into the database depending on the file Returns: Type Description List [ str ] List[str]: List of genres Source code in src\\core\\songparser.py 559 560 561 562 563 564 565 566 567 def get_genre_data ( self ) -> List [ str ]: \"\"\" get_genre_data Gets the genre data for inserting into the database depending on the file Returns: List[str]: List of genres \"\"\" if self . songfile is not None : return self . songfile . get_genre_data () get_song_artist_data () get_song_artist_data Gets the song artist data for inserting into the database depending on the file Returns: Type Description List [ str ] List[str]: List of song artists Source code in src\\core\\songparser.py 539 540 541 542 543 544 545 546 547 def get_song_artist_data ( self ) -> List [ str ]: \"\"\" get_song_artist_data Gets the song artist data for inserting into the database depending on the file Returns: List[str]: List of song artists \"\"\" if self . songfile is not None : return self . songfile . get_song_artist_data () get_song_table_data () get_song_table_data Gets the required song data for inserting into the database depending on the file Returns: Type Description Dict [ str , str ] Dict[str, str]: Dictionary of song data Source code in src\\core\\songparser.py 519 520 521 522 523 524 525 526 527 def get_song_table_data ( self ) -> Dict [ str , str ]: \"\"\" get_song_table_data Gets the required song data for inserting into the database depending on the file Returns: Dict[str, str]: Dictionary of song data \"\"\" if self . songfile is not None : return self . songfile . get_song_table_data () file_to_hash ( filepath ) file_to_hash Get the SHA256 hash of a file. Parameters: Name Type Description Default filepath str Path to the file. required Returns: Name Type Description str str The SHA256 hash of the file. Source code in src\\core\\songparser.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 def file_to_hash ( filepath : str ) -> str : \"\"\" file_to_hash Get the SHA256 hash of a file. Args: filepath (str): Path to the file. Returns: str: The SHA256 hash of the file. \"\"\" # Open,close, read file and calculate SHA256 on its contents with open ( filepath , \"rb\" ) as f : bytes = f . read () # read entire file as bytes readable_hash = hashlib . sha256 ( bytes ) . hexdigest (); return readable_hash","title":"songparser.py"},{"location":"songparser/#overview","text":"We are using an abstract class SongFile which should be extended by child classes for each file type. For example: # This is what the parent class looks like class SongFile ( ABC ): # ABC means it's an abstract class @abstractmethod def get_song_table_data ( self ): pass # This is the class we want to make class SongFileFLAC ( SongFile ): # inherit from SongFile def get_song_table_data ( self ): # this is an abstract method, so we have to implement it super () . get_song_table_data () # call the parent method (named the exact same as current function) pass class SongFileMP3 ( SongFile ): # inherit from SongFile def get_song_table_data ( self ): # this is an abstract method, so we have to implement it super () . get_song_table_data () # call the parent method (named the exact same as current function) pass If you are adding support for a new file, there's some very important things you have to be aware of: Firstly, you need to create a child class of SongFile for your file type. Look at the above example for more information. Add your filetype to the __init__() function of the SongMetadata class. # This is what the init function will look like (maybe a little different since this was written but it will be same gist) def __init__ ( self , filepath ): \"\"\"Initialize the SongMetadata object. We want to see what file type it is, and load the correct file.\"\"\" self . extension = os . path . splitext ( filepath )[ 1 ] self . songfile = None if self . extension == \".flac\" : self . songfile = SongFileFLAC ( filepath ) # ----------------------------------------------# # Add your file type here! For example, for mp3:# # ----------------------------------------------# elif self . extension == \".mp3\" : self . songfile = SongFileMP3 ( filepath ) # change this to the class you made else : logging . error ( \"File type not supported: \" + self . extension ) Add the required methods. These are the following get_song_table_data(self) get_album_artist_data(self) get_song_artist_data(self) get_composer_data(self) get_genre_data(self) Here's the actual hard part, you have to return certain types of data for each of these methods","title":"Overview"},{"location":"songparser/#get_song_table_dataself","text":"This one has the most information. Here's the list of stuff you have to return \"main_artist\" : None , # string \"filesize\" : 0 , # int in bytes \"padding\" : None , # int in bytes \"album_artwork_bit_depth\" : None , # int in bits \"album_artwork_colors\" : None , # int \"album_artwork_height\" : None , # int in pixels \"album_artwork_width\" : None , # int in pixels \"bit_depth\" : None , # int in bits \"bitrate\" : None , # int in bits, divide by 1000 to get Kbps \"channels\" : None , # int \"duration\" : None , # int in seconds \"sample_rate\" : None , # int in KHz \"album\" : None , # string \"barcode\" : None , # string \"date_created\" : None , # string in YYYY-MM-DD \"disc_number\" : None , # int \"disc_total\" : None , # int \"isrc\" : None , # string \"itunesadvisory\" : None , # string \"length\" : None , # int \"publisher\" : None , # string \"rating\" : None , # int \"title\" : \"Missing\" , # string \"track_number\" : None , # int \"track_total\" : None , # int \"source\" : None , # string It HAS to be a dict with all these keys, if you don't have the value for one, set it to None .","title":"get_song_table_data(self)"},{"location":"songparser/#get_album_artist_dataself","text":"This one is a little easier. Just return a list of the album artists [ \"artist1\" , \"artist2\" , \"artist3\" ]","title":"get_album_artist_data(self)"},{"location":"songparser/#get_song_artist_dataself","text":"Same thing as above, but for song artists [ \"artist1\" , \"artist2\" , \"artist3\" ]","title":"get_song_artist_data(self)"},{"location":"songparser/#get_composer_dataself","text":"Same thing as above, but for composers [ \"artist1\" , \"artist2\" , \"artist3\" ]","title":"get_composer_data(self)"},{"location":"songparser/#get_genre_dataself","text":"Same thing as above, but for genres [ \"genre1\" , \"genre2\" , \"genre3\" ]","title":"get_genre_data(self)"},{"location":"songparser/#src.core.songparser.SongFile","text":"Bases: ABC SongFile The core class for parsing metadata from song files Parameters: Name Type Description Default ABC _type_ Abstract Base Class required Source code in src\\core\\songparser.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 class SongFile ( ABC ): \"\"\" SongFile The core class for parsing metadata from song files Args: ABC (_type_): Abstract Base Class \"\"\" def __init__ ( self , filepath ): self . filepath = filepath self . filename = os . path . basename ( filepath ) logging . info ( \"Parsing metadata for \" + self . filename ) def __init__ ( self ): self . filepath = None self . filename = None @log_data @abstractmethod def load_file ( self , filepath ) -> None : \"\"\" load_file Abstract method to load a file Args: filepath (str): the path to the file \"\"\" pass @log_data @abstractmethod def get_song_table_data ( self ) -> Dict [ str , str ]: \"\"\" get_song_table_data Abstract method to get all the data required for the song table Returns: Dict: a dictionary with all the data required for the song table \"\"\" pass @log_data @abstractmethod def get_album_artist_data ( self ) -> List [ str ]: \"\"\" get_album_artist_data Abstract method to get all the data required for the album artist table Returns: List[str]: a list of all the album artists \"\"\" pass @log_data @abstractmethod def get_song_artist_data ( self ) -> List [ str ]: \"\"\" get_song_artist_data Abstract method to get all the data required for the song artist table Returns: List[str]: a list of all the song artists \"\"\" pass @log_data @abstractmethod def get_composer_data ( self ) -> List [ str ]: \"\"\" get_composer_data Abstract method to get all the data required for the composer table Returns: List[str]: a list of all the composers \"\"\" pass @log_data @abstractmethod def get_genre_data ( self ) -> List [ str ]: \"\"\" get_genre_data Abstract method to get all the data required for the genre table Returns: List[str]: a list of all the genres \"\"\" pass","title":"SongFile"},{"location":"songparser/#src.core.songparser.SongFile.get_album_artist_data","text":"get_album_artist_data Abstract method to get all the data required for the album artist table Returns: Type Description List [ str ] List[str]: a list of all the album artists Source code in src\\core\\songparser.py 78 79 80 81 82 83 84 85 86 87 @log_data @abstractmethod def get_album_artist_data ( self ) -> List [ str ]: \"\"\" get_album_artist_data Abstract method to get all the data required for the album artist table Returns: List[str]: a list of all the album artists \"\"\" pass","title":"get_album_artist_data()"},{"location":"songparser/#src.core.songparser.SongFile.get_composer_data","text":"get_composer_data Abstract method to get all the data required for the composer table Returns: Type Description List [ str ] List[str]: a list of all the composers Source code in src\\core\\songparser.py 100 101 102 103 104 105 106 107 108 109 @log_data @abstractmethod def get_composer_data ( self ) -> List [ str ]: \"\"\" get_composer_data Abstract method to get all the data required for the composer table Returns: List[str]: a list of all the composers \"\"\" pass","title":"get_composer_data()"},{"location":"songparser/#src.core.songparser.SongFile.get_genre_data","text":"get_genre_data Abstract method to get all the data required for the genre table Returns: Type Description List [ str ] List[str]: a list of all the genres Source code in src\\core\\songparser.py 111 112 113 114 115 116 117 118 119 120 @log_data @abstractmethod def get_genre_data ( self ) -> List [ str ]: \"\"\" get_genre_data Abstract method to get all the data required for the genre table Returns: List[str]: a list of all the genres \"\"\" pass","title":"get_genre_data()"},{"location":"songparser/#src.core.songparser.SongFile.get_song_artist_data","text":"get_song_artist_data Abstract method to get all the data required for the song artist table Returns: Type Description List [ str ] List[str]: a list of all the song artists Source code in src\\core\\songparser.py 89 90 91 92 93 94 95 96 97 98 @log_data @abstractmethod def get_song_artist_data ( self ) -> List [ str ]: \"\"\" get_song_artist_data Abstract method to get all the data required for the song artist table Returns: List[str]: a list of all the song artists \"\"\" pass","title":"get_song_artist_data()"},{"location":"songparser/#src.core.songparser.SongFile.get_song_table_data","text":"get_song_table_data Abstract method to get all the data required for the song table Returns: Name Type Description Dict Dict [ str , str ] a dictionary with all the data required for the song table Source code in src\\core\\songparser.py 67 68 69 70 71 72 73 74 75 76 @log_data @abstractmethod def get_song_table_data ( self ) -> Dict [ str , str ]: \"\"\" get_song_table_data Abstract method to get all the data required for the song table Returns: Dict: a dictionary with all the data required for the song table \"\"\" pass","title":"get_song_table_data()"},{"location":"songparser/#src.core.songparser.SongFile.load_file","text":"load_file Abstract method to load a file Parameters: Name Type Description Default filepath str the path to the file required Source code in src\\core\\songparser.py 56 57 58 59 60 61 62 63 64 65 @log_data @abstractmethod def load_file ( self , filepath ) -> None : \"\"\" load_file Abstract method to load a file Args: filepath (str): the path to the file \"\"\" pass","title":"load_file()"},{"location":"songparser/#src.core.songparser.SongFileFLAC","text":"Bases: SongFile Source code in src\\core\\songparser.pyclass SongFileFLAC ( SongFile ): # def __init__(self, filepath: str): # \"\"\" # __init__ constructor for SongFileFLAC # Args: # filepath (str): the filepath of the FLAC song file (absolute path, use os.join) # \"\"\" # super().__init__(filepath) # self.metadata = None # self.song_table_data = None # self.loadMetadata(filepath) # self.make_song_table_data() def __init__ ( self ): \"\"\" __init__ Default constructor for SongFileFLAC. Does nothing. \"\"\" super () . __init__ () self . metadata = None self . song_table_data = None self . make_song_table_data () def load_file ( self , filepath : str ) -> None : \"\"\" load_file Loads the metadata of the FLAC file into the metadata variable. Args: filepath (str): the filepath of the FLAC song file (absolute path, use os.join) Returns: _type_: None \"\"\" self . hash = file_to_hash ( filepath ) self . metadata = audio_metadata . load ( filepath ) def loadMetadataParams ( self , params : dict ) -> None : \"\"\" loadMetadataParams Loads the metadata of the FLAC file into the metadata variable. Necessary if not using filepaths. Args: params (dict): the metadata of the FLAC song file \"\"\" self . song_table_data = params def make_song_table_data ( self ): \"\"\" make_song_table_data Instantiates the song_table_data dictionary with all the keys and values set to None. \"\"\" # there's so much data bruh, here's a big ass list that details everything # this method isn't really necessary, but I thinik it makes things cleaner self . song_table_data = config . song_table_data . copy () def get_song_table_data ( self ) -> Dict [ str , str ]: \"\"\" get_song_table_data Looks at self.metadata and self.song_table_data and grabs all possible data from self.metadata and puts it into self.song_table_data. Returns: Dict: a dictionary with all the data required for the song table \"\"\" super () . get_song_table_data () self . song_table_data [ 'song_id' ] = self . hash # do the above but with if statements to check if the key exists if \"filepath\" in self . metadata : self . song_table_data [ \"filepath\" ] = self . metadata [ \"filepath\" ] if \"filesize\" in self . metadata : self . song_table_data [ \"filesize\" ] = self . metadata [ \"filesize\" ] if \"padding\" in self . metadata : self . song_table_data [ \"padding\" ] = self . metadata [ \"padding\" ] . size if \"pictures\" in self . metadata : if \"bit_depth\" in self . metadata [ \"pictures\" ][ 0 ]: self . song_table_data [ \"album_artwork_bit_depth\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"bit_depth\" ] if \"colors\" in self . metadata [ \"pictures\" ][ 0 ]: self . song_table_data [ \"album_artwork_colors\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"colors\" ] if \"height\" in self . metadata [ \"pictures\" ][ 0 ]: self . song_table_data [ \"album_artwork_height\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"height\" ] if \"width\" in self . metadata [ \"pictures\" ][ 0 ]: self . song_table_data [ \"album_artwork_width\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"width\" ] if \"streaminfo\" in self . metadata : if \"bit_depth\" in self . metadata [ \"streaminfo\" ]: self . song_table_data [ \"bit_depth\" ] = self . metadata [ \"streaminfo\" ][ \"bit_depth\" ] if \"bitrate\" in self . metadata [ \"streaminfo\" ]: self . song_table_data [ \"bitrate\" ] = self . metadata [ \"streaminfo\" ][ \"bitrate\" ] if \"channels\" in self . metadata [ \"streaminfo\" ]: self . song_table_data [ \"channels\" ] = self . metadata [ \"streaminfo\" ][ \"channels\" ] if \"duration\" in self . metadata [ \"streaminfo\" ]: self . song_table_data [ \"duration\" ] = self . metadata [ \"streaminfo\" ][ \"duration\" ] if \"sample_rate\" in self . metadata [ \"streaminfo\" ]: self . song_table_data [ \"sample_rate\" ] = self . metadata [ \"streaminfo\" ][ \"sample_rate\" ] if \"tags\" in self . metadata : if \"album\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"album\" ] = self . metadata [ \"tags\" ][ \"album\" ][ 0 ] if \"barcode\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"barcode\" ] = self . metadata [ \"tags\" ][ \"barcode\" ][ 0 ] if \"date\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"date_created\" ] = self . metadata [ \"tags\" ][ \"date\" ][ 0 ] if \"discnumber\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"disc_number\" ] = self . metadata [ \"tags\" ][ \"discnumber\" ][ 0 ] if \"disctotal\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"disc_total\" ] = self . metadata [ \"tags\" ][ \"disctotal\" ][ 0 ] if \"isrc\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"isrc\" ] = self . metadata [ \"tags\" ][ \"isrc\" ][ 0 ] if \"itunesadvisory\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"itunesadvisory\" ] = self . metadata [ \"tags\" ][ \"itunesadvisory\" ][ 0 ] if \"length\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"length\" ] = self . metadata [ \"tags\" ][ \"length\" ][ 0 ] if \"publisher\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"publisher\" ] = self . metadata [ \"tags\" ][ \"publisher\" ][ 0 ] if \"rating\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"rating\" ] = self . metadata [ \"tags\" ][ \"rating\" ][ 0 ] if \"title\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"title\" ] = self . metadata [ \"tags\" ][ \"title\" ][ 0 ] if \"tracknumber\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"track_number\" ] = self . metadata [ \"tags\" ][ \"tracknumber\" ][ 0 ] if \"tracktotal\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"track_total\" ] = self . metadata [ \"tags\" ][ \"tracktotal\" ][ 0 ] if \"source\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"source\" ] = self . metadata [ \"tags\" ][ \"source\" ][ 0 ] if \"artist\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"main_artist\" ] = self . metadata [ \"tags\" ][ \"artist\" ][ 0 ] return self . song_table_data def get_album_artist_data ( self ) -> List [ str ]: \"\"\" get_album_artist_data gets the album artist data from the metadata Returns: List[str]: list of album artists for FLAC files \"\"\" super () . get_album_artist_data () if \"albumartist\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"albumartist\" ] else : return None def get_song_artist_data ( self ) -> List [ str ]: \"\"\" get_song_artist_data gets the song artist data from the metadata Returns: List[str]: list of song artists for FLAC files \"\"\" super () . get_song_artist_data () if \"artist\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"artist\" ] else : return None def get_composer_data ( self ) -> List [ str ]: \"\"\" get_composer_data gets the composer data from the metadata Returns: List[str]: list of composers for FLAC files \"\"\" super () . get_composer_data () if \"composer\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"composer\" ] else : return None def get_genre_data ( self ) -> List [ str ]: \"\"\" get_genre_data gets the genre data from the metadata Returns: List[str]: list of genres for FLAC files \"\"\" super () . get_genre_data () if \"genre\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"genre\" ] else : return None","title":"SongFileFLAC"},{"location":"songparser/#src.core.songparser.SongFileFLAC.__init__","text":"init Default constructor for SongFileFLAC. Does nothing. Source code in src\\core\\songparser.py 139 140 141 142 143 144 145 146 def __init__ ( self ): \"\"\" __init__ Default constructor for SongFileFLAC. Does nothing. \"\"\" super () . __init__ () self . metadata = None self . song_table_data = None self . make_song_table_data ()","title":"__init__()"},{"location":"songparser/#src.core.songparser.SongFileFLAC.get_album_artist_data","text":"get_album_artist_data gets the album artist data from the metadata Returns: Type Description List [ str ] List[str]: list of album artists for FLAC files Source code in src\\core\\songparser.py 250 251 252 253 254 255 256 257 258 259 260 261 def get_album_artist_data ( self ) -> List [ str ]: \"\"\" get_album_artist_data gets the album artist data from the metadata Returns: List[str]: list of album artists for FLAC files \"\"\" super () . get_album_artist_data () if \"albumartist\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"albumartist\" ] else : return None","title":"get_album_artist_data()"},{"location":"songparser/#src.core.songparser.SongFileFLAC.get_composer_data","text":"get_composer_data gets the composer data from the metadata Returns: Type Description List [ str ] List[str]: list of composers for FLAC files Source code in src\\core\\songparser.py 277 278 279 280 281 282 283 284 285 286 287 288 def get_composer_data ( self ) -> List [ str ]: \"\"\" get_composer_data gets the composer data from the metadata Returns: List[str]: list of composers for FLAC files \"\"\" super () . get_composer_data () if \"composer\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"composer\" ] else : return None","title":"get_composer_data()"},{"location":"songparser/#src.core.songparser.SongFileFLAC.get_genre_data","text":"get_genre_data gets the genre data from the metadata Returns: Type Description List [ str ] List[str]: list of genres for FLAC files Source code in src\\core\\songparser.py 290 291 292 293 294 295 296 297 298 299 300 301 def get_genre_data ( self ) -> List [ str ]: \"\"\" get_genre_data gets the genre data from the metadata Returns: List[str]: list of genres for FLAC files \"\"\" super () . get_genre_data () if \"genre\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"genre\" ] else : return None","title":"get_genre_data()"},{"location":"songparser/#src.core.songparser.SongFileFLAC.get_song_artist_data","text":"get_song_artist_data gets the song artist data from the metadata Returns: Type Description List [ str ] List[str]: list of song artists for FLAC files Source code in src\\core\\songparser.py 263 264 265 266 267 268 269 270 271 272 273 274 275 def get_song_artist_data ( self ) -> List [ str ]: \"\"\" get_song_artist_data gets the song artist data from the metadata Returns: List[str]: list of song artists for FLAC files \"\"\" super () . get_song_artist_data () if \"artist\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"artist\" ] else : return None","title":"get_song_artist_data()"},{"location":"songparser/#src.core.songparser.SongFileFLAC.get_song_table_data","text":"get_song_table_data Looks at self.metadata and self.song_table_data and grabs all possible data from self.metadata and puts it into self.song_table_data. Returns: Name Type Description Dict Dict [ str , str ] a dictionary with all the data required for the song table Source code in src\\core\\songparser.py 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 def get_song_table_data ( self ) -> Dict [ str , str ]: \"\"\" get_song_table_data Looks at self.metadata and self.song_table_data and grabs all possible data from self.metadata and puts it into self.song_table_data. Returns: Dict: a dictionary with all the data required for the song table \"\"\" super () . get_song_table_data () self . song_table_data [ 'song_id' ] = self . hash # do the above but with if statements to check if the key exists if \"filepath\" in self . metadata : self . song_table_data [ \"filepath\" ] = self . metadata [ \"filepath\" ] if \"filesize\" in self . metadata : self . song_table_data [ \"filesize\" ] = self . metadata [ \"filesize\" ] if \"padding\" in self . metadata : self . song_table_data [ \"padding\" ] = self . metadata [ \"padding\" ] . size if \"pictures\" in self . metadata : if \"bit_depth\" in self . metadata [ \"pictures\" ][ 0 ]: self . song_table_data [ \"album_artwork_bit_depth\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"bit_depth\" ] if \"colors\" in self . metadata [ \"pictures\" ][ 0 ]: self . song_table_data [ \"album_artwork_colors\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"colors\" ] if \"height\" in self . metadata [ \"pictures\" ][ 0 ]: self . song_table_data [ \"album_artwork_height\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"height\" ] if \"width\" in self . metadata [ \"pictures\" ][ 0 ]: self . song_table_data [ \"album_artwork_width\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"width\" ] if \"streaminfo\" in self . metadata : if \"bit_depth\" in self . metadata [ \"streaminfo\" ]: self . song_table_data [ \"bit_depth\" ] = self . metadata [ \"streaminfo\" ][ \"bit_depth\" ] if \"bitrate\" in self . metadata [ \"streaminfo\" ]: self . song_table_data [ \"bitrate\" ] = self . metadata [ \"streaminfo\" ][ \"bitrate\" ] if \"channels\" in self . metadata [ \"streaminfo\" ]: self . song_table_data [ \"channels\" ] = self . metadata [ \"streaminfo\" ][ \"channels\" ] if \"duration\" in self . metadata [ \"streaminfo\" ]: self . song_table_data [ \"duration\" ] = self . metadata [ \"streaminfo\" ][ \"duration\" ] if \"sample_rate\" in self . metadata [ \"streaminfo\" ]: self . song_table_data [ \"sample_rate\" ] = self . metadata [ \"streaminfo\" ][ \"sample_rate\" ] if \"tags\" in self . metadata : if \"album\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"album\" ] = self . metadata [ \"tags\" ][ \"album\" ][ 0 ] if \"barcode\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"barcode\" ] = self . metadata [ \"tags\" ][ \"barcode\" ][ 0 ] if \"date\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"date_created\" ] = self . metadata [ \"tags\" ][ \"date\" ][ 0 ] if \"discnumber\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"disc_number\" ] = self . metadata [ \"tags\" ][ \"discnumber\" ][ 0 ] if \"disctotal\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"disc_total\" ] = self . metadata [ \"tags\" ][ \"disctotal\" ][ 0 ] if \"isrc\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"isrc\" ] = self . metadata [ \"tags\" ][ \"isrc\" ][ 0 ] if \"itunesadvisory\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"itunesadvisory\" ] = self . metadata [ \"tags\" ][ \"itunesadvisory\" ][ 0 ] if \"length\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"length\" ] = self . metadata [ \"tags\" ][ \"length\" ][ 0 ] if \"publisher\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"publisher\" ] = self . metadata [ \"tags\" ][ \"publisher\" ][ 0 ] if \"rating\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"rating\" ] = self . metadata [ \"tags\" ][ \"rating\" ][ 0 ] if \"title\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"title\" ] = self . metadata [ \"tags\" ][ \"title\" ][ 0 ] if \"tracknumber\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"track_number\" ] = self . metadata [ \"tags\" ][ \"tracknumber\" ][ 0 ] if \"tracktotal\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"track_total\" ] = self . metadata [ \"tags\" ][ \"tracktotal\" ][ 0 ] if \"source\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"source\" ] = self . metadata [ \"tags\" ][ \"source\" ][ 0 ] if \"artist\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"main_artist\" ] = self . metadata [ \"tags\" ][ \"artist\" ][ 0 ] return self . song_table_data","title":"get_song_table_data()"},{"location":"songparser/#src.core.songparser.SongFileFLAC.loadMetadataParams","text":"loadMetadataParams Loads the metadata of the FLAC file into the metadata variable. Necessary if not using filepaths. Parameters: Name Type Description Default params dict the metadata of the FLAC song file required Source code in src\\core\\songparser.py 161 162 163 164 165 166 167 168 def loadMetadataParams ( self , params : dict ) -> None : \"\"\" loadMetadataParams Loads the metadata of the FLAC file into the metadata variable. Necessary if not using filepaths. Args: params (dict): the metadata of the FLAC song file \"\"\" self . song_table_data = params","title":"loadMetadataParams()"},{"location":"songparser/#src.core.songparser.SongFileFLAC.load_file","text":"load_file Loads the metadata of the FLAC file into the metadata variable. Parameters: Name Type Description Default filepath str the filepath of the FLAC song file (absolute path, use os.join) required Returns: Name Type Description _type_ None None Source code in src\\core\\songparser.py 148 149 150 151 152 153 154 155 156 157 158 159 def load_file ( self , filepath : str ) -> None : \"\"\" load_file Loads the metadata of the FLAC file into the metadata variable. Args: filepath (str): the filepath of the FLAC song file (absolute path, use os.join) Returns: _type_: None \"\"\" self . hash = file_to_hash ( filepath ) self . metadata = audio_metadata . load ( filepath )","title":"load_file()"},{"location":"songparser/#src.core.songparser.SongFileFLAC.make_song_table_data","text":"make_song_table_data Instantiates the song_table_data dictionary with all the keys and values set to None. Source code in src\\core\\songparser.py 172 173 174 175 176 177 178 def make_song_table_data ( self ): \"\"\" make_song_table_data Instantiates the song_table_data dictionary with all the keys and values set to None. \"\"\" # there's so much data bruh, here's a big ass list that details everything # this method isn't really necessary, but I thinik it makes things cleaner self . song_table_data = config . song_table_data . copy ()","title":"make_song_table_data()"},{"location":"songparser/#src.core.songparser.SongFileMP3","text":"Bases: SongFile Source code in src\\core\\songparser.pyclass SongFileMP3 ( SongFile ): def __init__ ( self ): super () . __init__ () self . make_song_table_data () def load_file ( self , filepath : str ) -> None : \"\"\" load_file Loads the metadata of the FLAC file into the metadata variable. Args: filepath (str): the filepath of the FLAC song file (absolute path, use os.join) Returns: _type_: None \"\"\" self . metadata = audio_metadata . load ( filepath ) self . hash = file_to_hash ( filepath ) def make_song_table_data ( self ): \"\"\" make_song_table_data makes the song table data from the metadata \"\"\" self . song_table_data = config . song_table_data . copy () def get_song_table_data ( self ) -> Dict [ str , Any ]: \"\"\" get_song_table_data gets the song table data from the metadata Returns: Dict[str, Any]: dictionary of song table data \"\"\" super () . get_song_table_data () # MP3({ # 'filepath': 'c:\\\\Users\\\\drale\\\\Documents\\\\GitHub\\\\decibl-docker\\\\src\\\\soundfiles\\\\mp3_with_art.mp3', # 'filesize': '7.98 MiB', # 'pictures': [ # <ID3v2Picture({ # 'data': '1.10 MiB', # 'description': '', # 'height': 1200, # 'mime_type': 'image/jpeg', # 'type': <ID3PictureType.COVER_FRONT>, # 'width': 1200, # })>, # ], # 'streaminfo': <MP3StreamInfo({ # 'bitrate': '245 Kbps', # 'bitrate_mode': <MP3BitrateMode.ABR>, # 'channel_mode': <MP3ChannelMode.JOINT_STEREO>, # 'channels': 2, # 'duration': '03:56', # 'layer': 3, # 'protected': False, # 'sample_rate': '44.1 KHz', # 'version': 1, # })>, # 'tags': <ID3v2Frames({ # 'album': ['Bakusou Yumeuta'], # 'artist': [\"Diggy-MO'\"], # 'comment': [ # <ID3v2Comment({ # 'description': '', # 'language': 'eng', # 'text': 'Download at: https://www.yumeost.club/', # })>, # ], # 'date': ['2008'], # 'discnumber': ['1'], # 'genre': ['Anime'], # 'rating': [ # <ID3v2Popularimeter({'count': 0, 'email': 'MusicBee', 'rating': 242})>, # ], # 'title': ['Bakusou Yumeuta (\\u7206\\u8d70\\u5922\\u6b4c)'], # 'tracknumber': ['1'], # })>, # })> self . song_table_data [ \"song_id\" ] = self . hash if \"filepath\" in self . metadata : self . song_table_data [ \"filepath\" ] = self . metadata [ \"filepath\" ] if \"filesize\" in self . metadata : self . song_table_data [ \"filesize\" ] = self . metadata [ \"filesize\" ] if len ( self . metadata [ \"pictures\" ]) > 0 : self . song_table_data [ \"album_artwork_height\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"height\" ] self . song_table_data [ \"album_artwork_width\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"width\" ] if \"streaminfo\" in self . metadata : self . song_table_data [ \"bitrate\" ] = self . metadata [ \"streaminfo\" ][ \"bitrate\" ] self . song_table_data [ \"channels\" ] = self . metadata [ \"streaminfo\" ][ \"channels\" ] self . song_table_data [ \"duration\" ] = self . metadata [ \"streaminfo\" ][ \"duration\" ] self . song_table_data [ \"sample_rate\" ] = self . metadata [ \"streaminfo\" ][ \"sample_rate\" ] if \"tags\" in self . metadata : if \"album\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"album\" ] = self . metadata [ \"tags\" ][ \"album\" ][ 0 ] if \"artist\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"main_artist\" ] = self . metadata [ \"tags\" ][ \"artist\" ][ 0 ] if \"date\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"date_created\" ] = self . metadata [ \"tags\" ][ \"date\" ][ 0 ] if \"discnumber\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"disc_number\" ] = self . metadata [ \"tags\" ][ \"discnumber\" ][ 0 ] if \"title\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"title\" ] = self . metadata [ \"tags\" ][ \"title\" ][ 0 ] if \"tracknumber\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"track_number\" ] = self . metadata [ \"tags\" ][ \"tracknumber\" ][ 0 ] if self . song_table_data [ \"title\" ] is None : self . song_table_data [ \"title\" ] = self . song_table_data [ \"filepath\" ] . split ( \" \\\\ \" )[ - 1 ] . split ( \".\" )[ 0 ] if self . song_table_data [ \"main_artist\" ] is None : self . song_table_data [ \"main_artist\" ] = \"Unknown Artist\" return self . song_table_data def get_album_artist_data ( self ) -> List [ str ]: \"\"\" get_album_artist_data gets the album artist data from the metadata Returns: List[str]: list of album artists for FLAC files \"\"\" super () . get_album_artist_data () if \"albumartist\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"artist\" ] else : return None def get_song_artist_data ( self ) -> List [ str ]: \"\"\" get_song_artist_data gets the song artist data from the metadata Returns: List[str]: list of song artists for FLAC files \"\"\" super () . get_song_artist_data () if \"artist\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"artist\" ] else : return None def get_composer_data ( self ) -> List [ str ]: return None def get_genre_data ( self ) -> List [ str ]: \"\"\" get_genre_data gets the genre data from the metadata Returns: List[str]: list of genres for FLAC files \"\"\" super () . get_genre_data () if \"genre\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"genre\" ] else : return None def __str__ ( self ) -> str : return self . get_song_table_data () . __str__ () def __repr__ ( self ) -> str : return self . get_song_table_data () . __repr__ ()","title":"SongFileMP3"},{"location":"songparser/#src.core.songparser.SongFileMP3.get_album_artist_data","text":"get_album_artist_data gets the album artist data from the metadata Returns: Type Description List [ str ] List[str]: list of album artists for FLAC files Source code in src\\core\\songparser.py 418 419 420 421 422 423 424 425 426 427 428 429 def get_album_artist_data ( self ) -> List [ str ]: \"\"\" get_album_artist_data gets the album artist data from the metadata Returns: List[str]: list of album artists for FLAC files \"\"\" super () . get_album_artist_data () if \"albumartist\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"artist\" ] else : return None","title":"get_album_artist_data()"},{"location":"songparser/#src.core.songparser.SongFileMP3.get_genre_data","text":"get_genre_data gets the genre data from the metadata Returns: Type Description List [ str ] List[str]: list of genres for FLAC files Source code in src\\core\\songparser.py 448 449 450 451 452 453 454 455 456 457 458 459 def get_genre_data ( self ) -> List [ str ]: \"\"\" get_genre_data gets the genre data from the metadata Returns: List[str]: list of genres for FLAC files \"\"\" super () . get_genre_data () if \"genre\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"genre\" ] else : return None","title":"get_genre_data()"},{"location":"songparser/#src.core.songparser.SongFileMP3.get_song_artist_data","text":"get_song_artist_data gets the song artist data from the metadata Returns: Type Description List [ str ] List[str]: list of song artists for FLAC files Source code in src\\core\\songparser.py 431 432 433 434 435 436 437 438 439 440 441 442 443 def get_song_artist_data ( self ) -> List [ str ]: \"\"\" get_song_artist_data gets the song artist data from the metadata Returns: List[str]: list of song artists for FLAC files \"\"\" super () . get_song_artist_data () if \"artist\" in self . metadata [ \"tags\" ]: return self . metadata [ \"tags\" ][ \"artist\" ] else : return None","title":"get_song_artist_data()"},{"location":"songparser/#src.core.songparser.SongFileMP3.get_song_table_data","text":"get_song_table_data gets the song table data from the metadata Returns: Type Description Dict [ str , Any ] Dict[str, Any]: dictionary of song table data Source code in src\\core\\songparser.py 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 def get_song_table_data ( self ) -> Dict [ str , Any ]: \"\"\" get_song_table_data gets the song table data from the metadata Returns: Dict[str, Any]: dictionary of song table data \"\"\" super () . get_song_table_data () # MP3({ # 'filepath': 'c:\\\\Users\\\\drale\\\\Documents\\\\GitHub\\\\decibl-docker\\\\src\\\\soundfiles\\\\mp3_with_art.mp3', # 'filesize': '7.98 MiB', # 'pictures': [ # <ID3v2Picture({ # 'data': '1.10 MiB', # 'description': '', # 'height': 1200, # 'mime_type': 'image/jpeg', # 'type': <ID3PictureType.COVER_FRONT>, # 'width': 1200, # })>, # ], # 'streaminfo': <MP3StreamInfo({ # 'bitrate': '245 Kbps', # 'bitrate_mode': <MP3BitrateMode.ABR>, # 'channel_mode': <MP3ChannelMode.JOINT_STEREO>, # 'channels': 2, # 'duration': '03:56', # 'layer': 3, # 'protected': False, # 'sample_rate': '44.1 KHz', # 'version': 1, # })>, # 'tags': <ID3v2Frames({ # 'album': ['Bakusou Yumeuta'], # 'artist': [\"Diggy-MO'\"], # 'comment': [ # <ID3v2Comment({ # 'description': '', # 'language': 'eng', # 'text': 'Download at: https://www.yumeost.club/', # })>, # ], # 'date': ['2008'], # 'discnumber': ['1'], # 'genre': ['Anime'], # 'rating': [ # <ID3v2Popularimeter({'count': 0, 'email': 'MusicBee', 'rating': 242})>, # ], # 'title': ['Bakusou Yumeuta (\\u7206\\u8d70\\u5922\\u6b4c)'], # 'tracknumber': ['1'], # })>, # })> self . song_table_data [ \"song_id\" ] = self . hash if \"filepath\" in self . metadata : self . song_table_data [ \"filepath\" ] = self . metadata [ \"filepath\" ] if \"filesize\" in self . metadata : self . song_table_data [ \"filesize\" ] = self . metadata [ \"filesize\" ] if len ( self . metadata [ \"pictures\" ]) > 0 : self . song_table_data [ \"album_artwork_height\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"height\" ] self . song_table_data [ \"album_artwork_width\" ] = self . metadata [ \"pictures\" ][ 0 ][ \"width\" ] if \"streaminfo\" in self . metadata : self . song_table_data [ \"bitrate\" ] = self . metadata [ \"streaminfo\" ][ \"bitrate\" ] self . song_table_data [ \"channels\" ] = self . metadata [ \"streaminfo\" ][ \"channels\" ] self . song_table_data [ \"duration\" ] = self . metadata [ \"streaminfo\" ][ \"duration\" ] self . song_table_data [ \"sample_rate\" ] = self . metadata [ \"streaminfo\" ][ \"sample_rate\" ] if \"tags\" in self . metadata : if \"album\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"album\" ] = self . metadata [ \"tags\" ][ \"album\" ][ 0 ] if \"artist\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"main_artist\" ] = self . metadata [ \"tags\" ][ \"artist\" ][ 0 ] if \"date\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"date_created\" ] = self . metadata [ \"tags\" ][ \"date\" ][ 0 ] if \"discnumber\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"disc_number\" ] = self . metadata [ \"tags\" ][ \"discnumber\" ][ 0 ] if \"title\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"title\" ] = self . metadata [ \"tags\" ][ \"title\" ][ 0 ] if \"tracknumber\" in self . metadata [ \"tags\" ]: self . song_table_data [ \"track_number\" ] = self . metadata [ \"tags\" ][ \"tracknumber\" ][ 0 ] if self . song_table_data [ \"title\" ] is None : self . song_table_data [ \"title\" ] = self . song_table_data [ \"filepath\" ] . split ( \" \\\\ \" )[ - 1 ] . split ( \".\" )[ 0 ] if self . song_table_data [ \"main_artist\" ] is None : self . song_table_data [ \"main_artist\" ] = \"Unknown Artist\" return self . song_table_data","title":"get_song_table_data()"},{"location":"songparser/#src.core.songparser.SongFileMP3.load_file","text":"load_file Loads the metadata of the FLAC file into the metadata variable. Parameters: Name Type Description Default filepath str the filepath of the FLAC song file (absolute path, use os.join) required Returns: Name Type Description _type_ None None Source code in src\\core\\songparser.py 309 310 311 312 313 314 315 316 317 318 319 320 321 def load_file ( self , filepath : str ) -> None : \"\"\" load_file Loads the metadata of the FLAC file into the metadata variable. Args: filepath (str): the filepath of the FLAC song file (absolute path, use os.join) Returns: _type_: None \"\"\" self . metadata = audio_metadata . load ( filepath ) self . hash = file_to_hash ( filepath )","title":"load_file()"},{"location":"songparser/#src.core.songparser.SongFileMP3.make_song_table_data","text":"make_song_table_data makes the song table data from the metadata Source code in src\\core\\songparser.py 323 324 325 326 327 328 def make_song_table_data ( self ): \"\"\" make_song_table_data makes the song table data from the metadata \"\"\" self . song_table_data = config . song_table_data . copy ()","title":"make_song_table_data()"},{"location":"songparser/#src.core.songparser.SongMetadata","text":"Source code in src\\core\\songparser.py 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 568 569 570 571 572 573 574 575 576 class SongMetadata : # Songs have a lot of Metadata! We want to store as much as possible. # We will store the following: # - filepath # - filesize (in bytes) # - padding (in bytes) # - Album Artwork Bit Depth (in bits) # - Album Artwork Colors (int) # - Album Artwork Size (in bytes) # - Album Artwork Height (in pixels) # - Album Artwork Width (in pixels) # - bit_depth (in bits) # - bitrates (in Kbps) # - channels (int) # - duration (in seconds) # - sample_rate (in KHz) # - Album # - Album Artists # - Song Artists # - Barcode # - Composers # - Date Created (in YYYY-MM-DD) # - Disc Number # - Disc Total # - ISRC # - itunesadvisory # - length # - publisher # - rating # - title # - track number # - track total # - favorited (bool) def __init__ ( self , filepath = None ): \"\"\"Initialize the SongMetadata object. We want to see what file type it is, and load the correct file.\"\"\" if filepath != None : self . extension = os . path . splitext ( filepath )[ 1 ] self . songfile = None if self . extension == \".flac\" : self . songfile = SongFileFLAC () self . songfile . load_file ( filepath ) elif self . extension == \".mp3\" : self . songfile = SongFileMP3 () self . songfile . load_file ( filepath ) else : logging . error ( \"File type not supported: \" + self . extension ) def get_song_table_data ( self ) -> Dict [ str , str ]: \"\"\" get_song_table_data Gets the required song data for inserting into the database depending on the file Returns: Dict[str, str]: Dictionary of song data \"\"\" if self . songfile is not None : return self . songfile . get_song_table_data () def get_album_artist_data ( self ) -> List [ str ]: \"\"\" get_album_artist_data Gets the album artist data for inserting into the database depending on the file Returns: List[str]: List of album artists \"\"\" if self . songfile is not None : return self . songfile . get_album_artist_data () def get_song_artist_data ( self ) -> List [ str ]: \"\"\" get_song_artist_data Gets the song artist data for inserting into the database depending on the file Returns: List[str]: List of song artists \"\"\" if self . songfile is not None : return self . songfile . get_song_artist_data () def get_composer_data ( self ) -> List [ str ]: \"\"\" get_composer_data Gets the composer data for inserting into the database depending on the file Returns: List[str]: List of composers \"\"\" if self . songfile is not None : return self . songfile . get_composer_data () def get_genre_data ( self ) -> List [ str ]: \"\"\" get_genre_data Gets the genre data for inserting into the database depending on the file Returns: List[str]: List of genres \"\"\" if self . songfile is not None : return self . songfile . get_genre_data () # when printed, print the metadata def __str__ ( self ): return str ( self . songfile . metadata ) # when printed, print the metadata def __repr__ ( self ): return str ( self . songfile . metadata )","title":"SongMetadata"},{"location":"songparser/#src.core.songparser.SongMetadata.__init__","text":"Initialize the SongMetadata object. We want to see what file type it is, and load the correct file. Source code in src\\core\\songparser.py 503 504 505 506 507 508 509 510 511 512 513 514 515 516 def __init__ ( self , filepath = None ): \"\"\"Initialize the SongMetadata object. We want to see what file type it is, and load the correct file.\"\"\" if filepath != None : self . extension = os . path . splitext ( filepath )[ 1 ] self . songfile = None if self . extension == \".flac\" : self . songfile = SongFileFLAC () self . songfile . load_file ( filepath ) elif self . extension == \".mp3\" : self . songfile = SongFileMP3 () self . songfile . load_file ( filepath ) else : logging . error ( \"File type not supported: \" + self . extension )","title":"__init__()"},{"location":"songparser/#src.core.songparser.SongMetadata.get_album_artist_data","text":"get_album_artist_data Gets the album artist data for inserting into the database depending on the file Returns: Type Description List [ str ] List[str]: List of album artists Source code in src\\core\\songparser.py 529 530 531 532 533 534 535 536 537 def get_album_artist_data ( self ) -> List [ str ]: \"\"\" get_album_artist_data Gets the album artist data for inserting into the database depending on the file Returns: List[str]: List of album artists \"\"\" if self . songfile is not None : return self . songfile . get_album_artist_data ()","title":"get_album_artist_data()"},{"location":"songparser/#src.core.songparser.SongMetadata.get_composer_data","text":"get_composer_data Gets the composer data for inserting into the database depending on the file Returns: Type Description List [ str ] List[str]: List of composers Source code in src\\core\\songparser.py 549 550 551 552 553 554 555 556 557 def get_composer_data ( self ) -> List [ str ]: \"\"\" get_composer_data Gets the composer data for inserting into the database depending on the file Returns: List[str]: List of composers \"\"\" if self . songfile is not None : return self . songfile . get_composer_data ()","title":"get_composer_data()"},{"location":"songparser/#src.core.songparser.SongMetadata.get_genre_data","text":"get_genre_data Gets the genre data for inserting into the database depending on the file Returns: Type Description List [ str ] List[str]: List of genres Source code in src\\core\\songparser.py 559 560 561 562 563 564 565 566 567 def get_genre_data ( self ) -> List [ str ]: \"\"\" get_genre_data Gets the genre data for inserting into the database depending on the file Returns: List[str]: List of genres \"\"\" if self . songfile is not None : return self . songfile . get_genre_data ()","title":"get_genre_data()"},{"location":"songparser/#src.core.songparser.SongMetadata.get_song_artist_data","text":"get_song_artist_data Gets the song artist data for inserting into the database depending on the file Returns: Type Description List [ str ] List[str]: List of song artists Source code in src\\core\\songparser.py 539 540 541 542 543 544 545 546 547 def get_song_artist_data ( self ) -> List [ str ]: \"\"\" get_song_artist_data Gets the song artist data for inserting into the database depending on the file Returns: List[str]: List of song artists \"\"\" if self . songfile is not None : return self . songfile . get_song_artist_data ()","title":"get_song_artist_data()"},{"location":"songparser/#src.core.songparser.SongMetadata.get_song_table_data","text":"get_song_table_data Gets the required song data for inserting into the database depending on the file Returns: Type Description Dict [ str , str ] Dict[str, str]: Dictionary of song data Source code in src\\core\\songparser.py 519 520 521 522 523 524 525 526 527 def get_song_table_data ( self ) -> Dict [ str , str ]: \"\"\" get_song_table_data Gets the required song data for inserting into the database depending on the file Returns: Dict[str, str]: Dictionary of song data \"\"\" if self . songfile is not None : return self . songfile . get_song_table_data ()","title":"get_song_table_data()"},{"location":"songparser/#src.core.songparser.file_to_hash","text":"file_to_hash Get the SHA256 hash of a file. Parameters: Name Type Description Default filepath str Path to the file. required Returns: Name Type Description str str The SHA256 hash of the file. Source code in src\\core\\songparser.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 def file_to_hash ( filepath : str ) -> str : \"\"\" file_to_hash Get the SHA256 hash of a file. Args: filepath (str): Path to the file. Returns: str: The SHA256 hash of the file. \"\"\" # Open,close, read file and calculate SHA256 on its contents with open ( filepath , \"rb\" ) as f : bytes = f . read () # read entire file as bytes readable_hash = hashlib . sha256 ( bytes ) . hexdigest (); return readable_hash","title":"file_to_hash()"}]}